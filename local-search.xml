<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>使用Hugo搭建博客站点</title>
    <link href="/wilson-blog-hexo/2023/12/03/hugo-blog/"/>
    <url>/wilson-blog-hexo/2023/12/03/hugo-blog/</url>
    
    <content type="html"><![CDATA[<h1 id="使用Hugo搭建博客站点"><a href="#使用Hugo搭建博客站点" class="headerlink" title="使用Hugo搭建博客站点"></a>使用Hugo搭建博客站点</h1><blockquote><p>本篇介绍将博客站点从 Hexo 迁移为 Hugo 的过程</p></blockquote><h2 id="Hugo-简介以及和-Hexo-的对比"><a href="#Hugo-简介以及和-Hexo-的对比" class="headerlink" title="Hugo 简介以及和 Hexo 的对比"></a>Hugo 简介以及和 Hexo 的对比</h2><p>Hugo 是一款基于 Go 的开源静态站点框架，从 <a href="https://github.com/gohugoio/hugo">Github</a> 记录来看，应该是 <a href="https://github.com/hexojs/hexo">Hexo</a> 的前身（一款基于 Node.js 的博客框架）。</p><p>Hugo 的简介是“世界上构建网站最快的框架”，这个不可否认，因为 Go 语言的优势就是并发性能高。不过对于搭建博客这种相对静态的站点来说，多少有点 Over kill。</p><p>那么既然它的简介是可以“构建网站“，扩展性上应该还是不错的吧，可能如果真的用于维护相对大型的网站，可能效果要比 Hexo 好一些？</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>按照 Hugo 安装说明准备好环境，我选择使用 Hugo 源码本地构建的方式，这里主要是准备 git、go 以及 c 编译器的配置。</p><p>这几项对于 Mac OS 来说都还好，主要是就是安装 Go，不过之前本地装过 Go，最终准备好的环境状态如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">➜  ~ git --version<br>git version 2.39.2 (Apple Git-143)<br>➜  ~ go version<br>go version go1.21.3 darwin/arm64<br>➜  ~ gcc --version<br>Apple clang version 14.0.3 (clang-1403.0.22.14.1)<br>Target: arm64-apple-darwin22.5.0<br>Thread model: posix<br>InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin<br></code></pre></td></tr></table></figure><h2 id="安装-Hugo"><a href="#安装-Hugo" class="headerlink" title="安装 Hugo"></a>安装 Hugo</h2><p>使用源码构建的方式，就是执行一条命令</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">GGO_ENABLED=<span class="hljs-number">1</span> <span class="hljs-keyword">go</span> install -<span class="hljs-keyword">tags</span> extended github.<span class="hljs-keyword">com</span>/gohugoio/hugo@latest<br></code></pre></td></tr></table></figure><p>这应该是把 Hugo 这个模块安装到 Go 的环境里，但是一上来就遇到了国内老生长谈的资源代理问题</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">GGO_ENABLED=<span class="hljs-number">1</span> go install -tags extended github.com<span class="hljs-regexp">/gohugoio/</span>hugo@latest<br>go: github.com<span class="hljs-regexp">/gohugoio/</span>hugo@latest: module github.com<span class="hljs-regexp">/gohugoio/</span>hugo: Get <span class="hljs-string">&quot;https://proxy.golang.org/github.com/gohugoio/hugo/@v/list&quot;</span>: dial tcp <span class="hljs-number">142.251</span>.<span class="hljs-number">43.17</span>:<span class="hljs-number">443</span>: i/o timeout<br></code></pre></td></tr></table></figure><p>于是查了一下网上的解决方法，尽管使用了谷歌搜索，排名靠前的搜索结却依然是 CSDN 的回答，方法就是改用国内代理</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">go env -w GOPROXY=https:<span class="hljs-regexp">//g</span>oproxy.cn<br></code></pre></td></tr></table></figure><p>这种方法可能立竿见影，但是怕后续安装其他包有问题，所以继续看看有没有更通用的解决方法。</p><p>接着搜到 Go 的 Github 仓库下相关的 <a href="https://github.com/golang/go/issues/57185#issuecomment-1343966825">issue</a> ，里面讨论出的方法看上去更加简单粗暴</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">go env -w <span class="hljs-attribute">GOPROXY</span>=direct<br>go env -w <span class="hljs-attribute">GOSUMDB</span>=off<br></code></pre></td></tr></table></figure><p>看上去像是把代理修改为了直连，还关闭了一个配置，但这确实大家一致认同（👍🏻）的解决方法</p><p>再看看还有没有更靠谱的方法（开始好奇国内那么多 Go 开发者又是怎么面对代理这个问题的，真是难）</p><p>还发现了第一个方法（修改代理源）相关的 <a href="https://github.com/goproxy/goproxy.cn/issues/93">Github 讨论</a>，这个工具应该是中国人开发的，以至于 issue 内都直接是全中文讨论。</p><blockquote><p>开始感慨国内环境下学一门新的编程技术时，往往遇到的最大问题就是环境问题，这也是最劝退的环节，但这本不应该是阻挠初学者入门的问题。</p></blockquote><p>接着打开了一篇 StackOverflow 的<a href="https://stackoverflow.com/questions/72726715/timeout-when-i-try-to-install-go-dependencies">帖子</a></p><p>没想到这问题在 2022 年也有讨论，好像是 Go 本身存在已久的问题，再次感叹 Go 的开发者不易。</p><p>翻了下一开始检查的 Go 版本号，是 go1.21.3，而 Node.js 的主版本好像都到 20 了吧，难道 Go 生态的迭代好像还不是很成熟的状态？</p><p>不过经过 StackOverflow 帖子的确认，准备考虑试一下把代理修改为直连的方式，希望奏效。</p><blockquote><p>不过我开始好奇对 Go 有更多的了解，比如如何查看我本地 Go 的环境的完整配置现状是什么样呢？比如修改 GOPROXY&#x3D;direct，那其他配置是什么样的呢？我修改完这个怎么确认我的修改有效呢？以及修改完这个配置还需要做什么来让这个配置修改生效呢？</p></blockquote><p>就在思考这些的同时，刚刚修改完配置的执行已经结束了，结果是再次失败</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">GGO_ENABLED=<span class="hljs-number">1</span> go install -tags extended github.com<span class="hljs-regexp">/gohugoio/</span>hugo@latest<br>go: downloading github.com<span class="hljs-regexp">/gohugoio/</span>hugo v0.<span class="hljs-number">120.4</span><br>go: github.com<span class="hljs-regexp">/gohugoio/</span>hugo@latest: github.com<span class="hljs-regexp">/gohugoio/</span>hugo@v0.<span class="hljs-number">120.4</span>: verifying module: github.com<span class="hljs-regexp">/gohugoio/</span>hugo@v0.<span class="hljs-number">120.4</span>: Get <span class="hljs-string">&quot;https://sum.golang.org/lookup/github.com/gohugoio/hugo@v0.120.4&quot;</span>: dial tcp <span class="hljs-number">142.251</span>.<span class="hljs-number">43.17</span>:<span class="hljs-number">443</span>: i/o timeout<br></code></pre></td></tr></table></figure><p>不过这次的失败原因好像不一样，看上去 Hugo 本身的下载好像有些进展，最后失败的是下载 sum 相关的东西。</p><p>这不就跟上面查到的对上了么，因为我只是把代理修改为了直连，而没有关闭那个和 sum 相关的配置，原因是为了做最小改动，但是看样子这个还是避不开要做。</p><p>sum 这个东西从名字上来看像是对包的校验，所以我决定暂时完全按照大家试过的方式先解决这个问题。</p><p>而且刚才我使用的是 StackOverflow 帖子里提供的方式，也就是</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">GOPROXY</span>=direct<br></code></pre></td></tr></table></figure><p>这种 export 的方式我记得是修改 shell 环境的环境变量设置，不知道下面的设置方式本质是不是也是这个效果。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">go env -w <span class="hljs-attribute">GOPROXY</span>=direct<br>go env -w <span class="hljs-attribute">GOSUMDB</span>=off<br></code></pre></td></tr></table></figure><p>不过，这样来看 go env 应该是 go 的一个命令，那么可以通过 help 命令看下具体的当前配置情况，也顺便解开刚才的迷惑。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">go</span> <span class="hljs-keyword">help</span>   <br>Go <span class="hljs-keyword">is</span> <span class="hljs-keyword">a</span> tool <span class="hljs-keyword">for</span> managing Go <span class="hljs-keyword">source</span> code.<br><br>Usage:<br><br>        <span class="hljs-keyword">go</span> <span class="hljs-symbol">&lt;command&gt;</span> [arguments]<br><br>The commands are:<br><br>        bug         start <span class="hljs-keyword">a</span> bug report<br>        build       compile packages <span class="hljs-built_in">and</span> dependencies<br>        clean       <span class="hljs-built_in">remove</span> object <span class="hljs-keyword">files</span> <span class="hljs-built_in">and</span> cached <span class="hljs-keyword">files</span><br>        doc         show documentation <span class="hljs-keyword">for</span> package <span class="hljs-built_in">or</span> symbol<br>        env         <span class="hljs-keyword">print</span> Go environment information<br>        <span class="hljs-keyword">fix</span>         <span class="hljs-keyword">update</span> packages <span class="hljs-keyword">to</span> use <span class="hljs-keyword">new</span> APIs<br>        fmt         gofmt (reformat) package sources<br>        generate    generate Go <span class="hljs-keyword">files</span> by processing <span class="hljs-keyword">source</span><br>        <span class="hljs-built_in">get</span>         <span class="hljs-built_in">add</span> dependencies <span class="hljs-keyword">to</span> current module <span class="hljs-built_in">and</span> install them<br>        install     compile <span class="hljs-built_in">and</span> install packages <span class="hljs-built_in">and</span> dependencies<br>        <span class="hljs-keyword">list</span>        <span class="hljs-keyword">list</span> packages <span class="hljs-built_in">or</span> modules<br>        <span class="hljs-keyword">mod</span>         module maintenance<br>        work        workspace maintenance<br>        run         compile <span class="hljs-built_in">and</span> run Go program<br>        test        test packages<br>        tool        run specified <span class="hljs-keyword">go</span> tool<br>        <span class="hljs-keyword">version</span>     <span class="hljs-keyword">print</span> Go <span class="hljs-keyword">version</span><br>        vet         report likely mistakes in packages<br><br>Use <span class="hljs-string">&quot;go help &lt;command&gt;&quot;</span> <span class="hljs-keyword">for</span> more information about <span class="hljs-keyword">a</span> <span class="hljs-keyword">command</span>.<br></code></pre></td></tr></table></figure><p>发现一个好东西，go env ，原来这个命令默认是可以查看所有的环境配置信息，如果在后面跟随内容则是对环境配置进行设置，这样看 -w 应该是写入的意思，有点像 git 修改配置的方式。</p><p>同时，我也在打印出的环境配置信息中发现了我想知道的，如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">GOPROXY</span>=<span class="hljs-string">&#x27;direct&#x27;</span><br></code></pre></td></tr></table></figure><p>这意味着刚才通过 export 设置的应该是生效了，但是 GOSUMDB 如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">GOSUMDB</span>=<span class="hljs-string">&#x27;sum.golang.org&#x27;</span><br></code></pre></td></tr></table></figure><p>这明显和预期的 off 不同，可能就是这个默认配置导致我的步骤进行不下去，那么赶紧修改它试一下</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">go</span> env -w GOSUMDB=<span class="hljs-literal">off</span><br></code></pre></td></tr></table></figure><p>这次果然顺利，控制台展示出各个模块的下载</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs dts">GGO_ENABLED=<span class="hljs-number">1</span> go install -tags extended github.com<span class="hljs-keyword">/gohugoio/</span>hugo@latest<br><span class="hljs-symbol">go:</span> downloading github.com<span class="hljs-keyword">/gohugoio/</span>hugo v0<span class="hljs-number">.120</span><span class="hljs-number">.4</span><br><span class="hljs-symbol">go:</span> downloading github.com<span class="hljs-keyword">/alecthomas/</span>chroma/v2 v2<span class="hljs-number">.10</span><span class="hljs-number">.0</span><br><span class="hljs-symbol">go:</span> downloading github.com<span class="hljs-keyword">/bep/</span>clocks v0<span class="hljs-number">.5</span><span class="hljs-number">.0</span><br><span class="hljs-symbol">go:</span> downloading github.com<span class="hljs-keyword">/bep/</span>debounce v1<span class="hljs-number">.2</span><span class="hljs-number">.0</span><br><span class="hljs-symbol">go:</span> downloading github.com<span class="hljs-keyword">/bep/</span>lazycache v0<span class="hljs-number">.2</span><span class="hljs-number">.0</span><br><span class="hljs-symbol">go:</span> downloading github.com<span class="hljs-keyword">/bep/</span>logg v0<span class="hljs-number">.3</span><span class="hljs-number">.0</span><br><span class="hljs-symbol">go:</span> downloading github.com<span class="hljs-keyword">/bep/</span>mclib v1<span class="hljs-number">.20400</span><span class="hljs-number">.20402</span><br><span class="hljs-symbol">go:</span> downloading github.com<span class="hljs-keyword">/bep/</span>overlayfs v0<span class="hljs-number">.6</span><span class="hljs-number">.0</span><br><span class="hljs-symbol">go:</span> downloading github.com<span class="hljs-keyword">/bep/</span>simplecobra v0<span class="hljs-number">.3</span><span class="hljs-number">.2</span><br><span class="hljs-symbol">go:</span> downloading github.com<span class="hljs-keyword">/fsnotify/</span>fsnotify v1<span class="hljs-number">.7</span><span class="hljs-number">.0</span><br><span class="hljs-symbol">go:</span> downloading github.com<span class="hljs-keyword">/spf13/</span>afero v1<span class="hljs-number">.10</span><span class="hljs-number">.0</span><br><span class="hljs-symbol">go:</span> downloading github.com<span class="hljs-keyword">/spf13/</span>cobra v1<span class="hljs-number">.7</span><span class="hljs-number">.0</span><br><span class="hljs-symbol">go:</span> downloading github.com<span class="hljs-keyword">/spf13/</span>fsync v0<span class="hljs-number">.9</span><span class="hljs-number">.0</span><br><span class="hljs-symbol">go:</span> downloading github.com<span class="hljs-keyword">/spf13/</span>pflag v1<span class="hljs-number">.0</span><span class="hljs-number">.5</span><br><span class="hljs-symbol">go:</span> downloading go.uber.org/automaxprocs v1<span class="hljs-number">.5</span><span class="hljs-number">.3</span><br><span class="hljs-symbol">go:</span> downloading golang.org<span class="hljs-keyword">/x/</span>sync v0<span class="hljs-number">.4</span><span class="hljs-number">.0</span><br><span class="hljs-symbol">go:</span> downloading gopkg.in/yaml.v2 v2<span class="hljs-number">.4</span><span class="hljs-number">.0</span><br><span class="hljs-symbol">go:</span> downloading github.com<span class="hljs-keyword">/hashicorp/</span>golang-lru/v2 v2<span class="hljs-number">.0</span><span class="hljs-number">.1</span><br><span class="hljs-symbol">go:</span> downloading github.com<span class="hljs-keyword">/bep/</span>godartsass v1<span class="hljs-number">.2</span><span class="hljs-number">.0</span><br>...<br></code></pre></td></tr></table></figure><blockquote><p>后面有时间等有必要时再了解一下这里的 sum 究竟是什么作用，目前配置上先把它设置为 off 了，如果是包校验什么的，应该也不会影响 go module 的正常使用</p></blockquote><p>模块的下载过程就是普通的网络 IO，不过看到控制台展示的内容突然想起来之前看到过的 Go 代码，Go 的模块引用路径好像是可以写远程 URL 的，难道 Deno（Node.js之后的 JavaScript 服务端运行时）就是借鉴了这种方式？</p><p>还在想这些的时候，没想到下载过程又失败了，这次虽然应该是成功下载了一部分模块，但还是有很多模块因 tcp 拨号超时导致没下载下来。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gradle">go: downloading github.com<span class="hljs-regexp">/josharian/i</span>ntern v1.<span class="hljs-number">0.0</span><br>pkg<span class="hljs-regexp">/mod/gi</span>thub.com<span class="hljs-regexp">/bep/m</span>clib@v1.<span class="hljs-number">20400.20402</span><span class="hljs-regexp">/internal/m</span>ain.go:<span class="hljs-number">27</span>:<span class="hljs-number">2</span>: unrecognized <span class="hljs-keyword">import</span> path <span class="hljs-string">&quot;golang.org/x/net&quot;</span>: https fetch: Get <span class="hljs-string">&quot;https://golang.org/x/net?go-get=1&quot;</span>: dial tcp <span class="hljs-number">172.217</span>.<span class="hljs-number">163.49</span>:<span class="hljs-number">443</span>: i/o timeout<br>pkg<span class="hljs-regexp">/mod/</span>software.sslmate.com<span class="hljs-regexp">/src/g</span>o-pkcs12@v0.<span class="hljs-number">2.0</span><span class="hljs-regexp">/crypto.go:20:2: unrecognized import path &quot;golang.org/</span>x<span class="hljs-regexp">/crypto&quot;: https fetch: Get &quot;https:/</span><span class="hljs-regexp">/golang.org/</span>x<span class="hljs-regexp">/crypto?go-get=1&quot;: dial tcp 172.217.163.49:443: i/</span>o timeout<br>pkg<span class="hljs-regexp">/mod/gi</span>thub.com<span class="hljs-regexp">/spf13/</span>afero@v1.<span class="hljs-number">10.0</span><span class="hljs-regexp">/util.go:28:2: unrecognized import path &quot;golang.org/</span>x<span class="hljs-regexp">/text&quot;: https fetch: Get &quot;https:/</span><span class="hljs-regexp">/golang.org/</span>x<span class="hljs-regexp">/text?go-get=1&quot;: dial tcp 142.251.43.17:443: i/</span>o timeout<br>pkg<span class="hljs-regexp">/mod/gi</span>thub.com<span class="hljs-regexp">/spf13/</span>afero@v1.<span class="hljs-number">10.0</span><span class="hljs-regexp">/util.go:29:2: unrecognized import path &quot;golang.org/</span>x<span class="hljs-regexp">/text&quot;: https fetch: Get &quot;https:/</span><span class="hljs-regexp">/golang.org/</span>x<span class="hljs-regexp">/text?go-get=1&quot;: dial tcp 142.251.43.17:443: i/</span>o timeout<br>pkg<span class="hljs-regexp">/mod/gi</span>thub.com<span class="hljs-regexp">/spf13/</span>afero@v1.<span class="hljs-number">10.0</span><span class="hljs-regexp">/util.go:30:2: unrecognized import path &quot;golang.org/</span>x<span class="hljs-regexp">/text&quot;: https fetch: Get &quot;https:/</span><span class="hljs-regexp">/golang.org/</span>x<span class="hljs-regexp">/text?go-get=1&quot;: dial tcp 142.251.43.17:443: i/</span>o timeout<br>pkg<span class="hljs-regexp">/mod/gi</span>thub.com<span class="hljs-regexp">/fsnotify/</span>fsnotify@v1.<span class="hljs-number">7.0</span><span class="hljs-regexp">/backend_kqueue.go:16:2: unrecognized import path &quot;golang.org/</span>x<span class="hljs-regexp">/sys&quot;: https fetch: Get &quot;https:/</span><span class="hljs-regexp">/golang.org/</span>x<span class="hljs-regexp">/sys?go-get=1&quot;: dial tcp 172.217.163.49:443: i/</span>o timeout<br>...<br></code></pre></td></tr></table></figure><p>先试一下 Hugo 现在能不能运行</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-title">hugo</span> <span class="hljs-comment">--version </span><br><span class="hljs-title">zsh</span>: <span class="hljs-keyword">command</span> not found: hugo<br></code></pre></td></tr></table></figure><p>可惜，看来 hugo 还没成功下载。于是接着拿控制台的内容去搜索解决方法。</p><p>这回搜到的是<a href="https://zhuanlan.zhihu.com/p/408157841">知乎的回答</a></p><p>感觉标准的方式行不通了，为了不在环境准备这一步花费太多时间，我决定妥协使用国人的工具，也就是 goproxy.cn，毕竟有些问题本质就是国家网络环境的问题。</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mel">go <span class="hljs-keyword">env</span> -w GOPROXY=https:<span class="hljs-comment">//goproxy.cn</span><br><span class="hljs-keyword">warning</span>: go <span class="hljs-keyword">env</span> -w GOPROXY=... does not override conflicting OS environment variable<br></code></pre></td></tr></table></figure><p>竟然这也不顺利</p><blockquote><p>有点回想起当初折腾 Java 的感觉，果然服务端的东西很多时候还是环境的问题，docker 也算解决了一部分这些问题吧，毕竟对于应用部署来说。</p></blockquote><p>不过再仔细看控制台输出，想起了刚才使用过 export 设置，感觉这就是和 go env 冲突的地方，也是刚才担心过的问题。</p><p>本来准备研究一下 shell 的 export 和 source 以及 go env 的区别，但是在搜索的过程中发现 goproxy.cn 的<a href="https://goproxy.cn/">官网</a>，看了一下受欢迎程度还行。</p><p>那就先试试用这个工具来搭建国内使用 Go 的环境吧，毕竟对于 Node.js 在国内使用也是要经常考虑把包管理源设置为国内的镜像。</p><p>于是准备按照 goproxy.cn 的使用介绍进行配置，不过依然在进行到设置 GOPROXY 这一步会失败，看输出内容应该就是和 shell 环境里的设置冲突了。不过我记得通过 export 设置的环境变量只在一次 shell 的生命周期有效，也就是只要我重启 shell ，刚才通过 export 设置过的应该就会没了。</p><p>经过验证，果然如此，在重启终端后再次使用 go env 设置 GOPROXY 果然成功了，安装继续。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">GGO_ENABLED</span>=<span class="hljs-number">1</span> go install -tags extended github.com/gohugoio/hugo@latest<br><span class="hljs-attribute">go</span>: downloading golang.org/x/sync v0.<span class="hljs-number">4</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">go</span>: downloading golang.org/x/exp v0.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>-<span class="hljs-number">20221031165847</span>-c99f073a8326<br><span class="hljs-attribute">go</span>: downloading golang.org/x/text v0.<span class="hljs-number">13</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">go</span>: downloading google.golang.org/api v0.<span class="hljs-number">138</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">go</span>: downloading golang.org/x/sys v0.<span class="hljs-number">13</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">go</span>: downloading golang.org/x/tools v0.<span class="hljs-number">14</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">go</span>: downloading google.golang.org/protobuf v1.<span class="hljs-number">31</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">go</span>: downloading golang.org/x/image v0.<span class="hljs-number">13</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">go</span>: downloading cloud.google.com/go/compute/metadata v0.<span class="hljs-number">2</span>.<span class="hljs-number">3</span><br><span class="hljs-attribute">go</span>: downloading cloud.google.com/go/compute v1.<span class="hljs-number">23</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">go</span>: downloading cloud.google.com/go/iam v1.<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">go</span>: downloading cloud.google.com/go/storage v1.<span class="hljs-number">31</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">go</span>: downloading golang.org/x/oauth2 v0.<span class="hljs-number">11</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">go</span>: downloading cloud.google.com/go v0.<span class="hljs-number">110</span>.<span class="hljs-number">7</span><br><span class="hljs-attribute">go</span>: downloading golang.org/x/net v0.<span class="hljs-number">17</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">go</span>: downloading golang.org/x/mod v0.<span class="hljs-number">13</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">go</span>: downloading golang.org/x/xerrors v0.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>-<span class="hljs-number">20220907171357</span>-<span class="hljs-number">04</span>be3eba64a2<br><span class="hljs-attribute">go</span>: downloading google.golang.org/grpc v1.<span class="hljs-number">57</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">go</span>: downloading golang.org/x/crypto v0.<span class="hljs-number">14</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">go</span>: downloading google.golang.org/genproto/googleapis/api v0.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>-<span class="hljs-number">20230803162519</span>-f966b187b2e5<br><span class="hljs-attribute">go</span>: downloading google.golang.org/genproto v0.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>-<span class="hljs-number">20230803162519</span>-f966b187b2e5<br><span class="hljs-attribute">go</span>: downloading google.golang.org/genproto/googleapis/rpc v0.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>-<span class="hljs-number">20230807174057</span>-<span class="hljs-number">1744710</span>a1577<br><span class="hljs-attribute">go</span>: downloading github.com/golang/protobuf v1.<span class="hljs-number">5</span>.<span class="hljs-number">3</span><br><span class="hljs-attribute">go</span>: downloading github.com/google/s2a-go v0.<span class="hljs-number">1</span>.<span class="hljs-number">5</span><br><span class="hljs-attribute">go</span>: downloading github.com/googleapis/enterprise-certificate-proxy v0.<span class="hljs-number">2</span>.<span class="hljs-number">5</span><br><span class="hljs-attribute">go</span>: downloading google.golang.org/appengine v1.<span class="hljs-number">6</span>.<span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><p>这次果然异常平静得顺利🙄，看来在国内开发 Go，还是得有一层自己的代理。</p><blockquote><p>这个代理层应该是在国内服务器架设了模块仓库，然后定期更新国外源的资源并做缓存。所有具备模块化的语言基本都逃不开这种做法，不过说到底这还是网络的问题，但好像这样做也是符合各个国家分布式使用网络资源的最合理方式，有点像网络模块的 CDN 。</p></blockquote><p>问题不大，赶紧试试 hugo 装成功了吗</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-title">hugo</span> <span class="hljs-comment">--version</span><br><span class="hljs-title">zsh</span>: <span class="hljs-keyword">command</span> not found: hugo<br></code></pre></td></tr></table></figure><p>竟然还是不行，感觉被模块下载缠了这么久，有点忘记主线的流程，返回看了下 hugo 的<a href="https://gohugo.io/installation/macos/#build-from-source">文档</a></p><p>这回好像又发现了自己的问题，可以是因为之前就安装过 Go ，因此对于 GOBIN 这一步的设置忽视了。好像是因为这里没按照 hugo 文档进行设置，因此无法在任意目录使用 hugo 的可执行文件。</p><p>于是按照 hugo 文档的提示去看了看 Go 的文档，大概理解了 GOBIN 的定位，这是存放 Go 可执行模块的地方，类似于 Node.js 中 .bin（包括 Linux 操作系统对于可执行文件的设计也差不多是这样的）</p><p>于是找到 GOPATH 所在的目录，果然找到了 bin 目录，进到 bin 目录后果然看到了可执行文件 hugo 。</p><p>既然 hugo 已经安装成功，那就好办了。</p><p>看到 Go 文档中有介绍可以设置 GOBIN 的目录，但是此时还是不太理解如果不设置用默认的有什么问题。反复看了几遍关于 go mod 的介绍，感觉和 Node.js 对于 node_modules 的管理差不多。</p><p>直到看到 Hugo 社区的一篇<a href="https://discourse.gohugo.io/t/hugo-not-found/27870/2">帖子</a>才恍然大悟。</p><blockquote><p>对于 hugo 有社区这一现象感觉还不错，说明用户群体应该挺大的，而且 hugo 貌似也有些年头了。</p></blockquote><p>关键问题就在于我没有设置 GOBIN，因此对于 Go 下载下来的可执行模块都放在了 GOPATH 下的 bin 目录。</p><p>但在没有做任何事情的情况下，这些可执行文件只能进到这个目录才能执行，而不能任何其他位置执行，这不就是 Linux 系统对于 bin 目录的设计吗</p><p>因此只有我把 GOBIN 设置为系统的用户 bin 目录下，这样操作系统才会对于我在任意目录下输入某个文件时查找其是否存在于可执行文件目录并执行。</p><blockquote><p>而且这篇帖子的<a href="https://discourse.gohugo.io/t/hugo-not-found/27870/16">讨论</a>也顺带提了一下关于 source 命令的使用，这里应该意思就是 source 是用来执行 shell 配置文件的，因此当修改完 shell 配置文件后，如果希望立刻对当前 shell 环境生效，那么需要通过 source 来显式地告诉 shell。</p></blockquote><p>于是我仔细检查了我的 $PATH 和 ~.zshrc 配置</p><p>我的 $PATH 中有 <code>/usr/local/go/bin</code> 一项，同时我的 ~.zshrc 中有关于 $PATH 相关的导出 <code>export PATH=&quot;$BUN_INSTALL/bin:$PATH&quot;</code></p><p>因此对于 &#x2F;usr&#x2F;local&#x2F;go&#x2F;bin 目录下的可执行文件我是可以在任意目录执行的，但问题在于我当前的 go env 中并未设置 GOBIN，所以安装在该目录的 hugo 暂时还无法被检索到。</p><p>问题清晰了就离解决不远了</p><p>先总结一下，shell 的配置文件，默认可能是 bash 的配置文件，使用了 on my zsh 的则会是 .zshrc。</p><p>这个文件声明了 shell 启动时的环境配置，里面一般会将 $PATH 变量导出，这也意味着该变量内的路径都成为了某个 shell 内的环境变量，因此在 shell 内执行文件时都会寻着 $PATH 变量设置过的所有路径找一遍。</p><p>因此一般会将可执行文件存放的目录设置在 PATH 中，这一特征对于类 Unix 系统（Linux、MacOS）和 Windows 都差不多</p><p>总结完，我们就知道应该如果做了。</p><p>因为我现在的 .zshrc 是导出了 PATH 的，而 PATH 中也存在 Go 相关的可执行文件目录，只是 Go 下载可执行模块的安装目录由于未设置而被默认为 ~&#x2F;go&#x2F;bin。而这个目录并不在 PATH 之列，因此无法在执行文件时被索引到，这可能是之前装 Go 时因为不熟悉而留下的问题吧。</p><p>那么现在可做的方法有两个，一个是把 GOBIN 的默认目录设置在 PATH 中，另一个则是把 PATH 中已有的 Go bin 目录设置为 GOBIN 目录，我选择后者，因为改动最小。</p><p>改动之前可以先到 &#x2F;usr&#x2F;local&#x2F;go&#x2F;bin 目录看看现在都有什么</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/go/</span>bin<br>➜  bin ls<br>go    gofmt<br></code></pre></td></tr></table></figure><p>啊哈，原来就是 go 本身，那 Go 只是默认不希望所有下载的可执行模块都被注册到这里来吧，因此默认的 GOBIN 留给了用户自己设置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">CGO_ENABLED=<span class="hljs-number">1</span> go install -tags extended github.com<span class="hljs-regexp">/gohugoio/</span>hugo@latest<br>github.com<span class="hljs-regexp">/gohugoio/</span>hugo: go install github.com<span class="hljs-regexp">/gohugoio/</span>hugo: copying <span class="hljs-regexp">/var/</span>folders<span class="hljs-regexp">/56/</span>pfj7c2qs30j1n92sqrrq471c0000gn<span class="hljs-regexp">/T/g</span>o-build113185545<span class="hljs-regexp">/b001/</span>exe<span class="hljs-regexp">/a.out: open /u</span>sr<span class="hljs-regexp">/local/g</span>o<span class="hljs-regexp">/bin/</span>hugo: permission denied<br>➜  bin sudo CGO_ENABLED=<span class="hljs-number">1</span> go install -tags extended github.com<span class="hljs-regexp">/gohugoio/</span>hugo@latest<br>Password:<br>➜  bin ls<br>go    gofmt hugo<br></code></pre></td></tr></table></figure><p>效果不错，只是很明显这样下载可执行模块时需要通过 sudo 授权，因为貌似 &#x2F;usr&#x2F;local&#x2F;go&#x2F;bin 是需要授权的目录，而 ~&#x2F;go&#x2F;bin 是用户目录则没有这个问题。而且这个问题也只有在下载模块到 go 全局模块目录才会有这个问题，对于一般的 Go 项目都会下载到项目目录（类比下载 npm 包到 node_modules）。</p><p>不过为了不给未来留坑，貌似还是把 GOBIN 默认的 ~&#x2F;go&#x2F;bin 设置到 PATH 更合理些，毕竟发现 PATH 中有关于 bun（JavaScript另一个服务端运行时）的设置就是将用户目录设置在 PATH 的，而且 PATH 中大多设置的都是用户目录，并附加系统的那几个 bin 目录。</p><p>经过一顿关于环境变量的设置，终于如愿以偿地看到了下面的输出</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">hugo</span> version<br><span class="hljs-attribute">hugo</span> v0.<span class="hljs-number">120</span>.<span class="hljs-number">4</span>+extended darwin/arm64 BuildDate=unknown<br></code></pre></td></tr></table></figure><p>真是有点为了砸一个钉子，研究了锤子是怎么做的，不过索性就当复习了一下操作系统基础知识。</p><h2 id="使用-Hugo-新建站点"><a href="#使用-Hugo-新建站点" class="headerlink" title="使用 Hugo 新建站点"></a>使用 Hugo 新建站点</h2><p>未完待续</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>学习Rust语法-使用包、预置库和模块管理不断增长的项目</title>
    <link href="/wilson-blog-hexo/2023/08/31/rust-learning-05/"/>
    <url>/wilson-blog-hexo/2023/08/31/rust-learning-05/</url>
    
    <content type="html"><![CDATA[<p>使用包、预置库和模块管理不断增长的项目</p><span id="more"></span><h1 id="包和库"><a href="#包和库" class="headerlink" title="包和库"></a>包和库</h1><p>库是 Rust 编译器一次考虑的最小数量的代码，即使使用 rustc 运行一个源码文件，也称为库。</p><p>库可以包含模块，模块可能定义在其他文件。</p><h2 id="库形态"><a href="#库形态" class="headerlink" title="库形态"></a>库形态</h2><p>库有两种形态，可以是一个<code>二进制库</code>或一个<code>源码库</code>。</p><p>二进制库需要有 main 函数定义。</p><p>源码库可以没有 main 函数，不会被编译为可执行文件，只定义用于多个项目使用的函数，比如 rand，一般 rust 使用者提到的库都是源码库。</p><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><p>包是由一个或多个库组成的，有 Cargo.toml 文件描述如果构建其中的库。</p><p>Cargo就是一个包，它包含二进制库用于命令行工具，同时也包含一些源码库用于命令行工具。</p><p>一个包可以有任意多个二进制库，但只能有一个源码库。一个库至少要有一个库。</p><h1 id="定义模块以控制作用域和私有性"><a href="#定义模块以控制作用域和私有性" class="headerlink" title="定义模块以控制作用域和私有性"></a>定义模块以控制作用域和私有性</h1><p>use 关键字用于将一个路径引入作用域，pub 关键字用于将内容公开。</p><h2 id="模块技巧"><a href="#模块技巧" class="headerlink" title="模块技巧"></a>模块技巧</h2><ul><li>从源码库根开始：当编译一个库时，编译器首先会寻找根库文件（源码库一般是src&#x2F;lib.rs，二进制库一般为src&#x2F;main.rs）</li><li>声明模块：在根库文件，可以声明新的模块，比如 mod garden; 编译器会从以下地方寻找该模块<ul><li>行内</li><li>src&#x2F;garden.rs</li><li>src&#x2F;garden&#x2F;mod.rs</li></ul></li><li>声明子模块：在根库以外的任意文件，可以声明子模块。比如 mod vegetables; 编译器会从以下地方寻找子模块<ul><li>行内</li><li>src&#x2F;garden&#x2F;vegetables.rs</li><li>src&#x2F;garden&#x2F;vegetables&#x2F;mod.rs</li></ul></li><li>模块内的代码路径：一旦模块成为库的一部分，在同一个库内的任意地方都可以引用那个模块内的代码。比如 crate::garden::vegetables::Asparagus</li><li>私有性和公有性：从父模块访问子模块内的代码默认是私有的。要声明公有性需要使用 pub mod 声明模块</li><li>use关键字：在一个作用域内，use关键字可以代替模块的完整路径。比如 crate::garden::vegetables::Asparagus，可以先 use crate::garden::vegetables::Asparagus，然后就可以在作用域内任意地方直接使用 Asparagus</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>rust</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习Rust语法-使用 if let 管理简约控制流</title>
    <link href="/wilson-blog-hexo/2023/08/31/rust-learning-04/"/>
    <url>/wilson-blog-hexo/2023/08/31/rust-learning-04/</url>
    
    <content type="html"><![CDATA[<p>使用 if let 管理简约控制流</p><span id="more"></span><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rs"><span class="hljs-keyword">let</span> <span class="hljs-variable">config_max</span> = <span class="hljs-title function_ invoke__">Some</span>(<span class="hljs-number">3u8</span>);<br><span class="hljs-keyword">match</span> config_max &#123;<br>    <span class="hljs-title function_ invoke__">Some</span>(max) =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;The maximum is configured to be &#123;&#125;&quot;</span>, max),<br>    _ =&gt; (),<br>&#125;<br></code></pre></td></tr></table></figure><p>对于以上这种不想对 None 值做任何处理的情况，可以使用 if let</p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs rs"><span class="hljs-keyword">let</span> <span class="hljs-variable">config_max</span> = <span class="hljs-title function_ invoke__">Some</span>(<span class="hljs-number">3u8</span>);<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">Some</span>(max) = config_max &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;The maximum is configured to be &#123;&#125;&quot;</span>, max);<br>&#125;<br></code></pre></td></tr></table></figure><p>if let 可以看作是 match 的语法糖，用于只关心匹配某种情况而不需要处理其他情况的场景</p><p>如果想处理其他场景，也可以使用 else</p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rs"><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">count</span> = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">match</span> coin &#123;<br>    Coin:<span class="hljs-title function_ invoke__">Quarter</span>(state) =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;State quarter from &#123;:?&#125;&quot;</span>, state),<br>    _ =&gt; count += <span class="hljs-number">1</span>,<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rs"><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">count</span> = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">Coin</span>:<span class="hljs-title function_ invoke__">Quarter</span>(state) = coin &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;State quarter from &#123;:?&#125;!&quot;</span>, state);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    count += <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>rust</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习Rust语法-枚举和模式匹配</title>
    <link href="/wilson-blog-hexo/2023/07/11/rust-learning-03/"/>
    <url>/wilson-blog-hexo/2023/07/11/rust-learning-03/</url>
    
    <content type="html"><![CDATA[<p>枚举和模式匹配</p><span id="more"></span><h1 id="枚举定义"><a href="#枚举定义" class="headerlink" title="枚举定义"></a>枚举定义</h1><p>枚举和结构体类似，但它可以定义在多个值可能性下的某一种。</p><p>比如 IP 地址目前只有 ipv4 和 ipv6 两种，当定义一个 IP 地址时它只可能是这两种中的一种。</p><p>因此对于 IP 地址的类型范围就可以一个枚举，表示该类型所有的可能。</p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rs"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">IpAddrKind</span> &#123;<br>    V4,<br>    V6,<br>&#125;<br><br><span class="hljs-keyword">let</span> <span class="hljs-variable">four</span> = IpAddrKind::V4;<br><span class="hljs-keyword">let</span> <span class="hljs-variable">six</span> = IpAddrKind::V6;<br></code></pre></td></tr></table></figure><p>对于 four 和 six，它们的类型都是 IpAddrKind，但又各自唯一。</p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rs"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">route</span>(ip_kind: IpAddrKind) &#123;&#125;<br></code></pre></td></tr></table></figure><p>这在作为函数参数类型时能够体现出来。</p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs rs"><span class="hljs-title function_ invoke__">route</span>(IpAddrKind::V4);<br><span class="hljs-title function_ invoke__">route</span>(IpAddrKind::V6);<br></code></pre></td></tr></table></figure><h2 id="枚举使用"><a href="#枚举使用" class="headerlink" title="枚举使用"></a>枚举使用</h2><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs rs"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">IpAddrKind</span> &#123;<br>    V4,<br>    V6,<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">IpAddr</span> &#123;<br>    kind: IpAddrKind,<br>    address: <span class="hljs-type">String</span>,<br>&#125;<br><br><span class="hljs-keyword">let</span> <span class="hljs-variable">home</span> = IpAddr &#123;<br>    kind: IpAddrKind::V4,<br>    address: <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>),<br>&#125;;<br><br><span class="hljs-keyword">let</span> <span class="hljs-variable">loopback</span> = IpAddr &#123;<br>    kind: IpAddrKind::V6,<br>    address: <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;::1&quot;</span>),<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rs"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">IpAddr</span> &#123;<br>    <span class="hljs-title function_ invoke__">V4</span>(<span class="hljs-type">String</span>),<br>    <span class="hljs-title function_ invoke__">V6</span>(<span class="hljs-type">String</span>),<br>&#125;<br><br><span class="hljs-keyword">let</span> <span class="hljs-variable">home</span> = IpAddr::<span class="hljs-title function_ invoke__">V4</span>(<span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>));<br><span class="hljs-keyword">let</span> <span class="hljs-variable">loopback</span> = IpAddr::<span class="hljs-title function_ invoke__">V6</span>(<span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;::1&quot;</span>));<br></code></pre></td></tr></table></figure><p>这样简写，无需声明结构体，这里的枚举像是一个函数。</p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rs"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">IpAddr</span> &#123;<br>    <span class="hljs-title function_ invoke__">V4</span>(<span class="hljs-type">u8</span>, <span class="hljs-type">u8</span>, <span class="hljs-type">u8</span>, <span class="hljs-type">u8</span>),<br>    <span class="hljs-title function_ invoke__">V6</span>(<span class="hljs-type">String</span>),<br>&#125;<br><br><span class="hljs-keyword">let</span> <span class="hljs-variable">home</span> = IpAddr::<span class="hljs-title function_ invoke__">V4</span>(<span class="hljs-number">127</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">let</span> <span class="hljs-variable">loopback</span> = IpAddr::<span class="hljs-title function_ invoke__">V6</span>(<span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;::1&quot;</span>));<br></code></pre></td></tr></table></figure><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rs"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Message</span> &#123;<br>    Quit,<br>    Move &#123; x: <span class="hljs-type">i32</span>, y: <span class="hljs-type">i32</span> &#125;,<br>    <span class="hljs-title function_ invoke__">Write</span>(<span class="hljs-type">String</span>),<br>    <span class="hljs-title function_ invoke__">ChangeColor</span>(<span class="hljs-type">i32</span>, <span class="hljs-type">i32</span>, <span class="hljs-type">i32</span>),<br>&#125;<br></code></pre></td></tr></table></figure><p>这样的枚举声明类似于以下定义四个结构体的方式</p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rs"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">QuitMessage</span>; <span class="hljs-comment">// unit struct</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">MoveMessage</span> &#123;<br>    x: <span class="hljs-type">i32</span>,<br>    y: <span class="hljs-type">i32</span>,<br>&#125;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">WriteMessage</span>(<span class="hljs-type">String</span>); <span class="hljs-comment">// tuple struct</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ChangeColorMessage</span>(<span class="hljs-type">i32</span>, <span class="hljs-type">i32</span>, <span class="hljs-type">i32</span>); <span class="hljs-comment">// tuple struct</span><br></code></pre></td></tr></table></figure><h2 id="枚举对比结构体"><a href="#枚举对比结构体" class="headerlink" title="枚举对比结构体"></a>枚举对比结构体</h2><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rs"><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Message</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">call</span>(&amp;<span class="hljs-keyword">self</span>) &#123;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> <span class="hljs-variable">m</span> = Message::<span class="hljs-title function_ invoke__">Write</span>(<span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello&quot;</span>));<br>m.<span class="hljs-title function_ invoke__">call</span>();<br></code></pre></td></tr></table></figure><h2 id="选项枚举"><a href="#选项枚举" class="headerlink" title="选项枚举"></a>选项枚举</h2><p>Option 是标准库内定义的类型，可用于表示某个值可能是某个值或者什么都不是。</p><p>比如当你访问一个非空列表的第一项时，你得到的就是列表第一项的值。</p><p>当你访问一个空列表的第一项时，你得到的就是什么都不是。</p><p>这种类型系统术语中的概念意味着编译器发现你处理了所有你应该处理的情况。</p><p>编程语言的设计一般会考虑你需要包含哪些功能，但那些未被包含的功能同样重要。Rust 不像其他编程语言，它没有 null 值。</p><p>null 值的问题在于你可能把它当做非 null 值使用，这样你会得到意想不到的错误。</p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs rs"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Option</span>&lt;T&gt; &#123;<br>    <span class="hljs-literal">None</span>,<br>    <span class="hljs-literal">Some</span>&lt;T&gt;,<br>&#125;<br></code></pre></td></tr></table></figure><p>选项枚举的价值在于当某个值的类型是选项枚举时，你需要处理它为 null 的情况，而在非 null 的情况你可以放心的使用。</p><h1 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h1><p>模式匹配允许你在值匹配到各个条件时执行基于该值情况的逻辑，模式可以是字面量、变量名或通配符等。匹配的强大之处在于模式的可表达性以及编译器可以确保所有情况都会被处理。</p><blockquote><p>类似 JS 的 switch 语句</p></blockquote><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs rs"><span class="hljs-meta">#[derive(Debug)]</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">UsState</span> &#123;<br>    Alabama<br>    Alaska,<br>&#125;<br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Coin</span> &#123;<br>    Penny,<br>    Nickel,<br>    Dime,<br>    <span class="hljs-title function_ invoke__">Quarter</span>(UsState),<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">value_in_cents</span>(coin: Coin) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">u8</span> &#123;<br>    <span class="hljs-keyword">match</span> coin &#123;<br>        Coin::Penny =&gt; &#123;<br>            <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Lucky penny!&quot;</span>);<br>            <span class="hljs-number">1</span><br>        &#125;,<br>        Coin::Nickel =&gt; <span class="hljs-number">5</span>,<br>        Coin::Dime =&gt; <span class="hljs-number">10</span>,<br>        Coin: <span class="hljs-title function_ invoke__">Quarter</span>(state) =&gt; &#123;<br>            <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;State quarter from &#123;:?&#125;!&quot;</span>, state);<br>            <span class="hljs-number">25</span><br>        &#125;,<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs rs"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">plus_one</span>(x: <span class="hljs-type">Option</span>&lt;<span class="hljs-type">i32</span>&gt;) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Option</span>&lt;<span class="hljs-type">i32</span>&gt; &#123;<br>    <span class="hljs-keyword">match</span> x &#123;<br>        <span class="hljs-literal">None</span> =&gt; <span class="hljs-literal">None</span>,<br>        <span class="hljs-title function_ invoke__">Some</span>(i) =&gt; <span class="hljs-title function_ invoke__">Some</span>(i + <span class="hljs-number">1</span>),<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> <span class="hljs-variable">five</span> = <span class="hljs-title function_ invoke__">Some</span>(<span class="hljs-number">5</span>);<br><span class="hljs-keyword">let</span> <span class="hljs-variable">six</span> = <span class="hljs-title function_ invoke__">plus_one</span>(five);<br><span class="hljs-keyword">let</span> <span class="hljs-variable">none</span> = <span class="hljs-title function_ invoke__">plus_one</span>(<span class="hljs-literal">None</span>);<br></code></pre></td></tr></table></figure><h2 id="匹配需要完备"><a href="#匹配需要完备" class="headerlink" title="匹配需要完备"></a>匹配需要完备</h2><p>当匹配条件未声明完备（处理所有情况）时，编译器会报错并提示未处理的情况。</p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs rs"><span class="hljs-keyword">let</span> <span class="hljs-variable">dice_roll</span> = <span class="hljs-number">9</span>;<br><span class="hljs-keyword">match</span> dice_roll &#123;<br>    <span class="hljs-number">3</span> =&gt; <span class="hljs-title function_ invoke__">add_fancy_hat</span>(),<br>    <span class="hljs-number">7</span> =&gt; <span class="hljs-title function_ invoke__">remove_fancy_hat</span>(),<br>    other =&gt; <span class="hljs-title function_ invoke__">move_player</span>(other),<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">add_fancy_hat</span>() &#123;&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">remove_fancy_hat</span>() &#123;&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">move_player</span>(num_spaces: <span class="hljs-type">u8</span>) &#123;&#125;<br></code></pre></td></tr></table></figure><p>这里的 other 表示除已经定义的匹配外，剩余的情况都会走到这里，这种情况可以任意定义匹配名称，比如这里使用了 other。</p><p>如果不想显式地声明剩余情况，可以使用“_”表示“其他情况”，然后声明对应的处理函数或者什么都不做</p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs rs"><span class="hljs-keyword">let</span> <span class="hljs-variable">dice_roll</span> = <span class="hljs-number">9</span>;<br><span class="hljs-keyword">match</span> dice_roll &#123;<br>    <span class="hljs-number">3</span> =&gt; <span class="hljs-title function_ invoke__">add_fancy_hat</span>(),<br>    <span class="hljs-number">7</span> =&gt; <span class="hljs-title function_ invoke__">remove_fancy_hat</span>(),<br>    _ =&gt; <span class="hljs-title function_ invoke__">reroll</span>(),<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">add_fancy_hat</span>() &#123;&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">remove_fancy_hat</span>() &#123;&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">reroll</span>() &#123;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rs"><span class="hljs-keyword">let</span> <span class="hljs-variable">dice_roll</span> = <span class="hljs-number">9</span>;<br><span class="hljs-keyword">match</span> dice_roll &#123;<br>    <span class="hljs-number">3</span> =&gt; <span class="hljs-title function_ invoke__">add_fancy_hat</span>(),<br>    <span class="hljs-number">7</span> =&gt; <span class="hljs-title function_ invoke__">remove_fancy_hat</span>(),<br>    _ =&gt; (),<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">add_fancy_hat</span>() &#123;&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">remove_fancy_hat</span>() &#123;&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>rust</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习Rust语法-结构体</title>
    <link href="/wilson-blog-hexo/2023/07/10/rust-learning-02/"/>
    <url>/wilson-blog-hexo/2023/07/10/rust-learning-02/</url>
    
    <content type="html"><![CDATA[<h1 id="Rust学习第二篇"><a href="#Rust学习第二篇" class="headerlink" title="Rust学习第二篇"></a>Rust学习第二篇</h1><span id="more"></span><h1 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h1><p>使用结构体可以自定义一系列数据结构并打包在一起，然后用其定义多个符合这个结构的值。</p><blockquote><p>类比 C 语言的结构体以及 TypeScript 的 interface</p></blockquote><p>结构体类似面向对象编程中的对象属性声明，使用结构体可以声明并实例化数据对象。</p><p>可被用于定义有关联的函数，这种有关联的函数称为”方法“。</p><p>结构体和枚举被用来创建新类型的代码块，以此充分利用 Rust 在编译时进行的类型检查。</p><h2 id="声明和初始化结构体"><a href="#声明和初始化结构体" class="headerlink" title="声明和初始化结构体"></a>声明和初始化结构体</h2><p>结构体类似于元组，都包含多个相关的值，并且支持存放不同类型的值。</p><p>不同于元组的是，结构体需要给每个值进行命名，因此可以知道每个值的含义。</p><p>增加了对于值的命名也意味着结构体比元组更加灵活——无需再依赖值的顺序来访问实例内的值。</p><h3 id="结构体声明"><a href="#结构体声明" class="headerlink" title="结构体声明"></a>结构体声明</h3><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rs"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">User</span> &#123;<br>    active: <span class="hljs-type">bool</span>,<br>    username: <span class="hljs-type">String</span>,<br>    email: <span class="hljs-type">String</span>,<br>    sign_in_count: <span class="hljs-type">u64</span>,<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>类比 C 语言结构体的声明方式</p></blockquote><h3 id="结构体实例化"><a href="#结构体实例化" class="headerlink" title="结构体实例化"></a>结构体实例化</h3><p>实例化结构体时无需按照结构体内的变量顺序，这也意味着结构体类似于数值类型的通用”模板“</p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rs"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">user1</span> = User &#123;<br>        active: <span class="hljs-literal">true</span>,<br>        username: <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;someusername123&quot;</span>),<br>        email: <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;someone@example.com&quot;</span>),<br>        sign_in_count: <span class="hljs-number">1</span>,<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="结构体访问和赋值"><a href="#结构体访问和赋值" class="headerlink" title="结构体访问和赋值"></a>结构体访问和赋值</h3><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rs"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">user1</span> = User &#123;<br>        active: <span class="hljs-literal">true</span>,<br>        username: <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;someusername123&quot;</span>),<br>        email: <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;someone@example.com&quot;</span>),<br>        sign_in_count: <span class="hljs-number">1</span>,<br>    &#125;<br>    user1.email = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;anotheremail@example.com&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="从已有实例生成新实例"><a href="#从已有实例生成新实例" class="headerlink" title="从已有实例生成新实例"></a>从已有实例生成新实例</h3><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs rs"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">User</span> &#123;<br>    active: <span class="hljs-type">bool</span>,<br>    username: <span class="hljs-type">String</span>,<br>    email: <span class="hljs-type">String</span>,<br>    sign_in_count: <span class="hljs-type">u64</span>,<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">user1</span> = User &#123;<br>        email: <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;someone@example.com&quot;</span>),<br>        username: <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;someusername123&quot;</span>),<br>        active: <span class="hljs-literal">true</span>,<br>        sign_in_count: <span class="hljs-number">1</span>,<br>    &#125;;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">user2</span> = User &#123;<br>        active: user1.active,<br>        username: user1.username,<br>        email: <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;another@example.com&quot;</span>),<br>        sign_in_count: user1.sign_in_count,<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于 user2 和 user1 这种结构相同，只有部分字段更新的情况，可以使用 .. 对相同字段的值进行简写</p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rs"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">user2</span> = User &#123;<br>        email: <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;another@example.com&quot;</span>),<br>        ..user1<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>.. 类似于 JS 中的剩余参数，只能用于最后</p></blockquote><h2 id="元组结构体"><a href="#元组结构体" class="headerlink" title="元组结构体"></a>元组结构体</h2><p>元组结构体使用 struct 关键字声明，可以对结构相同的元组各自进行命名，从而进行区分，用于表示不同的内容</p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rs"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Color</span>(<span class="hljs-type">i32</span>, <span class="hljs-type">i32</span>, <span class="hljs-type">i32</span>);<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span>(<span class="hljs-type">i32</span>, <span class="hljs-type">i32</span>, <span class="hljs-type">i32</span>);<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">black</span> = <span class="hljs-title function_ invoke__">Color</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">origin</span> = <span class="hljs-title function_ invoke__">Point</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>black 和 origin 的结构相同，却是不同的自定义数据类型。比如一个函数使用 Color 作为参数类型，则不能将 Point 类型的实例作为参数传入。</p><blockquote><p>类似于 TS 里的类型，即使结构相同，但属于不同的类型</p></blockquote><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>“方法”类似“函数”，都使用 fn 关键字进行声明，可以有参数和返回值。</p><p>方法与函数的区别在于方法只能在结构体、枚举或者特征对象内部定义，并且第一个参数始终为 self，表示方法被调用时的实例（上下文）。</p><blockquote><p>类似于 python 和 java 的方法</p></blockquote><h2 id="声明方法"><a href="#声明方法" class="headerlink" title="声明方法"></a>声明方法</h2><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs rs"><span class="hljs-meta">#[derive(Debug)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Rectangle</span> &#123;<br>    width: <span class="hljs-type">u32</span>,<br>    height: <span class="hljs-type">u32</span>,<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Rectangle</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">area</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">u32</span> &#123;<br>        <span class="hljs-keyword">self</span>.width * <span class="hljs-keyword">self</span>.height<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">rect1</span> = Rectangle &#123;<br>        width: <span class="hljs-number">30</span>,<br>        height: <span class="hljs-number">50</span>,<br>    &#125;;<br><br>    <span class="hljs-built_in">println!</span>(<br>        <span class="hljs-string">&quot;The area of the rectangle is &#123;&#125; square pixels.&quot;</span>,<br>        rect1.<span class="hljs-title function_ invoke__">area</span>()<br>    );<br>&#125;<br></code></pre></td></tr></table></figure><p>这里使用了 impl 关键字，用于表示与类型的关联的实现。&amp;self 其实是 &amp;self: Self 的简写，Self 表示 impl 所实现的类型。</p><p>self 既可以传递所有权(self)，也可以借用不可变引用 (&amp;self) 或借用可变引用 (&amp;mut self)，和函数的参数用法类似。</p><blockquote><p>这里我们只希望读取值，而不进行值的写操作，因此使用了借用不可变引用，而非可变引用或传递所有权。</p></blockquote><h2 id="方法对比函数"><a href="#方法对比函数" class="headerlink" title="方法对比函数"></a>方法对比函数</h2><p>之所以使用方法而非函数，是为了在多个地方能够访问 self，而无需重复作为参数传递，这样组织代码更加方便。</p><p>方法名可以和结构体内的字段同名</p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs rs"><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Rectangle</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">width</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">bool</span> &#123;<br>        <span class="hljs-keyword">self</span>.width &gt; <span class="hljs-number">0</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">rect1</span> = Rectangle &#123;<br>        width: <span class="hljs-number">30</span>,<br>        height: <span class="hljs-number">50</span>,<br>    &#125;;<br><br>    <span class="hljs-keyword">if</span> rect1.<span class="hljs-title function_ invoke__">width</span>() &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;The rectangle has a nonzero width; it is &#123;&#125;&quot;</span>, rect1.width);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里既访问了实例的 width 方法，也访问了实例的 width 属性。当使用括号访问时，表示在访问方法，没有括号时表示在访问属性。</p><h3 id="getter"><a href="#getter" class="headerlink" title="getter"></a>getter</h3><p>某些情况，我们希望当存在方法与属性同名时，访问方法仅仅是返回同名的属性值，这种方法称为“getter”</p><blockquote><p>getter 不会被默认实现</p></blockquote><p>getter 一般用于将一个结构体的属性不对外暴露（私有化），而只暴露方法（公有化）</p><blockquote><p>开闭原则——对访问开放，对修改封闭</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>rust</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过类比其他编程语言的方式学习Rust语法</title>
    <link href="/wilson-blog-hexo/2023/07/10/rust-learning-01/"/>
    <url>/wilson-blog-hexo/2023/07/10/rust-learning-01/</url>
    
    <content type="html"><![CDATA[<p>rust语法融合了多门编程语言的特性，可以看到很多语言的影子，例如 JavaScript、Java、Python、C、Go等。</p><span id="more"></span><h1 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h1><p><code>println!()</code>是宏定义，不是普通函数</p><blockquote><p>类比 C 语言</p></blockquote><h1 id="代码格式"><a href="#代码格式" class="headerlink" title="代码格式"></a>代码格式</h1><p>缩进为4个空格，而非<code>tab</code>（因为tab不一定对应4个空格）</p><blockquote><p>类比 Python 语言，严格要求缩进作为有效格式</p></blockquote><h1 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h1><p>字符使用单引号，字符串使用双引号</p><blockquote><p>类比 C 和 Java，JavaScript 中的单引号和双引号没有区别</p></blockquote><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>声明函数使用<code>fn</code></p><blockquote><p>类比 Go 语言中函数的声明</p></blockquote><h1 id="元组和数组"><a href="#元组和数组" class="headerlink" title="元组和数组"></a>元组和数组</h1><p>元组内可以存放不同类型的值，数组只能存放相同类型的值。</p><p>数组在声明时需要制定确定的大小，即数组元素的个数。</p><blockquote><p>类比 Python 中的元组和列表</p></blockquote><h1 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h1><p>对于元组或数组内的元素，都可以使用解构取出其内部的值。解构就是从一个大的容器内取出对应位置的值的操作。</p><blockquote><p>类比 JavaScript 中的解构</p></blockquote><h1 id="栈和堆"><a href="#栈和堆" class="headerlink" title="栈和堆"></a>栈和堆</h1><p>栈是连续内存，堆是随机分配的内存，因此申请栈比申请堆要快，所以一般将不确定大小或未来可能变化的变量存在在堆，并将访问该变量的指针（地址）存在栈。这样可以从栈中快速找到变量指针，然后通过指针访问具体的值。</p><p>整型、浮点型和布尔类型的变量创建时都申请固定大小的内存，所以它们都存在栈中。</p><p>字符串占用的内存不确定且可能被改变，因此存放在堆内存。</p><blockquote><p>类比 JavaScript 和 Java 对于变量声明的内存分配方式</p></blockquote><h1 id="变量不可变"><a href="#变量不可变" class="headerlink" title="变量不可变"></a>变量不可变</h1><p>变量默认都是不可变的，如果希望变量可被改变，需要使用<code>mut</code>(意指”mutable“)进行声明。</p><h1 id="所有权"><a href="#所有权" class="headerlink" title="所有权"></a>所有权</h1><p>类比其他编程语言中的”按值传参 v.s. 按引用传参”</p><p>所有权转让，对应将值传入函数，所有权会跟着进入函数内部，当函数执行完成，如果没有把所有权返回，值所在内存会被自动回收（drop），类似于”按值传参“。</p><p>将引用传入函数，所有权未被传入函数，当函数内对于变量访问结束后，虽然函数作用域结束了，但是变量的所有权因为未被转移而仍然存在，因此不会被自动回收，类似于”按引用传值“。</p><p>这种使用引用访问值的方式称为”借用”，就像生活中一个物品的所有者，将物品借给你用，当你使用完后会进行归还，从始至终物品的所有权都未曾属于你，你只是在”借用”。</p><blockquote><p>类比 Java</p></blockquote><h2 id="可变引用"><a href="#可变引用" class="headerlink" title="可变引用"></a>可变引用</h2><ol><li>将变量本身改为可变的</li><li>将函数的参数改为可变引用</li><li>传入函数时传入可变引用</li></ol><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rs"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br><br>    <span class="hljs-title function_ invoke__">change</span>(&amp;<span class="hljs-keyword">mut</span> s);<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">change</span>(some_string: &amp;<span class="hljs-keyword">mut</span> <span class="hljs-type">String</span>) &#123;<br>  some_string.<span class="hljs-title function_ invoke__">push_str</span>(<span class="hljs-string">&quot;, world&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="限制1：只能被借用一次"><a href="#限制1：只能被借用一次" class="headerlink" title="限制1：只能被借用一次"></a>限制1：只能被借用一次</h3><p>只能被借用一次（即不能被多个变量访问其可变引用）</p><p>这是为了避免”竞态（race condition）“</p><p>当以下三条满足时，会发生竞态</p><ol><li>两个或以上指针在同一时刻访问同一份数据</li><li>至少有一个指针在写数据</li><li>没有机制被用来支持同步写数据</li></ol><h3 id="限制2：当被用来作为不可变借用后不能再进行可变借用"><a href="#限制2：当被用来作为不可变借用后不能再进行可变借用" class="headerlink" title="限制2：当被用来作为不可变借用后不能再进行可变借用"></a>限制2：当被用来作为不可变借用后不能再进行可变借用</h3><p>一旦变量被作为不可变借用后，不能再作为可变借用，因为可变借用会导致前面的不可变借用被篡改。</p><p>但是多个不可变借用是可以的，因为它们都是在读数据，不会改变数据。</p><h2 id="摇摆指针"><a href="#摇摆指针" class="headerlink" title="摇摆指针"></a>摇摆指针</h2><p>将某个作用域内对于内存的引用传递给作用域以外，类似于js的闭包</p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rs"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>  <span class="hljs-keyword">let</span> <span class="hljs-variable">reference_nothing</span> = <span class="hljs-title function_ invoke__">dangle</span>();<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">dangle</span>() <span class="hljs-punctuation">-&gt;</span> &amp;<span class="hljs-type">String</span> &#123;<br>  <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br><br>  &amp;s<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>类比 JavaScript 中的闭包，将函数内的变量引用暴露给函数外的作用域</p></blockquote><p>这里在<code>dangle</code>函数内部声明了字符串引用<code>s</code>，并试图将这个引用通过函数返回。但<code>rust</code>不会允许这么做，当函数执行结束，其作用域内的引用会被回收。</p><p>如果想要访问函数内生成的变量，可以使用非引用的值</p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rs"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>  <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-title function_ invoke__">dangle</span>();<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">dangle</span>() <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>  <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br><br>  s<br>&#125;<br></code></pre></td></tr></table></figure><p>这里<code>s</code>的所有权转移到了函数外，没有引用被回收。</p><h1 id="字符串切片"><a href="#字符串切片" class="headerlink" title="字符串切片"></a>字符串切片</h1><p>可以通过<code>..</code>符对字符串进行切片</p><blockquote><p>类比 Python 中的切片和 JavaScript 中的 slice 方法</p></blockquote><h2 id="字符串字面量切片"><a href="#字符串字面量切片" class="headerlink" title="字符串字面量切片"></a>字符串字面量切片</h2><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rs"><span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-string">&quot;Hello, world!&quot;</span>;<br></code></pre></td></tr></table></figure><p>这里<code>s</code>的类型是<code>&amp;str</code>，它其实是指向二进制指定位置的切片。这也是为什么字符串字面量是不可变的，并且<code>&amp;str</code>是不可变引用。</p><p>这里的<code>&amp;str</code>存储着切片开始的位置，以及切片的长度，从而可以计算出切片部分的值。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>Rust拥有所有权、借用和切片概念，在编译时保障了内存使用的安全。</p><p>Rust提供了类似于其他编程语言对于管理内存使用的的方式，但数据的拥有者会在其离开作用域时自动清空数据。</p>]]></content>
    
    
    
    <tags>
      
      <tag>rust</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Figma Config 2023 观后感下篇——开发模式</title>
    <link href="/wilson-blog-hexo/2023/07/03/figma-config-2023-02/"/>
    <url>/wilson-blog-hexo/2023/07/03/figma-config-2023-02/</url>
    
    <content type="html"><![CDATA[<p>关于Figma Config 2023 后半部分“开发模式”演讲的总结</p><span id="more"></span><p><img src="/wilson-blog-hexo/img/post/figma-config-2023-02/bless.jpg" alt="Dylan Field"></p><h2 id="Ready-for-dev"><a href="#Ready-for-dev" class="headerlink" title="Ready for dev"></a>Ready for dev</h2><p>解决痛点：开发找错设计稿</p><p>以往是如何解决的？在页面名称上标清哪些是草稿，哪些是定稿的，这里的”定稿“也就是所谓的”ready for dev，准备好用于开发“。</p><p>开发模式下页面默认仅展示准备就绪的设计稿，其他未就绪的页面默认收起，这里突现了”保持简洁，仅展示必要的信息“的原则，也是一款优秀软件应该遵守的设计原则</p><h2 id="变更对比"><a href="#变更对比" class="headerlink" title="变更对比"></a>变更对比</h2><h3 id="功能价值"><a href="#功能价值" class="headerlink" title="功能价值"></a>功能价值</h3><p>作为开发，最先想到的就是<code>code diff</code>。因为在实际生产中，每个变更都应该是小心翼翼的，因此当你变更一段代码时，理应通过<code>diff</code>工具对改动前后的代码进行逐行确认，确保你的这次变更足够合理。</p><h3 id="相似功能"><a href="#相似功能" class="headerlink" title="相似功能"></a>相似功能</h3><p>其实<code>变更对比</code>这件事如今已经被应用到很多场景了，比如 jira 文档更新的版本对比、云文档的变更记录等，能够使用对比工具直观看出一次改动所带来的<code>具体差异</code>，对于<code>操作者</code>来说是能够使其更加坚定进行保存的信心来源。</p><h3 id="功能分析"><a href="#功能分析" class="headerlink" title="功能分析"></a>功能分析</h3><p>figma 这次做的是对一个文件进行两个版本的左右对比，形式有点像”找不同“游戏。但对于图片的差异比较，基本也只能做到这个程度。然而真的仅此而已吗？当然不，figma 总能给人惊喜。它还提供将两个版本进行重叠的方式进行差异对比，因为图片是二维内容，左右对比对于一维的文本内容来说可能足够，但对于图片的差异对比如果要依赖人的肉眼去”找不同“，还是有点费力的。</p><p>此次对于版本对比体验的提升，像极了 <a href="/wilson-blog-hexo/2023/07/02/figma-config-2023/">上篇</a> 中提到的<em>原型同屏预览</em>，同样是对既有功能的体验提升。就版本对比来说，相比原本的历史版本切换，实在进步了不少，因为比起完整查看新的版本或历史版本，人眼对于细微差异往往是难以察觉的，因此原本的历史版本功能显得并不实用。</p><p>此外，figma 更进一步，既然两个版本的差异已经能够呈现在页面上，那么应用本身一定是具有两个版本之间差异的完整信息，那么何不直接把这些信息暴露给用户呢，这个场景的用户即是开发者，开发者最希望看到更多的细节。</p><p>差异信息体现在图层属性的新增、修改和删除，这些变化仿佛就在扮演着以往协作场景中设计师角色，以往设计师可能需要亲自口头告知或通过额外维护一个文档来传达TA最新发生的修改具体是什么。</p><h3 id="功能延伸"><a href="#功能延伸" class="headerlink" title="功能延伸"></a>功能延伸</h3><p>“寻找差异”这种方式无论放在哪个领域，往往都是更高效的对比方式。</p><p>这里举一些运用”差异“思维的应用实例，比如云计算的基础是在云端存储大量数据，而对于同一份数据，可能每时每刻都在发生变化，如果想全量存储这些数据在不同时间的状态几乎是不可想象的成本。因此早在云计算诞生之初，人们就想出”差量“备份的思路，对于数据不同时间的存储，仅存储其和相邻前一个版本之间的差异，然后在调取历史版本时，通过当前版本以及此前发生过的所有变更来计算出原始的状态。这样虽然牺牲了一点历史版本查看的性能，但却节省了大量的存储空间去存放那些相同的数据。</p><p>那么既然谈到云存储，自然可以想到 MacOS 的<em>时间机器</em>功能，它可以为你保存电脑数据在某一时刻的”快照“，当你想让电脑恢复至某一个历史时刻，你就可以像搭乘”时间机器“一样回到过去的某个时刻。这个功能显然也会利用”差量备份“的方式进行历史版本存储，否则你的时间机器对于电脑的磁盘占用将会是<em>版本数</em>乘以<em>某一个时刻的存储占用</em>那么多。</p><p>还有最经典的 Git 工具，它是用于管理代码历史版本的工具，记录着开发者每一次提交记录的差异，从而可以回看所有的历史提交。这样仅仅通过记录每次的改动差异就能形成一个代码仓库的完整历史，不得不说”差异对比“思想绝对算得上是存储算法中的核心基石。</p><p>那么回到 figma 这款设计工具，其实从这次上线的版本对比功能来看，figma 大概率之前也是对文件历史版本进行”差异“保存的，只是直到现在才把这个原本用于开发实践的思想搬到用户眼前。</p><h2 id="图层检查增强"><a href="#图层检查增强" class="headerlink" title="图层检查增强"></a>图层检查增强</h2><p>这个改动对于开发者来说确实更加深入人心，因为前端工程师往往对于一个在浏览器中访问的 web 应用进行调试时，通过工具看到的也会是所有图层在同一层（当然也有例外，比如绝对布局会在垂直轴上产生新的的”层“）。但大多时候，我们调试网页时看到的是如下的效果</p><p><img src="/wilson-blog-hexo/img/post/figma-config-2023-02/inspect.jpg" alt="inspect"></p><p>虽然在实际的 HTML 中，元素是一层一层的，但当元素被渲染成页面时，内容仍然是一块一块的。因此当我们调试每块内容的<code>样式属性</code>时，我们并不希望发现它们竟然有层的关系，甚至我们还需要通过<em>双击</em>某一层来进到”下一层“，因为单击某个图层在设计模式下将会是”选中图层“的效果。</p><h2 id="图标导出"><a href="#图标导出" class="headerlink" title="图标导出"></a>图标导出</h2><p>这也是之前设计模式下”反效率“的一个点，在线设计工具原始图稿信息丰富虽好，但对于图标导出可能并不友好。如果开发者选中了错误的图标容器，导出的可能会是缺失图层的图标或是包含多余边距的图层。</p><p>这些以往对于开发人员造成困扰的多余信息将在开发模式下消失，从此对于图标图层，在开始模式下仅会有一个可选中对象，那就是图标本身。这样的一个细小变化，对于图标、切图这类标准化的交付场景将会是一个 <a href="https://en.wikipedia.org/wiki/Standard_operating_procedure">SOP</a> 级别的提升。</p><h2 id="元素单位选择"><a href="#元素单位选择" class="headerlink" title="元素单位选择"></a>元素单位选择</h2><p>这让我想起了微信小程序开发工具，因为小程序应用不同于 web 应用，web 的运行环境是浏览器，而小程序应用的运行环境是 APP。因此 web 应用内使用的单位是交给浏览器理解的，因此常见的单位是 px、百分比、rem&#x2F;em 和 vw&#x2F;vh。但小程序运行时实际在使用手机操作系统的渲染器进行元素绘制，但移动端设备的种类太多，因此小程序需要自定义一套元素单位。</p><p>这里 figma 支持了元素大小单位的选择，是拓展了其设计支持能力的边界，因为设计交付的场景既可能是网页，也可能是手机 APP 甚至小程序，能够适应不同应用类别下的单位选择。</p><h2 id="组件-playground"><a href="#组件-playground" class="headerlink" title="组件 playground"></a>组件 playground</h2><p>这像是把 <a href="https://storybook.js.org/">storybook</a> 的一部分功能搬进了 figma 的弹窗，从此团队对于组件库的维护不再限于设计师单方面创造和维护。开发人员在开始模式下可以共享设计师对于组件信息的管理，这一能力有望打破原本对于组件库这一资产在设计师和前端开发之间的重复劳动。</p><p>因为 playground 对于组件实现了不同 token 下的视觉预览，而不再是枯燥无味的组件名。这种对于组件的维护方式可以直接提高前端开发人员在 figma 页面的停留时长，因为从此对于团队资产不再需要另外打开一个网站或者文档去看它的具体参数和信息了。</p><h2 id="开发资源"><a href="#开发资源" class="headerlink" title="开发资源"></a>开发资源</h2><p>这是一个小功能，但也让团队资产管理更加完整，因为在今天，互联网团队对于资产的管理本就是一半在本地一半在云上。在云上的部分可能是各个 web 服务下的组合，比如设计稿存储在 figma 账号中，而组件库代码则是维护在 gitlab 或 github 上。</p><h2 id="代码片段增强"><a href="#代码片段增强" class="headerlink" title="代码片段增强"></a>代码片段增强</h2><p>从前的代码展示在标注模式下，而如今因为有了开发模式，因此代码标注信息将以更加接近开发者的使用方式呈现。比如按照前端开发中的 <a href="https://en.bem.info/methodology/quick-start/#introduction">BEM</a> 原则，布局、样式和修饰符在 CSS 中应该进行清晰的区分，这样才更有利于构建复杂的UI，而 figma 显然是懂这一点的。</p><p>对于这些细节的改动，每一个单点看起来可能都不起眼，但汇聚在一起，就是对于使用体验的整体升级，让使用者真正感受到工具的“趁手”。</p><h2 id="开发模式插件"><a href="#开发模式插件" class="headerlink" title="开发模式插件"></a>开发模式插件</h2><p><a href="https://github.com/topics/design-to-code">D2C</a>是 web 应用发展衍生出的交付形态——design to code，设计图转代码。这在此前被认为是一种理想的交付形态，因为这节省了开发人员还原设计稿的时间，从而可以快速将设计稿直接转换为可部署的网页形态。但随着近几年 web 技术发展的成熟，一些实践使得这项技术成为可能（比如微软之前提出的<a href="https://www.microsoft.com/en-us/ai/ai-lab-sketch2code">sketch2code</a>，草图生成代码）。</p><p>而 figma 将插件功能集成到开发模式下的代码标注区域，是一次将设计稿转代码片段的尝试。因为代码不同于样式信息，使用代码描述组件，可以使得其具有更好的拓展性和复用性。因此如果能够根据设计稿信息给出组件的代码片段，那么后续开发模式就可能发展成 <a href="https://en.wikipedia.org/wiki/Low-code_development_platform">Low Code</a> 工具。</p><p>看似又一个平淡无奇的尝试，实则孕育着更多的可能性和产品形态延展。</p><blockquote><p>补充阅读：Anima是什么？<a href="https://www.animaapp.com/">https://www.animaapp.com/</a></p></blockquote><h2 id="VS-Code-插件"><a href="#VS-Code-插件" class="headerlink" title="VS Code 插件"></a>VS Code 插件</h2><p>如果你是一名开发者，你才会明白，开发者在工作时并不想离开 IDE 环境。一切能在 IDE 完成的事情，不应切换窗口去到其他地方。因为在开发环节，程序员需要保持聚焦，否则思路可能会被打断。因此，IDE 市场才会有众多插件满足开发者在 IDE 内满足大多事情。</p><blockquote><p>详见 VS Code 插件市场：<a href="https://marketplace.visualstudio.com/vscode">https://marketplace.visualstudio.com/vscode</a></p></blockquote><p>Figma 做了相应的 VS Code 插件，可见它是尊重开发者使用习惯的，如果能在 IDE 内访问 Figma 文件，何乐而不为呢？更何况 IDE 不仅是开发工具，也可以是基本的文件编辑器，当使用 VS Code 管理自己的 Figma 文件时，仿佛就像是在本地文件夹管理你的设计文件，并且它还是支持查看设计文件中的标注信息，这是基于 VS Code 支持直接在其内部打开 web 应用的能力，就像使用浏览器一样。</p><p><img src="/wilson-blog-hexo/img/post/figma-config-2023-02/figma-for-vscode-plugin.jpg" alt="figma for vscode plugin"></p><p>另外，<a href="https://marketplace.visualstudio.com/items?itemName=figma.figma-vscode-extension">Figma for VS Code</a> 还支持在代码编辑时提示当前文件页选中的图层样式，从而实现一键代码填充。这样的开发体验非常接近现有的编程辅助工具，比如 <a href="https://www.tabnine.com/">tabnine</a> 和 <a href="https://github.com/features/copilot">copilot</a>，但这类工具大多依赖 AI 进行代码提示，也就是它们提供的虽然是可用代码，但并不是符合团队共用的“标准代码”。而 Figma 的样式提示能力则大概率是通过 <a href="https://www.typescriptlang.org/">Typescript</a> 的类型推导能力实现的组件样式映射，也就是对于同样的样式属性，所有人提示的代码均是与设计稿严格保持一致的标准代码。</p><p><img src="/wilson-blog-hexo/img/post/figma-config-2023-02/style-infer.jpg" alt="style inference"></p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>开发模式的诞生，意味着 figma 将“一人分饰两角”，在同一款软件内实现两种生产角色的同等使用体验。而做到这一点的推动力是因为 figma 的用户画像——设计师与开发者用户量1:1，这样来看，figma 推出开发模式既艰难又合理，但对于同类软件却是一个值得慎重考虑的事情，因为并不是所有软件都具备同样的痛点。</p><p><img src="/wilson-blog-hexo/img/post/figma-config-2023-02/recap.jpg" alt="recap"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Figma Config 2023 观后感上篇——变量、原型</title>
    <link href="/wilson-blog-hexo/2023/07/02/figma-config-2023/"/>
    <url>/wilson-blog-hexo/2023/07/02/figma-config-2023/</url>
    
    <content type="html"><![CDATA[<p>关于Figma Config 2023 的一些总结和所思所想</p><span id="more"></span><blockquote><p>视频源：<a href="https://config.figma.com/">https://config.figma.com/</a></p></blockquote><p><img src="/wilson-blog-hexo/img/post/figma-config-2023-01/desk.png" alt="desktop"></p><h1 id="开场动画信息点"><a href="#开场动画信息点" class="headerlink" title="开场动画信息点"></a>开场动画信息点</h1><ul><li>颜色token</li><li>有序列表</li><li>AI文本校对</li><li>黏性吸顶布局（CSS sticky position）</li><li>多样式文本（粗体、斜体同行显示）</li><li>区域选择（区别于容器和图层，新增了section概念）</li></ul><h1 id="用户回馈"><a href="#用户回馈" class="headerlink" title="用户回馈"></a>用户回馈</h1><ul><li>社区感谢</li><li>教育推广</li><li>chrome book合作</li><li>adobe收购事件</li><li>拥抱AI</li></ul><h1 id="服务场景"><a href="#服务场景" class="headerlink" title="服务场景"></a>服务场景</h1><p>Stages</p><ul><li>Brainstorm（创意头脑风暴）</li><li>Design（设计环节）</li><li>Build（生产构建环节）</li></ul><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>Variables rather than Design Tokens</p><p>变量支持四种类型</p><ul><li>数字</li><li>字符串</li><li>颜色</li><li>布尔</li></ul><h2 id="作用范围"><a href="#作用范围" class="headerlink" title="作用范围"></a>作用范围</h2><p>变量设置中可以定义变量的作用范围（针对哪些属性，比如圆角、宽高、间距、文本）</p><p>变量设置框里有一个“即将上线”的功能——代码高亮</p><p><img src="/wilson-blog-hexo/img/post/figma-config-2023-01/figma1.jpg" alt="code highlight"></p><p>以上提供的能力已经可被用于建立设计系统，那么接下来我们看看变量可以有哪些应用</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><h3 id="场景1：颜色模式"><a href="#场景1：颜色模式" class="headerlink" title="场景1：颜色模式"></a>场景1：颜色模式</h3><p>和变量同级别的设置项还有”颜色模式“，有点像颜色选集，但更像 web 应用中换肤功能所对应底层定义，也就是每套皮肤（主题）所使用的颜色定义组合</p><p>但这不止像演示中所呈现的亮暗色模式下的颜色定义，很明显它支持定义更多套的主题色配置，每套配置都在使用相同的颜色变量，但每个变量在每套主题下使用的颜色是不同的，这有点像design tokens，但确实更接近于主题色的定义，因此这个配置项区别于变量，单独成为一个配置框完全合理</p><p>一旦定义好不同颜色主题的配置，在容器级别的图层选择 Color modes，即可轻松实现快捷的”一键换肤“效果。</p><p><img src="/wilson-blog-hexo/img/post/figma-config-2023-01/color-modes.jpg" alt="Color modes"></p><p>相比传统设计场景需要针对不同颜色主题需要提供多套设计，这一改变将使得<em>设计师</em>和<em>前端工程师</em>的使用效率都大大提高，想必当前端还原设计稿时也希望直接在同一个容器看到它在不同颜色模式下所对应的标注信息。</p><p>而这一切都是因为变量作为基础，所以产生了更简洁的呈现方式。正如编程语言中，借助变量在不同的场景下具有不同的值，从而使得程序在运行时拥有更多的变化</p><h3 id="场景2：布局密度"><a href="#场景2：布局密度" class="headerlink" title="场景2：布局密度"></a>场景2：布局密度</h3><p>对于列表类的布局，通过对变量定义不同模式下的值，可以直接应用在图层的排布密度属性上。当你定义了多套模式后，在设计稿中可以通过切换不同的模式查看同一个布局在不同密度下的视觉效果，这是不是解决了设计师常常反复调整元素间距以对比哪个效果更好的痛点呢</p><h3 id="场景3：国际化（多语种）"><a href="#场景3：国际化（多语种）" class="headerlink" title="场景3：国际化（多语种）"></a>场景3：国际化（多语种）</h3><p>如果你要做一款国际化的产品，需要考虑设计稿在不同语种下的视觉体验是否一致。同样是借助变量，你可以直接定义多套语言模式，同一个词汇在不同语言模式下使用其对应语言的字符，然后同样在图层的”本地化“属性下进行”一键切换“。</p><p>这里从开发视角补充一点，其实国际化功能在实现环节也是通过类似变量的方式定义同一个词汇在不同语言下的字符定义，因此将变量能力带到设计环节，其实是对设计到实现的整个协作流程效率的提升，因为在设计环节的很多”动态定义“从此可以与开发人员共享了。</p><p>简单来说，就是从前对于多语种的展示，可能只有开发人员在维护，设计人员可能需要到开发的实现环节才能体验不同语种下的展示效果，或者设计师需要创建多套设计稿来展示同样的内容使用不同语言的呈现效果。但因为有了变量，设计师和开发人员完全可以共享同一套”多语言配置“，这难道不是协作效率的飞跃吗</p><h2 id="变量组合应用"><a href="#变量组合应用" class="headerlink" title="变量组合应用"></a>变量组合应用</h2><p>如你所见，变量的魅力不止于此，一旦拥有变量，你可以更近一步，对他们进行组合使用。因为有了上面的颜色模式、密度模式和语言模式，从此你可以看到的不止是各个属性下不同模式的效果，而是各个模式的随意组合</p><h2 id="样式能力增强"><a href="#样式能力增强" class="headerlink" title="样式能力增强"></a>样式能力增强</h2><h3 id="最小宽度-最大宽度-最小高度-最大高度"><a href="#最小宽度-最大宽度-最小高度-最大高度" class="headerlink" title="最小宽度&#x2F;最大宽度&#x2F;最小高度&#x2F;最大高度"></a>最小宽度&#x2F;最大宽度&#x2F;最小高度&#x2F;最大高度</h3><p>这是前端CSS中一个很基本的属性，但到今天才被添加到设计工具内，算是补充了设计到开发环节的一个鸿沟。因为这里原本的痛点在于，设计稿往往对响应式设计依赖于做多套设计，而前端对于响应式的实现往往是通过最小&#x2F;大宽度和最小&#x2F;大高度属性在不同宽度&#x2F;高度范围内定义不同的布局属性和元素宽高值，可见这个环节从前在设计环节和开发环节的实现方式是不一致的。</p><p>自动布局功能对于设计与实现环节保持一致曾迈出了重要的一步，而最小&#x2F;最大宽度和最小&#x2F;最大高度功能则是补齐了响应式实现在设计到前端的另一块拼图</p><h3 id="换行属性"><a href="#换行属性" class="headerlink" title="换行属性"></a>换行属性</h3><p>这是网页技术中实现多列布局响应式的关键属性，因为它决定了元素在限定的布局内当超出一行后应如何展示，也许你说使用网格布局可以做到同样的事情，但如果你想使用自动布局（对应前端的弹性布局），那换行属性必不可少</p><h1 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h1><p>使用原型作为产品初始功能演示是很重要的，因为在它还没有被完整实现以前，可以快速地进行意见收集和改进。但对于一个功能复杂的应用，使用原型模拟出所有操作路径会很复杂，使用设计工具以往所提供的能力，原型中的步骤线可能会非常，因为你需要创建同一个页面在不同操作后的不同结果，因此最终原型内的关系会变得非常难以维护。</p><h2 id="原型-变量"><a href="#原型-变量" class="headerlink" title="原型+变量"></a>原型+变量</h2><p>如果依托变量能力，原型可以变得怎样呢？</p><p>你可以为原型中使用到的状态定义变量，比如对于电商应用，你可以定义不同商品的名称、数量、价格等等。当定义完这些以后，你就像拥有了一个小型的数据库（数据库这个概念熟悉吗？Notion的表格正是利用数据库方式存储表格数据，从而做到将同一个数据源以不同视图模式进行展示的效果）</p><h2 id="动作使用变量"><a href="#动作使用变量" class="headerlink" title="动作使用变量"></a>动作使用变量</h2><p>交互属性内的动作使用变量</p><p>比如当你点击某个元素时，你可以对变量的值进行更新，更新的值可以是在变量当前值的基础上增加计算逻辑，从而得到新的状态值。比如当你在购物车对某个商品点击加号时，理想的变化应该仅仅是商品展示的数量从1变成2即可，而使用以往的原型演示，这一效果可能需要拷贝一份容器，然后在新的版本内将数量改为2。</p><p>怎么样？感受到变量的力量了吗，因为有了变量，这个场景下的原型交互可以直接省去一个重复的容器去展示不同的状态，而仅仅是通过变量的变化来表达状态的变化</p><h2 id="原型预览"><a href="#原型预览" class="headerlink" title="原型预览"></a>原型预览</h2><p>这是另一个工作流上的效率提升点，以往的原型预览是在一个新的标签页展示的，如今你可以直接在原型设计页面弹出一个和容器一样大的弹窗，直接看到一个像样机一样的页面呈现在你眼前，然后在此基础上进行调整。</p><p>这一交互其实源自苹果应用的开发，熟悉苹果App开发的人应该知道，苹果官方提供了专用的工具用于开发苹果系列的产品，叫做Xcode。当你在Xcode内运行代码后，就会在弹出一个独立窗体用于展示你的App，然后你可以在不需要切换标签页的情况下直接预览到你应用此刻的效果，从而在此基础上进行调整。</p><p><img src="/wilson-blog-hexo/img/post/figma-config-2023-01/xcode.jpg" alt="xcode"></p><p>将这种交互应用在原型功能上，可以说是将原型使用者的体验与开发者更加接近了</p><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><p>这也是源自编程语言的理念，因为有了条件语句，你可以对逻辑增加条件判断，从而使逻辑走向不同条件下的分支。但看似简单的能力，却可以产生丰富的结果。</p><p>用在原型场景，就是你原本对于不同元素的点击，下一步要展示的页面可能需要拷贝多份并做对应的修改才能达成。而使用条件语句，你可以对交互增加条件逻辑声明，当你点击商品列表中的苹果时，在跳转商品详情页时应该展示的是苹果的详情，包括苹果的价格和数量。</p><p>当你在购物车将所有商品的数量减少为0时，页面应该展示空态，而这些判断都是通过条件判断所定义的</p><p>未完待续，详见 <a href="/wilson-blog-hexo/2023/07/03/figma-config-2023-02/">下篇——开发模式</a> </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vite体验</title>
    <link href="/wilson-blog-hexo/2023/06/29/vite-trying/"/>
    <url>/wilson-blog-hexo/2023/06/29/vite-trying/</url>
    
    <content type="html"><![CDATA[<p>学习 Pinia 源码时尝试运行<a href="https://pinia.vuejs.org/core-concepts/">Pinia 官网</a>提供的样例，基于 <a href="https://vitejs.dev/guide/">Vite</a>初始化了项目，在初始化 Pinia Store 中遇到的一些问题记录</p><span id="more"></span><h1 id="import-alias-“-”-的问题"><a href="#import-alias-“-”-的问题" class="headerlink" title="import alias “@” 的问题"></a>import alias “@” 的问题</h1><p>由于 Vite 被设计为框架无关的的开发工具，因此原本属于 <a href="https://cli.vuejs.org/guide/installation.html">Vue CLI</a> 的一些预置配置在 Vite 初始化的 Vue 项目中是没有的，比如引用模块时使用的“@”</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; useCounterStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/stores/counter&quot;</span>;<br></code></pre></td></tr></table></figure><p>这样的用法在一个基于 Vue CLI维护的项目中是很常见的，其中“@”表示项目的“src”目录，但这其实是 Vue CLI 服务内部基于 webpack 的 <a href="https://webpack.js.org/configuration/resolve/#resolvealias">别名解析</a> 为我们实现的能力</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// @vue/cli-service/lib/config/base.js</span><br><br>webpackConfig.<span class="hljs-property">resolve</span><br>  .<span class="hljs-property">alias</span>.<span class="hljs-title function_">set</span>(<span class="hljs-string">&quot;@&quot;</span>, api.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&quot;src&quot;</span>));<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vuex对比pinia</title>
    <link href="/wilson-blog-hexo/2023/06/28/vuex-pinia/"/>
    <url>/wilson-blog-hexo/2023/06/28/vuex-pinia/</url>
    
    <content type="html"><![CDATA[<p>vuex@3对比pinia@v2</p><span id="more"></span><h1 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h1><table><thead><tr><th>包名</th><th>版本号</th></tr></thead><tbody><tr><td>vuex</td><td>3.6.2</td></tr><tr><td>pinia</td><td>2.1.3</td></tr></tbody></table><h1 id="API解惑"><a href="#API解惑" class="headerlink" title="API解惑"></a>API解惑</h1><p>为什么mutations内的对象第一个参数是当前模块的state，第二个是payload，并且mutation内部的this可以访问到store实例</p><p>因为对于mutations的注册实现如下，mutations是一个数组，每个元素是一个函数，也就是mutation，当mutation被触发时，执行的即是<code>handler.call(store, local.state, payload);</code>，这里call的第一个参数是执行handler的上下文，也就是其内部访问的this，后面的参数会是handler执行时的入参，local.state对应一个mutation方法的第一个参数，payload是第二个参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">registerMutation</span> (store, type, handler, local) &#123;<br>  <span class="hljs-keyword">var</span> entry = store.<span class="hljs-property">_mutations</span>[type] || (store.<span class="hljs-property">_mutations</span>[type] = []);<br>  entry.<span class="hljs-title function_">push</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">wrappedMutationHandler</span> (payload) &#123;<br>    handler.<span class="hljs-title function_">call</span>(store, local.<span class="hljs-property">state</span>, payload);<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>为什么actions内的对象第一个参数可以解构出dispatch方法用于调用其他actions，可以解构出commit用于调用mutation，可以解构出getters和state用于访问当前模块的状态，可以解构出rootGetters和rootState用于访问store根模块下的getters和state</p><p>为什么action一定返回Promise</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">registerAction</span> (store, type, handler, local) &#123;<br>  <span class="hljs-keyword">var</span> entry = store.<span class="hljs-property">_actions</span>[type] || (store.<span class="hljs-property">_actions</span>[type] = []);<br>  entry.<span class="hljs-title function_">push</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">wrappedActionHandler</span> (payload) &#123;<br>    <span class="hljs-keyword">var</span> res = handler.<span class="hljs-title function_">call</span>(store, &#123;<br>      <span class="hljs-attr">dispatch</span>: local.<span class="hljs-property">dispatch</span>,<br>      <span class="hljs-attr">commit</span>: local.<span class="hljs-property">commit</span>,<br>      <span class="hljs-attr">getters</span>: local.<span class="hljs-property">getters</span>,<br>      <span class="hljs-attr">state</span>: local.<span class="hljs-property">state</span>,<br>      <span class="hljs-attr">rootGetters</span>: store.<span class="hljs-property">getters</span>,<br>      <span class="hljs-attr">rootState</span>: store.<span class="hljs-property">state</span><br>    &#125;, payload);<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">isPromise</span>(res)) &#123;<br>      res = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(res);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (store.<span class="hljs-property">_devtoolHook</span>) &#123;<br>      <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) &#123;<br>        store.<span class="hljs-property">_devtoolHook</span>.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;vuex:error&#x27;</span>, err);<br>        <span class="hljs-keyword">throw</span> err<br>      &#125;)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> res<br>    &#125;<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>如上，actions一个是数组，而且每个元素是一个方法，方法执行时的上下文是store实例，第一个参数是一个对象，里面包括dispatch、commit、getters、state、rootGetters和rootState，可按照需要解构出其中的内容进行调用。如果需要调用其他action，则使用dispatch，如果调用mutation，则使用commit，如果需要访问当前模块的状态则使用getters或state，如果需要访问根模块的状态则使用rootGetters或rootState</p><p>最终action的执行结果如果不是Promise，也会经过Promise.resolve来生成一个Promise用作返回，保持返回值是Promise的一致性</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>关于WebAssembly</title>
    <link href="/wilson-blog-hexo/2023/06/21/about-wasm/"/>
    <url>/wilson-blog-hexo/2023/06/21/about-wasm/</url>
    
    <content type="html"><![CDATA[<p>WebAssembly 是将编译型语言</p><blockquote><p>以下均以 wasm 表示 WebAssembly</p></blockquote><h2 id="wasm是什么？"><a href="#wasm是什么？" class="headerlink" title="wasm是什么？"></a>wasm是什么？</h2><p>wasm是一种新的二进制形式机器码，专门被设计用于浏览器。</p><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><p>已有的应用程序当被编译为 wasm 格式后，在浏览器中运行起来可以和原生应用程序一样快</p><h2 id="在wasm出现以前"><a href="#在wasm出现以前" class="headerlink" title="在wasm出现以前"></a>在wasm出现以前</h2><p>在浏览器不支持wasm时，一个C++应用程序如果想运行在浏览器，需要使用asm.js</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://blog.mozilla.org/en/mozilla/lots-new-in-firefox-game-changing-webassembly-support/">https://blog.mozilla.org/en/mozilla/lots-new-in-firefox-game-changing-webassembly-support/</a></li><li><a href="https://www.figma.com/blog/webassembly-cut-figmas-load-time-by-3x/">https://www.figma.com/blog/webassembly-cut-figmas-load-time-by-3x/</a></li><li><a href="https://developer.mozilla.org/en-US/docs/WebAssembly/JavaScript_interface">https://developer.mozilla.org/en-US/docs/WebAssembly/JavaScript_interface</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>wasm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用STAR原则描述自己的项目经验(英文版)</title>
    <link href="/wilson-blog-hexo/2022/09/21/2022-en-projects-STAR/"/>
    <url>/wilson-blog-hexo/2022/09/21/2022-en-projects-STAR/</url>
    
    <content type="html"><![CDATA[<h1 id="Descriptions-for-projects-Use-STAR-principle"><a href="#Descriptions-for-projects-Use-STAR-principle" class="headerlink" title="Descriptions for projects(Use STAR principle)"></a>Descriptions for projects(Use STAR principle)</h1><h2 id="template"><a href="#template" class="headerlink" title="template"></a>template</h2><p>S: Situation<br>T: Task<br>A: Action<br>R: Result</p><h2 id="template-details"><a href="#template-details" class="headerlink" title="template details"></a>template details</h2><ul><li>S<ul><li>describe a specific situation and establish context</li><li>don’t generalize or offer a litany of your accomplishments</li><li>speak directly to the question as posed</li><li>be detailed enough</li></ul></li><li>T<ul><li>go to the specific task you had to do</li><li>be clear what the task was</li><li>related to the question and whatever ability the interviewer is looking to evaluate</li><li>clarity and relevancy</li></ul></li><li>A<ul><li>stay on topic</li><li>focus on what you did in the situation to resolve the task and keep that focus on you</li><li>first person singular, not we or out team</li><li>only talk about what you did</li></ul></li><li>R<ul><li>explain the outcome of the task due to your actions</li><li>take credit for what you did</li><li>it’s not the time for modesty</li><li>explain what happened, how did the situation or task resolve itself, what did you accomplish, did you learn anything</li><li>keep it positive even if the situation or task didn’t end that way</li></ul></li></ul><h2 id="real-projects"><a href="#real-projects" class="headerlink" title="real projects"></a>real projects</h2><h3 id="the-operating-activity-for-drivers-during-the-Spring-Festival"><a href="#the-operating-activity-for-drivers-during-the-Spring-Festival" class="headerlink" title="the operating activity for drivers during the Spring Festival"></a>the operating activity for drivers during the Spring Festival</h3><ul><li>S<ul><li>the project’s deadline is tight for the whole tech team</li><li>we have two front-end developers, a backend developer, three UI designers and a project manager</li><li>we totally have a week to develop a brand new html5 single page application which can run on both native app and weixin miniapplication platform, and it has a lot of UI animations and sharing logic</li></ul></li><li>T<ul><li>I am this project’s frontend development owner and had to ensure this project will be deployed online and runs great in the end</li><li>I need to keep us on our production schedule and develop my part of work</li></ul></li><li>A<ul><li>I dive into develop the basic logic without UI first</li><li>I call another experienced developer to help us build a jssdk for this project which includes login, tracking, ajax modules</li></ul></li><li>R<ul><li>I finished my work as expected and did some refactoring to make my codes more strong</li><li>I read the code that experenced developer wrote and learnt more about how to use webpack or vue-cli-plugin to supply different packages by different environments</li><li>I got to know how developers to face projects with limit time and how to ensure the project to be done in time, such as meetings to synchronize progress between others and talk about diffculties in time, and try to call others to help</li></ul></li></ul><h2 id="liveshow-on-wechat-miniprogram-platform"><a href="#liveshow-on-wechat-miniprogram-platform" class="headerlink" title="liveshow on wechat miniprogram platform"></a>liveshow on wechat miniprogram platform</h2><ul><li>S<ul><li>the marketing team announced to build an app to attractive more drivers to know our another feature which can gain more income(which called benefit center) using liveshow format</li></ul></li><li>T<ul><li>I need to know how to use liveshow ability in wechat miniprogram platform and know its conditions</li><li>I need to develop a tiny function which use wechat pay to make our miniprogram can apply liveshow right</li><li>I need to build a standalone h5 to deployed in our main native app and support to jump into out wechat miniprogram directly</li><li>Finally, I had to develop the goods detail of buying webpages to support the ability which liveshow need</li></ul></li><li>A<ul><li>First, I got to read the documentation of wechat development about paying, liveshow, jump from native app</li><li>Then I started to develop a simple function which used wechat pay sdk and deployed it online for liveshow applying</li><li>Then I started to set up a single h5 to develop the function jump from our native app to the specific wechat miniprogram, for this function need our native app to integrate the wechat sdk for jumping, I carefully researched the action flow and read the demo from wechat official, then I talked to our native developing team to help me</li><li>Finally, I develop the core function of buying things from liveshow and coroperate with our backend developer</li></ul></li><li>R<ul><li>Finally, I finished a h5 which supplied to jump to miniprogram, a function in miniprogram which supports to watch liveshow and buy things. For this project, we received a lot of driver users’ appreciation and gained more notabilities. I got more familar with wechat platform ablities and apis such as jump from native, set up a liveshow, and buy things use wechat pay. I had gained more experience of developing a big operating activity project personal and find the right way of achieving it, such as by reading the right official document and find the right other team to support you.</li></ul></li></ul><h2 id="upgrade-the-function-of-drivers’-interviews"><a href="#upgrade-the-function-of-drivers’-interviews" class="headerlink" title="upgrade the function of drivers’ interviews"></a>upgrade the function of drivers’ interviews</h2><ul><li>S<ul><li>we have a lot of new driver users who need to be interviewed and then be our legal backend users, the old way to interview drivers need a lot of interviewers offline and has to order drivers to go to our specific place to accomplish the interview</li></ul></li><li>T<ul><li>I need to build some webapps that support drivers to finish the interview online and our checkers can check the drivers’ interview process asynchronizely, and the core webapp need some native app abilities such as recording voices, make video of interview process, capture face and body part and so on.</li></ul></li><li>A<ul><li>I build a standalone webapp and work with our native app developer that supply me the native ablitity and backend developer who supply me the interview content and judge the drivers’ answer that submitted.</li><li>I frequently communicate with the native app develops that is an iOS developer and an Android developer, because I was getting familar with the team’s jssdk and jsbridge during the project. We talked and designed new bridge functions which can suit this project together, then I wrote documents for the new bridges and communicate with native developers in time to ensure the bridges’<br>  changes</li></ul></li><li>R<ul><li>Finally, I deployed the webapp online and updated our jsbridge by publishing our npm package to support the new functions, the function online served both driver uses and our audits by increasing more drivers’ interview commits and make audits’ work more flexible. It indirectly save our cost on clarifying new driver users and be a continuous function for our main app for drivers.</li></ul></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2022年项目总结</title>
    <link href="/wilson-blog-hexo/2022/09/21/2022-projects/"/>
    <url>/wilson-blog-hexo/2022/09/21/2022-projects/</url>
    
    <content type="html"><![CDATA[<h2 id="整体总结"><a href="#整体总结" class="headerlink" title="整体总结"></a>整体总结</h2><ul><li>hybrid应用经验，擅长调试bridge问题，通过jsbridge调用现象反推原生bridge侧的实现<ul><li>bridge打开H5链接具备白名单权限</li><li>bridge方法响应超时</li><li>location.href打开scheme失败，改为使用新的webview承载scheme</li></ul></li><li>擅长通过文档梳理现有系统技术架构及业务逻辑，并辅助项目维护性体验</li><li>带领组员进行技术评审、Code Review、技术学习（rxjs）、团队规划</li></ul><h3 id="内部工具对接"><a href="#内部工具对接" class="headerlink" title="内部工具对接"></a>内部工具对接</h3><p>输出：UT、赤兔、webx</p><h3 id="隐私功能页开发"><a href="#隐私功能页开发" class="headerlink" title="隐私功能页开发"></a>隐私功能页开发</h3><p>输出：组件抽象、设计</p><h3 id="全量项目参数过滤"><a href="#全量项目参数过滤" class="headerlink" title="全量项目参数过滤"></a>全量项目参数过滤</h3><p>输出：sdk新增ajax请求统一过滤方法、汇总50多个项目的改动范围并分配改动任务</p><h3 id="线上问题跟踪"><a href="#线上问题跟踪" class="headerlink" title="线上问题跟踪"></a>线上问题跟踪</h3><p>总结：通过调试发现多个bridge方法调用会导致前面方法的返回超时</p><h3 id="内部文档——新人手册"><a href="#内部文档——新人手册" class="headerlink" title="内部文档——新人手册"></a>内部文档——新人手册</h3><p>输出：基于vuepress搭建新人站点，帮助新成员快速熟悉组内技术栈及开发环境</p><h3 id="内部营销工具接入——招募页接入赤兔平台"><a href="#内部营销工具接入——招募页接入赤兔平台" class="headerlink" title="内部营销工具接入——招募页接入赤兔平台"></a>内部营销工具接入——招募页接入赤兔平台</h3><p>输出：完整接入流程文档、测试环境部署脚本、共建xpub新特性（组件条件展示）</p><h3 id="外部投放页体验优化——招募落地页"><a href="#外部投放页体验优化——招募落地页" class="headerlink" title="外部投放页体验优化——招募落地页"></a>外部投放页体验优化——招募落地页</h3><p>问题：图片文件大、图片资源频繁替换</p><p>解决：针对固定图片增加资源预加载、引入头图配置化方案</p><h3 id="内部基建文档共建——《工程化演进》"><a href="#内部基建文档共建——《工程化演进》" class="headerlink" title="内部基建文档共建——《工程化演进》"></a>内部基建文档共建——《工程化演进》</h3><p>输出：脚手架插件、架构分析整理</p><h3 id="跨端项目重构——基于MPX实现多项目融合"><a href="#跨端项目重构——基于MPX实现多项目融合" class="headerlink" title="跨端项目重构——基于MPX实现多项目融合"></a>跨端项目重构——基于MPX实现多项目融合</h3><p>输出：整合业务重合部分，解决不同端实现的兼容问题（滑动组件）</p><h3 id="营销互通——小桔加油投放司机招募"><a href="#营销互通——小桔加油投放司机招募" class="headerlink" title="营销互通——小桔加油投放司机招募"></a>营销互通——小桔加油投放司机招募</h3><p>输出：小程序调起小程序的接入方案、H5上线系统打包自动化脚本（基于Node.js的解析、重写、打包）</p><h3 id="营销活动小程序化——小程序内使用司推司H5"><a href="#营销活动小程序化——小程序内使用司推司H5" class="headerlink" title="营销活动小程序化——小程序内使用司推司H5"></a>营销活动小程序化——小程序内使用司推司H5</h3><p>遇到问题：判断环境、接入登录、线上问题排查（sdk版本升级导致参数解析失败——大小写问题）</p><h3 id="小程序优化"><a href="#小程序优化" class="headerlink" title="小程序优化"></a>小程序优化</h3><p>输出：开发效率优化、打包部署自动化、包加载响应（图片、组件、dead code）</p><h3 id="跳端调研"><a href="#跳端调研" class="headerlink" title="跳端调研"></a>跳端调研</h3><p>输出：scheme、unilink、location.href、公众号、小程序</p><h3 id="活动页开发"><a href="#活动页开发" class="headerlink" title="活动页开发"></a>活动页开发</h3><p>输出：转盘动画</p><h3 id="活动页开发-1"><a href="#活动页开发-1" class="headerlink" title="活动页开发"></a>活动页开发</h3><p>输出：车费保障卡、多页面、组件设计</p><h3 id="线上问题排查"><a href="#线上问题排查" class="headerlink" title="线上问题排查"></a>线上问题排查</h3><p>输出：埋点链路</p><h3 id="车速检测demo"><a href="#车速检测demo" class="headerlink" title="车速检测demo"></a>车速检测demo</h3><p>输出：定时获取经纬度、去重、防抖</p><h3 id="组件库共建"><a href="#组件库共建" class="headerlink" title="组件库共建"></a>组件库共建</h3><p>输出：单测规范、部分组件单测用例</p><h3 id="线上问题排查-1"><a href="#线上问题排查-1" class="headerlink" title="线上问题排查"></a>线上问题排查</h3><p>输出：SDK后页面白屏分析（js报错，数据结构缺失导致的页面渲染受阻）</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>基于B/S架构的webapp开发</title>
    <link href="/wilson-blog-hexo/2021/07/24/%E5%9F%BA%E4%BA%8EB-S%E6%9E%B6%E6%9E%84%E7%9A%84webapp%E5%BC%80%E5%8F%91/"/>
    <url>/wilson-blog-hexo/2021/07/24/%E5%9F%BA%E4%BA%8EB-S%E6%9E%B6%E6%9E%84%E7%9A%84webapp%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h1 id="使用vscode远程开发一个全栈Web项目"><a href="#使用vscode远程开发一个全栈Web项目" class="headerlink" title="使用vscode远程开发一个全栈Web项目"></a>使用vscode远程开发一个全栈Web项目</h1><h2 id="技术栈-工具"><a href="#技术栈-工具" class="headerlink" title="技术栈&amp;工具"></a>技术栈&amp;工具</h2><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><ul><li><a href="https://vuejs.org/index.html">Vue.js</a></li></ul><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><ul><li><a href="https://expressjs.com/">Express</a></li><li><a href="https://pm2.keymetrics.io/">PM2</a></li></ul><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><ul><li><a href="https://nodejs.org/en/about/">Nodejs</a></li><li><a href="https://code.visualstudio.com/docs/remote/remote-overview">VScode</a></li><li><a href="https://lbsyun.baidu.com/index.php?title=jspopular3.0">地图jssdk</a></li></ul><h2 id="开发准备"><a href="#开发准备" class="headerlink" title="开发准备"></a>开发准备</h2><ul><li>一台Linux系统的服务器(centos)</li><li>搭建基于<code>nodejs</code>的服务端环境<ol><li>使用<code>nvm</code>管理<code>nodejs</code>环境(curl -o- <a href="https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh">https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh</a> | bash)</li><li>安装<code>pm2</code>用于<code>nodejs</code>程序的进程管理(npm i -g pm2)</li></ol></li><li>搭建基于<code>Vue</code>的前端环境<ol><li>使用<code>@vue/cli</code>进行前端项目初始化(npm install -g @vue&#x2F;cli)</li><li>[可选]使用<a href="https://travis-ci.com/">travis</a>+<a href="https://docs.github.com/en/github/administering-a-repository/managing-repository-settings/disabling-or-limiting-github-actions-for-a-repository#allowing-specific-actions-to-run">github action</a>进行项目CI管理</li></ol></li></ul><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ul><li>获取精确到城市级别的位置信息</li><li>位置信息地图可视化展示</li></ul><h2 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h2><h3 id="后端核心逻辑"><a href="#后端核心逻辑" class="headerlink" title="后端核心逻辑"></a>后端核心逻辑</h3><p>根据<code>express</code>获取到的请求获取来源IP，通过调用<a href="https://ipapi.com/">第三方</a>API获取位置信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js">app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/api/loc&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">let</span> ip = req.<span class="hljs-property">ip</span> || req.<span class="hljs-property">ips</span>[<span class="hljs-number">0</span>]<br>  <span class="hljs-keyword">if</span> (ip.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;:&quot;</span>) &gt; -<span class="hljs-number">1</span>) &#123;<br>    ip = ip.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;:&#x27;</span>)[<span class="hljs-number">3</span>]<br>  &#125;<br>  <span class="hljs-keyword">if</span> (ip) &#123;<br>    <span class="hljs-keyword">const</span> url = <span class="hljs-string">`http://api.ipapi.com/<span class="hljs-subst">$&#123;ip&#125;</span>?access_key=xxx`</span><br>    http.<span class="hljs-title function_">get</span>(url, <span class="hljs-function"><span class="hljs-params">httpRes</span> =&gt;</span> &#123;<br>      <span class="hljs-keyword">let</span> chunkData = <span class="hljs-string">&#x27;&#x27;</span>;<br>      httpRes.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-function"><span class="hljs-params">chunk</span> =&gt;</span> &#123;<br>        chunkData += chunk;<br>      &#125;)<br>      httpRes.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;end&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> jsonObj = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(chunkData)<br>        res.<span class="hljs-title function_">status</span>(<span class="hljs-number">200</span>)<br>        res.<span class="hljs-title function_">json</span>(&#123;<br>          <span class="hljs-attr">errno</span>: <span class="hljs-number">0</span>,<br>          <span class="hljs-attr">data</span>: jsonObj<br>        &#125;)<br>      &#125;)<br>    &#125;)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>)<br>    res.<span class="hljs-title function_">json</span>(&#123;<br>      <span class="hljs-attr">errno</span>: <span class="hljs-number">400</span>,<br>      <span class="hljs-attr">errmsg</span>: <span class="hljs-string">&#x27;没有获取到IP&#x27;</span><br>    &#125;)<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="前端核心逻辑"><a href="#前端核心逻辑" class="headerlink" title="前端核心逻辑"></a>前端核心逻辑</h3><h4 id="接口请求及数据处理"><a href="#接口请求及数据处理" class="headerlink" title="接口请求及数据处理"></a>接口请求及数据处理</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">getLoc</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> url = <span class="hljs-string">`//<span class="hljs-subst">$&#123;account.api&#125;</span>/api/loc`</span>;<br>  axios<br>    .<span class="hljs-title function_">get</span>(url)<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> res.<span class="hljs-property">data</span>)<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (+res.<span class="hljs-property">errno</span> === <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">const</span> obj = res.<span class="hljs-property">data</span>;<br>        <span class="hljs-keyword">if</span> (obj.<span class="hljs-property">latitude</span>) &#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">lat</span> = obj.<span class="hljs-property">latitude</span> * <span class="hljs-number">1</span><br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">lng</span> = obj.<span class="hljs-property">longitude</span> * <span class="hljs-number">1</span><br>        &#125;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">rows</span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(obj)<br>          .<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">key</span> =&gt;</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">dataMap</span>).<span class="hljs-title function_">includes</span>(key))<br>          .<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">key</span> =&gt;</span> &#123;<br>            <span class="hljs-keyword">return</span> key === <span class="hljs-string">&#x27;location&#x27;</span> ? &#123;<br>              <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;国旗&#x27;</span>,<br>              <span class="hljs-attr">value</span>: obj[key][<span class="hljs-string">&#x27;country_flag_emoji&#x27;</span>]<br>            &#125; : &#123;<br>              <span class="hljs-attr">label</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">dataMap</span>[key],<br>              <span class="hljs-attr">value</span>: obj[key]<br>            &#125;;<br>          &#125;);<br>      &#125;<br>    &#125;);<br>&#125;,<br></code></pre></td></tr></table></figure><h4 id="地图SDK加载"><a href="#地图SDK加载" class="headerlink" title="地图SDK加载"></a>地图SDK加载</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">baiduMap</span>(<span class="hljs-params">ak</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">baiduMap</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-title function_">resolve</span>()<br>    &#125;<br>    <span class="hljs-keyword">let</span> script = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;script&#x27;</span>)<br>    script.<span class="hljs-property">type</span> = <span class="hljs-string">&#x27;text/javascript&#x27;</span><br>    script.<span class="hljs-property">src</span> = <span class="hljs-string">`http://api.map.baidu.com/api?type=webgl&amp;v=3.0&amp;ak=<span class="hljs-subst">$&#123;ak&#125;</span>&amp;callback=baiduMap`</span><br>    script.<span class="hljs-property">onerror</span> = reject<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">head</span>.<span class="hljs-title function_">appendChild</span>(script)<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="地图组件"><a href="#地图组件" class="headerlink" title="地图组件"></a>地图组件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;map-wrap&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;container&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; baiduMap &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../../common/js/utils&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; account &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../../../account&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">props</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">lat</span>: <span class="hljs-title class_">Number</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">lng</span>: <span class="hljs-title class_">Number</span></span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">ak</span>: account.<span class="hljs-property">ak</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">zoomSize</span>: <span class="hljs-number">16</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">map</span>: <span class="hljs-literal">null</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">clickedAddr</span>: <span class="hljs-string">&quot;&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">watch</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">lat</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">renderMap</span>();</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">lat</span> &amp;&amp; <span class="hljs-variable language_">window</span>.<span class="hljs-property">BMapGL</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">initMap</span>();</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">renderMap</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">const</span> that = <span class="hljs-variable language_">this</span>;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">this</span>.$nextTick(<span class="hljs-function">() =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title function_">baiduMap</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">ak</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          that.<span class="hljs-title function_">initMap</span>();</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">initMap</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BMapGL</span>.<span class="hljs-title class_">Map</span>(<span class="hljs-string">&quot;container&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">locationByLatLng</span>(map);</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">commonSet</span>(map);</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">showLoactionControl</span>(map);</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">observeMapClick</span>(map);</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getAddress</span>();</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">locationByBrowser</span>(map);</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">locateByOriginBrowser</span>();</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.map-wrap</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">position</span>: relative;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-id">#container</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="工程化基建"><a href="#工程化基建" class="headerlink" title="工程化基建"></a>工程化基建</h3><h4 id="vConsole"><a href="#vConsole" class="headerlink" title="vConsole"></a>vConsole</h4><p>隐式加载vConsole，通过热键唤起vConsole面板</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">clickTitle</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">clickCount</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">clickCount</span> + <span class="hljs-number">1</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">clickCount</span> === <span class="hljs-number">5</span>) &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">consoleShow</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">consoleShow</span> = <span class="hljs-literal">true</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">showVConsole</span>()<br>    &#125;<br>  &#125;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">clickCount</span> = <span class="hljs-number">0</span><br>  &#125;, <span class="hljs-number">2000</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="PM2"><a href="#PM2" class="headerlink" title="PM2"></a>PM2</h4><p>启动后端服务时添加<code>--time</code>参数，为日志添加时间</p><p>使用<code>pm2 logs</code>查看后端服务日志</p><h3 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h3><h4 id="后端服务"><a href="#后端服务" class="headerlink" title="后端服务"></a>后端服务</h4><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">pm2 <span class="hljs-built_in">start</span> api.js <span class="hljs-comment">--name me</span><br></code></pre></td></tr></table></figure><h4 id="前端服务"><a href="#前端服务" class="headerlink" title="前端服务"></a>前端服务</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm <span class="hljs-built_in">run</span> build<br></code></pre></td></tr></table></figure><p>将<code>dist</code>拖拽到<code>vscode remote</code>访问到的服务机</p><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p>服务机固定单端口同时部署前端服务和后端服务于不同的路由</p><p><img src="/wilson-blog-hexo/img/post/architecture.png" alt="architecture"></p><h4 id="前端服务-1"><a href="#前端服务-1" class="headerlink" title="前端服务"></a>前端服务</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;../dist&#x27;</span>)))<br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.<span class="hljs-title function_">sendFile</span>(path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;../dist/&#x27;</span>, <span class="hljs-string">&#x27;index.html&#x27;</span>))<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="后端服务-1"><a href="#后端服务-1" class="headerlink" title="后端服务"></a>后端服务</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/api/loc&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>)<br>  res.<span class="hljs-title function_">json</span>(&#123;<br>    <span class="hljs-attr">errno</span>: <span class="hljs-number">200</span>,<br>    <span class="hljs-attr">data</span>: &#123;&#125;<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="关于CI"><a href="#关于CI" class="headerlink" title="关于CI"></a>关于CI</h2><p>Vue CLI官方文档中提供了两种基于Github Pages的CI方式，其中第一个坑就是<code>不要看中文文档</code>，因为中文文档“年久失修”，很多错误的地方也没人勘误，建议以<a href="https://cli.vuejs.org/guide/deployment.html#github-pages">英文文档</a>为准。</p><p>接着就是关于两种CI方式，其中第一种手动方式没什么问题，本地写一个Shell脚本，需要发布项目的时候手动执行，核心逻辑如下</p><ol><li>build生成dist</li><li>进到dist目录，将dist目录初始化为一个git项目并提交，强制推送到当前项目远程的gh-pages分支</li><li>退出dist目录</li></ol><p>另外就是通过集成travis的自动化方式，核心步骤如下</p><ol><li>在本地安装travis客户端(gem install travis)</li><li>使用github登录travis(travis login –com –github-token xxx)</li><li>设置travis变量（用于travis调用github API来拉取你的github项目）(travis env set GITHUB_TOKEN xxx)</li><li>项目中增加travis配置文件</li><li>在travis网站观察CI结果</li></ol><p>这里面坑很多，首先第一个就是<code>Vue CLI官方文档中提供的travis登录方式已经过时</code>，即直接进行<code>travis --login</code>输入github用户名和密码后会报<code>NOT FOUND</code>错误，这里是由于<a href="https://github.com/travis-ci/travis.rb/issues/794#issuecomment-787485778">这个</a>原因，所以需要使用github_token的方式进行登录。</p><p>第二个坑就是按照CI逻辑，推送了本地分支，却没有发生gh-pages分支的更新，即自动化根本没有执行。这里可以通过travis网站的控制台查看requests中所有的CI请求都是失败的，提示的报错大多是<code>Could not authorize build request for xxx</code>。而这里的错误根本不是字面意思这样，而是需要手动在travis的plan中选择一个套餐，即使是免费套餐也得选择。原因发现自<a href="https://stackoverflow.com/questions/41034694/travis-could-not-authorize-build-request/41078031">这里</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>前端</tag>
      
      <tag>nodejs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2020年项目总结(英文版)</title>
    <link href="/wilson-blog-hexo/2021/03/01/2020-en-projects/"/>
    <url>/wilson-blog-hexo/2021/03/01/2020-en-projects/</url>
    
    <content type="html"><![CDATA[<h1 id="2020-work-review"><a href="#2020-work-review" class="headerlink" title="2020 work review"></a>2020 work review</h1><h2 id="business-projects"><a href="#business-projects" class="headerlink" title="business projects"></a>business projects</h2><ul><li><p>smart-interview</p></li><li><p>double-lift</p></li><li><p>carface</p></li><li><p>backflow</p></li><li><p>video-interview</p></li><li><p>black-list-interview</p></li><li><p>new-comer-mission</p></li><li><p>pre-education</p></li><li><p>special-cheap</p></li><li><p>benefit-center</p></li><li><p>mp-pay&amp;live</p></li><li><p>cross-platform-recruitment</p></li><li><p>carfee-ensurance</p></li><li><p>track-monitor</p></li><li><p>spring-festval-active</p></li><li><p>earlybird</p></li></ul><h2 id="project-details"><a href="#project-details" class="headerlink" title="project details"></a>project details</h2><h3 id="smart-interview"><a href="#smart-interview" class="headerlink" title="smart interview"></a>smart interview</h3><ul><li>self development</li><li>get used to team’s workflow</li><li>jsbridge</li><li>jssdk</li></ul><h3 id="carface"><a href="#carface" class="headerlink" title="carface"></a>carface</h3><ul><li>rxjs</li></ul><h3 id="newcomer-mission"><a href="#newcomer-mission" class="headerlink" title="newcomer-mission"></a>newcomer-mission</h3><ul><li>vuex</li></ul><h3 id="backflow"><a href="#backflow" class="headerlink" title="backflow"></a>backflow</h3><ul><li>scheme protocol</li></ul><h3 id="liveshow"><a href="#liveshow" class="headerlink" title="liveshow"></a>liveshow</h3><ul><li>wxapi</li><li>pay</li></ul><h3 id="spring-festval-activity"><a href="#spring-festval-activity" class="headerlink" title="spring festval activity"></a>spring festval activity</h3><ul><li>cross platform development</li><li>vue-cli-plugin</li></ul><h2 id="tech-stack"><a href="#tech-stack" class="headerlink" title="tech stack"></a>tech stack</h2><ul><li>vue<ul><li>composition api</li><li>vuex</li><li>vue-router</li><li>vue-cli</li><li>vue-cli-plugin</li><li>vue-rx</li></ul></li><li>webpack<ul><li>loader</li><li>plugin</li></ul></li><li>js<ul><li>jssdk</li><li>jsbridge</li></ul></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2020年个人技术总结(英文版)</title>
    <link href="/wilson-blog-hexo/2021/03/01/2020-en-review/"/>
    <url>/wilson-blog-hexo/2021/03/01/2020-en-review/</url>
    
    <content type="html"><![CDATA[<h1 id="2020-year-end-summary"><a href="#2020-year-end-summary" class="headerlink" title="2020-year-end-summary"></a>2020-year-end-summary</h1><h2 id="career"><a href="#career" class="headerlink" title="career"></a>career</h2><ul><li>join didiglobal and work for didi driver hybrid app</li><li>become the owner of Flower Piggy (a ride-hailing service of Didi targeting younger customers) driver-side services </li><li>finish two impressive projects alone(smart interview SPA html5 project and make a live in wechat miniprogram)</li></ul><h2 id="work-staff"><a href="#work-staff" class="headerlink" title="work staff"></a>work staff</h2><ul><li>build hybrid web app pages(no pc websites)</li><li>learn to use group-related develop tools such as vue-cli-plugin, UI component library, jssdk, and jsbridge etc.</li><li>keyboard component</li><li>page track</li><li>cubeui UI library and biz library</li><li>jsbridge</li><li>develop standalone projects using HTML5&#x2F;Vue2</li><li>develop new features as requirement or bugfix</li><li>code review</li><li>refactor and improve performance</li><li>online problems locating(server side problem&#x2F;frontend logic errors&#x2F;data tracking exception)</li><li>locate problems and communicate with other group and push them to realize requirements</li><li>miniprogram UI component unit testing and document(refer to weui&#x2F;j-component&#x2F;miniprogram-simulate)</li><li>integrate third party SDKs(paying SDK etc.)</li></ul><h2 id="tech-stack"><a href="#tech-stack" class="headerlink" title="tech stack"></a>tech stack</h2><ul><li>vue<ul><li>lifecycle method<ul><li>created</li><li>mounted</li></ul></li><li>mixins</li><li>emit&#x2F;on</li><li>props</li></ul></li><li>vuex<ul><li>store</li><li>mutation</li><li>mapGetter</li><li>mapState</li><li>mapMutation</li></ul></li><li>vue-router</li><li>vue-cli-service<ul><li>vue.config.js</li><li>webpack</li></ul></li><li>vue-cli-plugin</li><li>babel</li><li>stylus</li><li>es6<ul><li>promise&#x2F;async</li><li>includes</li><li>const&#x2F;let</li><li>deconstruct</li><li>ESM&#x2F;amd&#x2F;umd&#x2F;commonJS</li></ul></li><li>jscore<ul><li>function&#x2F;callback</li><li>setTimeout&#x2F;setInterval</li><li>closure</li></ul></li><li>git &amp; gitlab</li><li>node &amp; npm<ul><li>dependence&#x2F;devDependence&#x2F;peerDependence</li><li>link&#x2F;publish&#x2F;version(semver)</li><li>macro&#x2F;micro tasks</li></ul></li></ul><h2 id="coding-skills"><a href="#coding-skills" class="headerlink" title="coding skills"></a>coding skills</h2><ul><li>css animations<ul><li>transform</li><li>translate</li><li>keyframe</li><li>animation</li><li>1px compatity</li></ul></li><li>js array methods<ul><li>findIndex and indexOf</li><li>some&#x2F;every&#x2F;each</li><li>filter&#x2F;map&#x2F;reduce</li><li>sort</li></ul></li><li>network basic<ul><li>ajax<ul><li>post&#x2F;get&#x2F;options</li><li>content-type<ul><li>application&#x2F;json、application&#x2F;www-form-urlencoded</li></ul></li></ul></li><li>CORS</li></ul></li><li>web browser<ul><li>url&#x2F;schema</li><li>window&#x2F;location&#x2F;document</li><li>encode&#x2F;decode&#x2F;encodeComponent&#x2F;decodeComponent</li><li>cache</li><li>cookie&#x2F;sessionStorage&#x2F;localStorage</li></ul></li><li>libraries&#x2F;frameworks learning<ul><li>vue3</li><li>vue-rx</li></ul></li><li>backend skills<ul><li>nginx</li><li>linux<ul><li>useful instructions</li></ul></li><li>curl</li></ul></li><li>hybrid<ul><li>webview</li><li>camera&#x2F;record&#x2F;geolocation</li></ul></li></ul><h2 id="problem-solving"><a href="#problem-solving" class="headerlink" title="problem solving"></a>problem solving</h2><ul><li>Learn how to add new feature for jsbridge and debug new feature with native app developers and deploy new jsbridge npm package</li><li>Get used to debug new features with backend developer’s APIs and make requirements work correctly</li></ul><h2 id="reading"><a href="#reading" class="headerlink" title="reading"></a>reading</h2><ul><li>Rich Dad Poor Dad(personal finance)</li><li>Danshari(about lifestyle)</li><li>Bad kid(a Chinese novel book talk about humanity)</li><li>Animal Farm(because the movie——Hunting)</li><li>You don’t know JavaScript(coding skills)</li></ul><h2 id="travel"><a href="#travel" class="headerlink" title="travel"></a>travel</h2><ul><li>Changsha(train)</li><li>Saihanba(driving)</li></ul><h2 id="planing-coding-skills"><a href="#planing-coding-skills" class="headerlink" title="planing coding skills"></a>planing coding skills</h2><ul><li>GraphQL</li></ul><h2 id="planing-life-learning"><a href="#planing-life-learning" class="headerlink" title="planing life learning"></a>planing life learning</h2><ul><li>reading more Englist articles(technique)</li><li>reading more books</li><li>coding more</li><li>build personal website or blog(replace the using blog template)</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>如何使用github进行持续集成</title>
    <link href="/wilson-blog-hexo/2020/08/19/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8github%E8%BF%9B%E8%A1%8C%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    <url>/wilson-blog-hexo/2020/08/19/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8github%E8%BF%9B%E8%A1%8C%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/</url>
    
    <content type="html"><![CDATA[<p>利用github的actions为你的前端项目加上CI(continuous integration，持续集成)</p><span id="more"></span><h2 id="一、创建前端项目"><a href="#一、创建前端项目" class="headerlink" title="一、创建前端项目"></a>一、创建前端项目</h2><blockquote><p>这里以angular项目为例，其他框架同理</p></blockquote><p>前端的三大框架（Angular、React和Vue）目前均有自己比较成熟的脚手架（cli）可用于项目从<strong>创建</strong>、<strong>开发</strong>到<strong>构建</strong>、<strong>部署</strong>一系列的工作，从而使得前端部分的工作从开发到交付保持比较高的效率。但仅仅如此还不够，因为在部署环节，其实不同开发者有这不同的“套路”，有使用jenkins的，也有在本地编译再通过scp传输到服务器的。但这些在CI面前都显得不够“自动化”。</p><p>我们稍微总结一下：</p><p>前端有三大框架</p><ul><li>Angular</li><li>React</li><li>Vue</li></ul><p>分别对应有自己的脚手架工具</p><ul><li>@angular&#x2F;cli</li><li>create-react-app</li><li>@vue&#x2F;cli</li></ul><p>前端项目从0到1到上线主要环节有</p><ul><li>创建</li><li>开发</li><li>构建</li><li>部署</li></ul><p>主流部署方式有</p><ul><li>jenkins</li><li>scp</li></ul><p>接下来进入今天的主要环节，如何利用github的actions功能实现项目CI</p><h2 id="二、github-actions"><a href="#二、github-actions" class="headerlink" title="二、github actions"></a>二、github actions</h2><p>按照github actions的指示操作后，会创建一个.github&#x2F;workflows&#x2F;blank.yml文件</p><p>这个文件承载着整个github actions的配置，也就意味着当你在github某个仓库中包含.github&#x2F;workflow&#x2F;xxx.yml文件后，你在操作这个仓库时就会触发对应的action。比如我们如下配置可使得每次在对smartshop这个项目的master分支上进行push时触发如下动作：</p><ol><li>在github所提供的某台云服务器A上安装node和npm</li><li>在服务器A上安装@angular&#x2F;cli</li><li>利用安装好的@angular&#x2F;cli对smartshop项目进行编译</li><li>将编译生成的目录通过scp发送到指定的服务器B</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># This is a basic workflow to help you get started with Actions</span><br><br><span class="hljs-attr">name:</span> <span class="hljs-string">CI</span><br><br><span class="hljs-comment"># Controls when the action will run. Triggers the workflow on push or pull request</span><br><span class="hljs-comment"># events but only for the master branch</span><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span> [ <span class="hljs-string">master</span> ]<br><br><span class="hljs-comment"># A workflow run is made up of one or more jobs that can run sequentially or in parallel</span><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-comment"># This workflow contains a single job called &quot;build&quot;</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-comment"># The type of runner that the job will run on</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br><br>    <span class="hljs-comment"># Steps represent a sequence of tasks that will be executed as part of the job</span><br>    <span class="hljs-attr">steps:</span><br>    <span class="hljs-comment"># Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br>    <span class="hljs-comment"># this installs node and npm for us</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v1</span> <br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">node-version:</span> <span class="hljs-string">&#x27;10.x&#x27;</span><br>    <span class="hljs-comment"># this allows for re-using node_modules caching, making build a bit faster  </span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/cache@v1</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">~/.npm</span><br>        <span class="hljs-attr">key:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">runner.os</span> <span class="hljs-string">&#125;&#125;-node-$&#123;&#123;</span> <span class="hljs-string">hashFiles(&#x27;**/package-lock.json&#x27;)</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">restore-keys:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          $&#123;&#123; runner.os &#125;&#125;-node-</span><br><span class="hljs-string"></span>        <br>    <span class="hljs-comment"># Runs a single command using the runners shell</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">npm</span> <span class="hljs-string">install</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">install</span><br>    <br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">install</span> <span class="hljs-string">ng-cli</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">install</span> <span class="hljs-string">-g</span> <span class="hljs-string">@angular/cli</span> <span class="hljs-string">&gt;</span> <span class="hljs-string">/dev/null</span><br>    <br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">build</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">run</span> <span class="hljs-string">build</span><br>      <span class="hljs-comment"># run: ng build --prod</span><br>    <br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">copy</span> <span class="hljs-string">file</span> <span class="hljs-string">via</span> <span class="hljs-string">scp</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">appleboy/scp-action@master</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">host:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.HOST</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">username:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.USERNAME</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">port:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.PORT</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">password:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.PASSWORD</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">source:</span> <span class="hljs-string">&quot;./dist/znsc-ng&quot;</span><br>        <span class="hljs-attr">target:</span> <span class="hljs-string">&quot;/home/webapp/&quot;</span><br></code></pre></td></tr></table></figure><p>其中比较关键的也是开发者比较关心的是自己要部署的服务器信息，这部分内容当然是不会直接明文写在配置文件中的，所以在这里github actions利用了变量进行处理。而这个变量值的设置则是通过另一个地方进行保存</p><h3 id="插曲一"><a href="#插曲一" class="headerlink" title="插曲一"></a>插曲一</h3><p>初始化的阿里云ECS由于控制台配置，默认的80端口可能不是nginx服务器，也有可能被其他程序占用，可通过以下命令查看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">netstat -anop | grep 0.0.0.0:80<br>tcp        0      0 0.0.0.0:8080            0.0.0.0:*               LISTEN      1905/java            off (0.00/0/0)<br>tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      24066/httpd          off (0.00/0/0)<br>tcp        0      0 0.0.0.0:8009            0.0.0.0:*               LISTEN      1905/java            off (0.00/0/0)<br></code></pre></td></tr></table></figure><p>可发现80端口被apache服务器的httpd进程所占用，如果使用apache服务器，可通过配置apache所占80端口默认访问的静态文件入口，操作如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">whereis httpd<br>httpd: /etc/httpd /usr/local/apache/bin/httpd<br><br>cd /etc/httpd<br><br>vi httpd.conf<br><br>/80<br><br>/DocumentRoot<br></code></pre></td></tr></table></figure><p>如果使用nginx服务器，可通过以下命令查找nginx服务器当前使用的配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">whereis nginx<br>nginx: /usr/local/nginx<br><br>cd /usr/local/nginx<br>cd sbin<br><br>./nginx -t<br>nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok<br>nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful<br></code></pre></td></tr></table></figure><h3 id="插曲二"><a href="#插曲二" class="headerlink" title="插曲二"></a>插曲二</h3><p>angular项目中可能会使用到样式预处理器，当依赖node-sass包后可能会下载失败。此时可使用node-sass官网所提供的另一个包提供可供下载该包的源配置，如下</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">npm install -g mirror-config-china --registry=https:<span class="hljs-comment">//registry.npm.taobao.org</span><br></code></pre></td></tr></table></figure><p><a href="https://www.npmjs.com/package/node-sass#install-from-mirror-in-china">参考</a></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>这样我们就可以愉快地在功能分支进行开发和提交，在master分支进行push到远程仓库，并自动触发部署动作，完成更新上线了。这样既省去了每次手动部署的操作，也无需对服务器私密信息进行本地保存，实属github actions为我们提供的一种CI最佳实践</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://blog.khophi.co/deploy-angular-with-github-actions/">Deploy Angular to Production with Github Actions</a></li><li><a href="https://docs.github.com/en/developers/overview/managing-deploy-keys#deploy-keys">Managing deploy keys</a></li><li><a href="https://www.cnblogs.com/f-ck-need-u/p/7636836.html#1-1-httpd-apachectl-">httpd配置文件httpd.conf规则说明和一些基本指令</a></li><li><a href="https://docs.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#">Generating a new SSH key and adding it to the ssh-agent</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>整理博客过程中的一些思考</title>
    <link href="/wilson-blog-hexo/2020/05/04/%E6%95%B4%E7%90%86%E5%8D%9A%E5%AE%A2%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
    <url>/wilson-blog-hexo/2020/05/04/%E6%95%B4%E7%90%86%E5%8D%9A%E5%AE%A2%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</url>
    
    <content type="html"><![CDATA[<p>重新把很早以前写的“博客”看了一下，发现有新的感悟。</p><span id="more"></span><p>本想像归档历史一样把之前散落在CSDN上写过的“文章”直接粘过来和“大本营”汇合，但发现之前写的东西真的没法看（笑哭）。</p><p>首先那些应该算不上是博客，因为很少有从自己大脑中输出的文字内容，大学时期写的多是把课本上的概念汇总梳理了一下，顶多算得上是读书笔记。但那时的归纳能力的确弱的可怜，基本划完重点以后发现都是重点。这就不由想想为什么会这样呢，发现其实本科阶段真的只是在学了一个”目录“，只是让我们知道了自己的专业里有哪些专业名词，免得以后从事自己专业所做的事时一无所知。</p><p>大学的内容现在看来真的太过密集、信息量之大，再加上如果没有负责的老师把其中的精华拿出来引导学生去掌握的话，最终可能很多大学生的结果是仅仅停留在”学过“的程度。就比如我在CSDN中前两篇关于 <a href="https://blog.csdn.net/sinat_16791487/article/details/40866613">计算机网络</a> 和 <a href="https://blog.csdn.net/sinat_16791487/article/details/42367347">数据结构</a> 的总结，这些东西拿出来就足够一个工作多年的人去重新学习数月之久，但对于本科生，学习它们的时间可能就仅限于考试前的一个礼拜，最终虽然考试过了，但也只是背下了这些文字，而根本很少理解这其中的大多原理。但这些知识又恰恰是从计算机诞生之初到今天被不断打磨而形成的核心原理，互联网之所以能有今天的繁荣就是从这些原理中所创造出来的。就好比”一生二，二生三，三生万物“，这些知识点就是那个重要的”一“。</p><p>所以借这个场景我们可以理直气壮地重申那个广为人谈的观点——”学习是终身的。“</p><p>就拿计算机专业来说，能把书本中这些东西都熟记脑中的可能有这么几类人：</p><ul><li>大学专业课教师</li><li>考过软考相关考试并获得证书的人</li><li>民间自学高手</li><li>混迹公司多年并苦心研究技术的扫地僧</li></ul><p>除此之外的技术从业者，都应该抱着一颗怀有敬畏感的心，永远不应该停止学习，不管是新的技术，还是老的基础，只因为学海无涯。并且这些人也都曾心中默念”学无止境“才成为自己领域的佼佼者，甚至他们至今还保持着一如既往的学习态度。</p><p>既然前面都有那么多厉害的前辈，我等晚辈又岂能偷闲呢，不禁感叹”真正的大师永远都怀着一颗学徒的心“。</p><p><img src="https://user-images.githubusercontent.com/23159565/80947780-6d7b0600-8e23-11ea-85a3-9a991bee63aa.png" alt="image"></p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客重新更新了</title>
    <link href="/wilson-blog-hexo/2020/05/02/%E5%8D%9A%E5%AE%A2%E9%87%8D%E6%96%B0%E6%9B%B4%E6%96%B0%E4%BA%86/"/>
    <url>/wilson-blog-hexo/2020/05/02/%E5%8D%9A%E5%AE%A2%E9%87%8D%E6%96%B0%E6%9B%B4%E6%96%B0%E4%BA%86/</url>
    
    <content type="html"><![CDATA[<p>时隔许久，决定重新打开尘封许久的博客。</p><span id="more"></span><p>很久没再更新，一方面是因为曾一度觉得在某些问题的解决上，网上其他人写的更有价值，也就不想再生产“网络垃圾”，另一方面是项目多起来真的很难有时间拿来写博客，往往一个项目结束，正想着复盘整理一下项目中的收获和疑点时，下一个项目就又开始了。</p><p>这次借着疫情期间闲下来，决定重新捡起这个东西。</p><hr><h2 id="换个博客主题"><a href="#换个博客主题" class="headerlink" title="换个博客主题"></a>换个博客主题</h2><p>第一步想到的是要换个博客主题，博客本身是基于 <a href="https://hexo.io/zh-cn/">Hexo</a> 引擎的，其 <a href="https://hexo.io/themes/">主题列表</a> 也是百花齐放，质量层次不齐，并且数量还在不断增加中，很难从中选到一个中意的。再三对比下我选择了既简洁又不失美观的 <a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid</a>，应该是截至目前我最满意的主题了。它是基于 <a href="https://github.com/bolnh/hexo-theme-material">material</a> 设计风格的，和它类似的另一款主题是 <a href="https://github.com/blinkfox/hexo-theme-matery">matery</a> ，也是我之前用的主题，现在再看感觉过于花哨，功能虽多，但看上去过于炫技，反而丧失了博客的本质——文字记录。相比之下，fluid 的首页排版会让我觉得更加聚焦于博客列表的展示，其实这我都觉得有点花哨，因为主题出于美观的目的导致布局中的间距有点大，首页能够展示的博客数不够多。起初我是想这次做成 <a href="https://justjavac.com/">jjc</a> 和 <a href="https://yanhaijing.com/">颜海镜</a> 两位大神那样的风格，就简简单单首页陈列所有的博客标题，没有多余的东西。但后来想想还是算了，毕竟自己还没到那么成熟的段位，可能驾驭不了那么成熟稳重的风格，自己的博客中还是需要一些活力的元素，于是便选择了这个介于浮夸和稳重之间的主题风格。</p><h2 id="为什么重新解封博客"><a href="#为什么重新解封博客" class="headerlink" title="为什么重新解封博客"></a>为什么重新解封博客</h2><p>这次重新捡起博客的另一个重要原因是想整合之前写过的所有文字记录，因为感觉平时自己也写过一些自认为比较有意义的东西，有些是学习工作过程中对于问题解决的记录，有的是学习到不同阶段所产生的感悟，有些纯粹是为了记录某些东西便于后续查找的。</p><p>总之，有很多东西需要被汇总到一起。</p><p>因为平时有的东西可能随手一写就放在电脑本地了，有的在笔记本里的，有的在台式机里，还有一些是在没有独立博客前散落在各种公共博客空间写的。我觉得出于对自己所生产内容负责的态度，这些产出应该被比较完整地去维护。比如之前本地随笔写的东西可能很多因为没有发出来就烂尾了，而如果有这样一个长期维护的博客，可能会起到一个督促自己的作用。所以这次想借着重新开启博客的机会，把之前这些有想法但没落实的事做一做，也算给自己一个阶段性的交代。</p><h2 id="这次做了什么"><a href="#这次做了什么" class="headerlink" title="这次做了什么"></a>这次做了什么</h2><p>首先，回顾了一下自己博客的部署方式，我是在 <a href="https://coding.net/">coding</a> 存储博客的源项目，然后博客编译出的静态文件部署在 coding 的另一个仓库，还有之前用的主题 <a href="https://github.com/blinkfox/hexo-theme-matery">matery</a> 作为一个 git 子模块放在项目内，同时它也单独存放在一个 coding 仓库内，所以一共三个仓库。这样我在任何一台电脑都可以下载源文件进行博客发布，这是之前研究 <a href="http://www.h2mes.com/">博客备份</a> 留下来的方案，因为之前有过因为没有对源文件进行 git 管理而导致换电脑后无法继续发博客的惨案。</p><p>其次我在选择博客主题的时候发现 hexo 有很多比较好的周边项目，比如它有自己的 <a href="https://github.com/hexojs/hexo-cli">cli</a> 于是就先去看了一下 hexo 的源码，发现有一个比较活跃的团队在维护着 <a href="https://github.com/hexojs">hexo</a> 这一系列项目，比如用新的 ES 特性更新了框架内部的很多实现。而且其主题列表也有很多自由开发者在不断贡献自己的作品，以供更多人选择，总体算是一个比较完善的博客引擎。和它类似的博客引擎应该就是 <a href="http://jekyllbootstrap.com/">jeklly</a> 了，也就是 jjc 和 颜海镜 两位大神的选择。这应该是比较早的博客引擎，基于 bootstrap 的。Bootstrap 大家应该都知道，很早的 UI 框架了，所以 jeklly 也算是上一批的博客引擎。甚至我感觉 hexo 就是国人参考 jeklly 用 node 重写出来的。jeklly 是基于 perl 的，所以相比而言对于 “新前端人” 没有 node 那么熟悉，可能这也成为 hexo 更流行的原因吧。</p><p>列举一些我觉得比较好的主题：</p><ul><li>经典主题 <a href="https://theme-next.iissnan.com/">next</a> 应该是很多 hexo 用户去掉默认主题后用的第一个主题</li><li>左右排版的 <a href="https://github.com/JoeyBling/hexo-theme-yilia-plus">yilia</a> 应该也算比较经久耐用的老主题了</li><li>很有冲击力的 <a href="https://github.com/jerryc127/hexo-theme-butterfly">butterfly</a> 是很多人的选择，我也挺喜欢的，但是图片元素太多，会压过文字内容的风头</li><li><a href="https://github.com/blinkfox/hexo-theme-matery">matery</a> ，我的前主题，功能大而全，最大的缺点就是功能太多了，适合尝试，不适合久用</li></ul><p>好了，记录好这些可以留作备用的主题，我项目中的这些主题文件也就可以删掉了。</p><p>最终让我决定使用 fluid 是因为 <a href="https://www.v2ex.com/t/667921">Fluid 发布 1.8.0 版本，优雅与简约共存的主题</a> 这个帖子。这个主题维护的比较好，而且审美兼具美观与大气，是让我觉得比较中意的。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>对于博客内容这个东西，不管好的坏的，都是自己曾经写的。历史不应该被遗忘，也不应该被篡改。</p><p>可能每过一个阶段再去看曾经的自己会觉得幼稚不堪，但没有那时的自己，怎么会有今天的自己，反而有这样一份“日记”当作写照不也正是在正视自己成长过程中的每一个阶段么。</p><p>每一个大神也都曾是萌新。</p>]]></content>
    
    
    <categories>
      
      <category>总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>其他</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉树的三种遍历（递归+迭代）</title>
    <link href="/wilson-blog-hexo/2020/04/16/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%89%E7%A7%8D%E9%81%8D%E5%8E%86%EF%BC%88%E9%80%92%E5%BD%92-%E8%BF%AD%E4%BB%A3%EF%BC%89/"/>
    <url>/wilson-blog-hexo/2020/04/16/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%89%E7%A7%8D%E9%81%8D%E5%8E%86%EF%BC%88%E9%80%92%E5%BD%92-%E8%BF%AD%E4%BB%A3%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>二叉树的三种遍历（递归+迭代）</p><span id="more"></span><h2 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">TreeNode</span>&#125; <span class="hljs-variable">root</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">number[]</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> preorderTraversal = <span class="hljs-keyword">function</span>(<span class="hljs-params">root</span>) &#123;<br>    <span class="hljs-comment">// 迭代法</span><br>    <span class="hljs-keyword">var</span> stack = [];<br>    <span class="hljs-keyword">var</span> ans = [];<br>    <span class="hljs-keyword">if</span> (root &amp;&amp; root.<span class="hljs-property">val</span>) &#123;<br>        stack.<span class="hljs-title function_">push</span>(root);<br>        <span class="hljs-comment">// 利用栈临时存取元素</span><br>        <span class="hljs-keyword">while</span> (stack.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 从栈顶取出当前元素</span><br>            <span class="hljs-keyword">var</span> cur = stack.<span class="hljs-title function_">pop</span>();<br>            <span class="hljs-keyword">if</span> (cur !== <span class="hljs-literal">null</span>) &#123;<br>                ans.<span class="hljs-title function_">push</span>(cur.<span class="hljs-property">val</span>);<br>                <span class="hljs-comment">// 栈先进后出，所以先放右子树</span><br>                <span class="hljs-keyword">if</span> (cur.<span class="hljs-property">right</span>) stack.<span class="hljs-title function_">push</span>(cur.<span class="hljs-property">right</span>);<br>                <span class="hljs-keyword">if</span> (cur.<span class="hljs-property">left</span>) stack.<span class="hljs-title function_">push</span>(cur.<span class="hljs-property">left</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">TreeNode</span>&#125; <span class="hljs-variable">root</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">number[]</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> inorderTraversal = <span class="hljs-keyword">function</span>(<span class="hljs-params">root</span>) &#123;<br>    <span class="hljs-comment">// 迭代</span><br>    <span class="hljs-keyword">var</span> ans = [];<br>    <span class="hljs-keyword">var</span> stack = [];<br>    <span class="hljs-keyword">var</span> cur = root;<br>    <span class="hljs-comment">// cur条件是为了启动循环，因为初始时栈为空</span><br>    <span class="hljs-keyword">while</span> (cur || stack.<span class="hljs-property">length</span>) &#123;<br>        <span class="hljs-comment">// 所有左子树依次入栈（根-&gt;左-&gt;根-&gt;左……直到没有左子树了，根就可以出栈了）</span><br>        <span class="hljs-keyword">while</span> (cur) &#123;<br>            <span class="hljs-comment">// 只有这里有入栈操作，就是判断当前子树是否有左子树</span><br>            stack.<span class="hljs-title function_">push</span>(cur);<br>            cur = cur.<span class="hljs-property">left</span>;<br>        &#125;<br>        <span class="hljs-comment">// 出栈的是无左子树的节点,因为没有左子树入栈才会走到这里</span><br>        cur = stack.<span class="hljs-title function_">pop</span>();<br>        ans.<span class="hljs-title function_">push</span>(cur.<span class="hljs-property">val</span>);<br>        <span class="hljs-comment">// 没有左子树，并且根被记录后右子树入栈（整棵树的右子树——整体左根右）</span><br>        cur = cur.<span class="hljs-property">right</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>    <span class="hljs-comment">// 内层循环在判断左子树的存在</span><br>    <span class="hljs-comment">// 外层循环在判断右子树的存在</span><br>    <span class="hljs-comment">// 根是否出栈取决于节点是否还有左子树，因为顺序为左根右</span><br>    <span class="hljs-comment">// 当节点没有左子树时可以出栈根</span><br>    <span class="hljs-comment">// 当无右子树,但栈未空时,是当前节点处理完毕,向父节点前进</span><br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">TreeNode</span>&#125; <span class="hljs-variable">root</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">number[]</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> postorderTraversal = <span class="hljs-keyword">function</span>(<span class="hljs-params">root</span>) &#123;<br>    <span class="hljs-comment">// 迭代</span><br>    <span class="hljs-keyword">var</span> stack = [], ans = [], cur = root;<br>    <span class="hljs-keyword">while</span> (cur || stack.<span class="hljs-property">length</span>) &#123;<br>        <span class="hljs-comment">// 整体顺序是依次将所有左子树入栈、所有右子树入栈</span><br>        <span class="hljs-comment">// 右子树入栈取决于栈顶元素是否有右子树</span><br>        <span class="hljs-comment">// 因为只有当cur有值时才会发生入栈操作</span><br>        <span class="hljs-comment">// 而当栈顶元素存在右子树时会将右子树赋予cur促使右子树的入栈</span><br>        <span class="hljs-keyword">while</span> (cur) &#123;<br>            stack.<span class="hljs-title function_">push</span>(cur);<br>            <span class="hljs-comment">// 无论是否当前节点有左子树,都要将当前节点左子树赋值给游标</span><br>            <span class="hljs-comment">// 这样才能造成cur为null,以跳出左子树遍历循环</span><br>            cur = cur.<span class="hljs-property">left</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (stack[stack.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>].<span class="hljs-property">right</span>) &#123;<br>            <span class="hljs-comment">// 因为外层循环条件是当前游标有值或栈不空</span><br>            <span class="hljs-comment">// 所以可以将栈顶元素右子树赋予当前游标,然后将栈顶元素右子树致为null</span><br>            <span class="hljs-comment">// 这里取了栈顶元素右子树,但没发生出栈行为</span><br>            cur = stack[stack.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>].<span class="hljs-property">right</span>;<br>            <span class="hljs-comment">// 因为一旦给 cur 手动赋值栈顶右子树后，下一次再走到这里的if判断时需要绕开(否则会进入这里)</span><br>            <span class="hljs-comment">// 所以这里给if的判断条件致为null</span><br>            stack[stack.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>].<span class="hljs-property">right</span> = <span class="hljs-literal">null</span>;<br>            <span class="hljs-comment">// 这里相当于把树拆分开了,把右子树拆了出来</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 走到这里说明当前节点既没左子树</span><br>            <span class="hljs-comment">// (上面的内层循环把所有左子树入栈,当没有左子树可入栈时才继续往下走)</span><br>            <span class="hljs-comment">// 也没右子树</span><br>            <span class="hljs-comment">// 这里是以&quot;左右根&quot;的根身份进入结果集的</span><br>            ans.<span class="hljs-title function_">push</span>(stack.<span class="hljs-title function_">pop</span>().<span class="hljs-property">val</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为什么程序员要学习计算机基础知识</title>
    <link href="/wilson-blog-hexo/2020/04/02/%E4%B8%BA%E4%BB%80%E4%B9%88%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A6%81%E5%AD%A6%E4%B9%A0%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/wilson-blog-hexo/2020/04/02/%E4%B8%BA%E4%BB%80%E4%B9%88%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A6%81%E5%AD%A6%E4%B9%A0%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<p>因为一道leetcode题而引发的思考。</p><span id="more"></span><p>程序员都说自己平时日常的工作就是搬砖，后端说自己就是写写CRUD，前端说自己就是对着设计稿调调CSS参数。但这样永远都无法向高级工程师岗位迈进，也就是业界所说的三年一大坎。如果你工作了三年，还依旧被迫或迷恋于做这些事情，那你的工资仍然没有长进也是没有理由抱怨的。</p><p><img src="https://user-images.githubusercontent.com/23159565/80950472-81753680-8e28-11ea-817b-3a1ab404d649.png" alt="image"></p><p>那么如何区分一个程序员的水平在一个什么级别上呢，关键的一个指标就是对算法的掌握程度，这就涉及到标题中所说的计算机基础知识。如果你是一个计算机相关专业毕业的本科生，你应该听过或学过《高等数学》和《线性代数》这两门课。当学生的时候你可能会觉得学习这东西对我以后工作有啥用呢，下面我们就来举个例子证明这些理论知识对编程具体有什么用。</p><p>假如给你一个非空数组（注意哦是非空，不需要考虑判空），然后里面是N个无序的整数，其中只有一个数只出现了一次，其他的都出现了两次，现在让你找出这个只出现过一次的数。</p><p>那么现在你可能打开IDE就开始敲，这问题很常见啊，我遍历一下数组，依次把元素放到另一个空数组中，遇到不存在于新数组的元素，我就扔进去，遇到已经存在于新数组的，那我就不往新数组扔了，而且我还要把新数组里这个数丢出来，因为它不是我要找的只出现过一次的数，等遍历结束，自然最后新数组就只剩下那个只出现过一次的数了。好，那么用代码写出来：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> singleNumber = <span class="hljs-keyword">function</span>(<span class="hljs-params">nums</span>) &#123;<br>   <span class="hljs-keyword">var</span> list = [];<br>   <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-property">length</span>; i++) &#123;<br>       <span class="hljs-keyword">if</span> (list.<span class="hljs-title function_">indexOf</span>(nums[i]) &lt; <span class="hljs-number">0</span>) &#123;<br>           list.<span class="hljs-title function_">push</span>(nums[i]);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>           list.<span class="hljs-title function_">splice</span>(list.<span class="hljs-title function_">indexOf</span>(nums[i]), <span class="hljs-number">1</span>);<br>      &#125;<br>  &#125;<br>   <span class="hljs-keyword">return</span> list[<span class="hljs-number">0</span>];<br>&#125;;<br></code></pre></td></tr></table></figure><p>实现了，但是有什么问题呢？这时候就是第一个区分程序员水平的分水岭</p><p>普通程序员会觉得这方法很好，代码简洁、易懂、好维护，然后就提交代码了，剩下的交给测试，提了bug再解决就好了</p><p>那么这样的程序员如果不是到某一天突然觉悟，如此下去，就会变成业界所说的那种“工作三年但只有一年经验”的人。想要自我救赎，不沦为咸鱼应该怎么办呢？写完这段代码，你盯着它再看看，用批判性的眼光挑挑毛病。或许你就会发现，如果我们要找的数在数组的最后一个，那你前面的数组遍历、数组插入、数组移出的操作就都是在浪费计算机的时间和资源。如果这个待处理的数组有几百万几千万的长度呢，那你要拿到结果可能就会感觉你的电脑卡住了一样，其实它在疯狂地运行你写的代码，去找到结果，只不过在找到结果之前它在疯狂地写操作、读操作，么得办法。</p><p>这就是你导致的啊，你写的表面看上去岁月静好的程序放到实际应用中去跑，有可能就被用户吐槽是辣鸡的APP。那么想要对得起起公司产品的质量，又想提高自己作为程序员的编程能力，我们再来品这段代码，细细地品。</p><p><code>if (list.indexOf(nums[i]) &lt; 0) </code>这里虽然是用语言内置方法，看似没有遍历数组，但实际上是不是又得从头到尾遍历一遍数组才能给出这个判断结果，于是你在<code>for (var i = 0; i &lt; nums.length; i++)</code>的每一次里面又循环了一编数组，这就是所谓的时间复杂度为 O(n的平方)，想一下，是不是这样，假如要找的数在数组的最后一个，你就要遍历数组N次，每一次遍历过程中还要再遍历N次，外层套内层，结果就是遍历操作执行了N * N次。那么有没有什么办法可以优化循环内部的这个查找操作呢。</p><p>编程语言中是不是不只有数组这种存储结构，不要需求告诉我们要处理数组，我们就用数组去思考，编程语言本身提供了很多强有力的基础工具，数组只是最普通的数据结构，那还有一种可以快速查找的数据结构是什么呢？</p><p>就是字典，意如其名，我们如果使用一个字典找某个字，是不是通过索引目录就可以快速翻到某页找到要找的字，而不是像字谱一样从头到尾找一遍。</p><p>那么我们试着把<code>if (list.indexOf(nums[i]) &lt; 0)</code>这部分用字典替换掉</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> map = &#123;&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-property">length</span>; i++) &#123;<br>   <span class="hljs-keyword">if</span> (map[nums[i]]) &#123;<br>       <span class="hljs-keyword">delete</span> map[nums[i]];<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>       map[nums[i]] = <span class="hljs-number">1</span>;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(map)[<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><p>程序的运行变得稍微快了一点，并且没有影响程序的可读性，只是巧用了不同的数据结构，这是一名中级程序员应该做到的。</p><p>那么有没有更厉害的办法呢，这时就是所谓大牛的思路了（是时候展现真正的技术了！）大牛都是学过高数的，而且能把高数中的知识实实在在用到编程中的（不然怎么说学数学的如果转行做程序员，起步就很高，很多时候大家都是知道一些事实，但是不知道为什么，当你知道足够多的场景后你就会知道为什么）</p><p>看一下这个数学公式<code>2 * （a + b + c） - （a + a + b + b + c） = c </code>是不是很简单，但是这公式里就藏着我们这道题的答案。不捉迷藏，解释一下，我们换个好理解的场景，给你N个物品，然后这里面只有一种类型数量为1，其他类型的数量都为2，那么你把所有类型加起来再乘2是不是就会比所有物品加起来多出那个只有一个的物品。（原谅我已经尽力了，这个例子也能解释为什么教别人和自己理解东西的难度不能相提并论，因为你理解一个东西，也许某个点你就顿悟了，但你要把你理解的东西清晰传达给别人，你需要想出足够简洁又有说服力的例子来让别人也能通过看你举得例子就能明白你想讲的东西，而且不同听者在听同样的东西时，达到理解的时机也不同。教授不是件容易的事，不然就不会有老师的水平参差不齐了，有时候你学不懂一个东西，也许不是你理解能力的问题，而是你的老师讲解能力的问题）</p><p>那么我们根据这个数学公式编写出如下的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> sumOfNums = <span class="hljs-number">0</span>, sumOfSet = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">var</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; nums[i]; i++) &#123;<br>   <span class="hljs-keyword">if</span> (set.<span class="hljs-title function_">has</span>(nums[i])) &#123;<br>       sumOfSet += nums[i];<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>       set.<span class="hljs-title function_">add</span>(nums[i]);<br>       sumOfNums += nums[i];<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这就是单纯利用数学公式得出的结果，感受到数学的力量了吗。</p><p>但这也没多厉害，因为数学的本质是通过挖掘规律总结出一系列的公式，从而使得计算变得更快，但数学没有数据结构的概念，也就是数学的公式是不提供存储功能，只是一个公式，你给它输入，它给你结果。</p><p>这就要提到计算机为什么会成为第三次工业革命的标志物了，因为计算机不仅可以把人类交给它的公式用电来计算出来，它还可以提供存储。</p><p><img src="https://user-images.githubusercontent.com/23159565/80950478-85a15400-8e28-11ea-9ae4-2915d800f327.png" alt="image"></p><p>存储这个词对于学过计算机的人太熟悉了，从操作系统中学过计算机基本组成中就包括存储，其中包含硬盘用于固定存储随机的数据，即RAM，内存条用于存储计算机运行时的过程数据，即ROM，这是物理层面上的存储。</p><p>还有宏观上的存储，比如数据库，用于存储计算机运行产生的数据，对于软件，也就是保存我们使用计算机所产生的一切内容，包括我此时写的这些文字，以及我是谁，我是在什么时间写的这篇文章，还有我的修改时间，修改过几次，这些都存储在数据库中。最初在没有计算机的时候，我们所使用的计算器，也曾提供过存储功能（我指的是30块钱以上的那种按键很多的计算器），可能有人没用过，但我当时发现它可以把135 + 324的结果先存储到一个存储器中，然后我再读取存储器中的内容继续去乘3256，因为计算器是顺序输入的，所以如果你直接输入135 + 324 x 3256，会按照输入顺序计算，也就是会先计算加法，但我们知道这是不对的，当然你也可以使用括号，或者把中间过程记在纸上，我只是举个例子解释当时的计算器就已经有了设计存储这个概念，但其只能说是帮助人类生活加速的一个尝试。</p><p><img src="https://user-images.githubusercontent.com/23159565/80950486-8afe9e80-8e28-11ea-95fd-12a24215a675.png" alt="image"></p><p>到后来计算机普及，才真正加速了人们的生活，它把前面铺好的路都整合了起来，成为一个功能巨大的机器。此时应该插播一句每个计算机专业学生都听过的话“编程&#x3D;算法+数据结构”，到这里你应该知道为什么不是只有算法或只有数据结构。因为只有算法，你无法存储过程数据，而只有数据结构，你无法利用更优秀的数学公式，所以二者结合才是利用计算机为你做事的最佳实践。其产物也就是程序，通过编程所产生，有了程序，人们通过计算机才诞生今天的千姿百态的玩法。</p><p>好了，继续说这个例子，第三种解法利用数学公式，虽然更巧妙，但实际对于计算机运行来说，并没有变得更快，也没有节省内存。</p><p>那么我们想想还有没有其他解法，这就要利用文首提到的另一门计算机课程《线性代数》了，这门课是只针对于计算机专业的，虽然名字里有代数，听着像数学相关的课程，但其讲的内容都是计算机里的数学，说白了就是计算机的核心基本——二进制运算。</p><p>可能稍微了解过的人都知道，电脑虽然功能这么多，但它还是靠电运行的，也就是第三次工业革命是在第二次工业革命的基础上发展而出的，如果没有电，第三次工业革命的一切产物都是空谈，无法运作。你把你家电闸拉了，你看你还能玩游戏吗，你还能看视频听歌吗，都不能。</p><p>计算机是如何利用电实现了这么多功能呢，其实就回到了初中物理——通路和短路，电路正常接电就是通路，电路中间有断开的部分，整个电路都不工作，就是断路，这就是二进制的理论基础，计算机就是通过不断地组合线路板上数量非常庞大的电子元件实现了不同的逻辑组合，那数量有多庞大呢，一开始是没多大的，所以电脑所产生的功能也有限，但后来有了集成电路，计算机主板上能放的电子元件数量爆炸性增长，电脑的功能随之变得越来越多。甚至有一个叫摩尔的外国人提出“集成电路上可容纳的晶体管数量，约每隔两年就会增加一倍”（摩尔定律）这样的预言，这个预言到现在都一直没被打破，的确是按照这个规律发展的。</p><p><img src="https://user-images.githubusercontent.com/23159565/80950500-918d1600-8e28-11ea-85bb-a0e21084dc92.png" alt="image"></p><p>这样我们就好理解为什么在今天有了人工智能、大数据，为什么阿尔法狗可以在围棋上战胜人类，答案就是因为同样大小的一台电脑，每过两年，其功能数量就能翻倍，其计算能力地增长更是不可预测。这样就把计算机从组成到发展串起来了，这样再来看看今天你手中的手机，手机中的APP，是不是就更好理解了。</p><p><img src="https://user-images.githubusercontent.com/23159565/80950509-95b93380-8e28-11ea-85b6-7d2d772b6992.png" alt="image"></p><p>那么回归正题，我们看看线性代数是怎么用于日常编程的，线性代数里有一种很强但是稍微有些难理解的运算叫做“异或”，我们试着从名字拆解以理解，“异或”即“不同”+“或”，或运算是线性代数中的基本运算，比如1或0就是1，0或0还是0，1或1也是1，0或1即是1，有没有发现规律，这就是初中物理中的并联，如果两条电路是并联的，其中一条电路断掉是不影响整个电路通电的，这相当于什么呢，就相当于备用电器，你用两个插板都接着电，其中一个坏掉是不会影响你正常用电的，代码中也常见，比如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (a || b) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hello world&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码中a或b有一个为真，就会打印出“hello world”。当然，程序员看到这里还会指出一个知识点就是如果a已经是真了，那么计算机就不会再去看b是否为真了，就直接打印“hello world”了，俗称“断路”，即或操作中先为真的数会导致后面判断断掉而不去进行判断。当然，这都是程序员关心的小知识了，无足挂齿。</p><p>那么我们继续看“异或”，先说结果，”异或“意味着两个数相同的时候结果就为假，而不同的时候则为真，即1异或0是1，0异或1也是1，但1异或1是0，0异或0也是0，纵观其规律就是两个字”拧巴“，就是两个数闹别扭，我偏不和你一样，这也符合当今时代年轻人的个性，不喜欢苟同，喜欢个性，与众不同。这样记“异或”就够了，就不用去咬文嚼字理解为什么这样的操作叫“异或”，记住“异或”重点在于“ 异”。只要“异”了就是真，“异”了就像在做“或”操作了，而“或”操作的精髓在于“有真则真”（后面这段解释可以不看，免得产生误导）</p><p>那么怎么利用”异或计算“这个东西呢，有以下这样的推导公式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">a ^ <span class="hljs-number">0</span> == a<br>a ^ a == <span class="hljs-number">0</span><br>a ^ b ^ a == a ^ a ^ b == <span class="hljs-number">0</span> ^ b == b<br></code></pre></td></tr></table></figure><p>一个数和0进行异或操作，如果这个数是0，那么结果为0，因为0异或0是0，那么结果是不是就和这个数相同了，如果这个数不是0呢，那就和0不同，结果就是这个数了；那如果这个数和自身进行异或操作呢，那永远是0，因为和自身异或，相当于两个相同的数进行异或；同时多个数进行异或操作允许交换顺序，利用交换顺序，结合上面两个规律，便得出如果有两个相同的数和一个只出现一次的数进行异或操作，最后得出的便是那个只出现过一次的数，也就是本题的解。</p><p>那我们只需要依次将数组的每个数都进行异或操作，即能得到那个”另类“的数，但给我们的是一个数组，我们只能依次遍历每一个数，那么如何记住上一次两个数的遍历结果呢，我们可以用一个变量存储这个值，那么这个数初始化为多少合适呢，只能是0，假如是别的数，比如是1，那么数组第一个数如果是1，那么第一次异或结果就是0，这样外部数据影响了数组内部数据的异或结果。但如果我们把外部变量初始化为0，那么数组第一个数无论是几，第一次的异或结果都是数组第一个数本身，因为有理论做支撑（a异或0等于a）。因为所给数组中只存在出现两次的数和一个只出现一次的数，所以结果必然符合我们的异或推到公式（a ^ b ^ a &#x3D;&#x3D; a ^ a ^ b &#x3D;&#x3D; 0 ^ b &#x3D;&#x3D; b），即多个出现两次的数和一个单独的仅出现一次的数在一次，都进行异或，顺序无所谓，最后只等于那个只出现一次的数。</p><p>最终代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-property">length</span>; i++) &#123;<br>   a = a ^= nums[i]<br>&#125;<br><span class="hljs-keyword">return</span> a<br></code></pre></td></tr></table></figure><p>这样地计算既利用了计算机的数据结构，也利用到了算法，是应该优先考虑的解法，至于代码可读性自然没有前面的容易理解，这就要求编程人员掌握足够的计算机基础知识，知道什么”异或“操作，以及”异或“操作可以推导多个数进行”异或“的规律，而“异或”的知识就藏在《线性代数》那本书中。（这里我也不是推荐程序员都去写一些晦涩难懂的代码，从而其他和你水平不相当的人接手骂爹，因为看不懂你写的东西而全部重写。我们提供的是一种思路，作为程序员，应该拥有程序员精神，即是要有意识地提高你程序运行的速度，并使用尽可能少的内存资源，这种追求极致的精神其实在任何行业都是高手的基本素养）</p><p><img src="https://user-images.githubusercontent.com/23159565/80950521-994cba80-8e28-11ea-908e-b0a8ec4216c1.png" alt="image"></p><p>总算是首尾呼应，自圆其说了。曾经有很多人说大学学习的东西和毕业后工作的内容没什么联系，也就是大学学的东西都没什么用。我也曾慢慢加入到这样的呼声中，但可能再过一个阶段，你回过头再去看一切，也许就会理解到这世上不可能存在没有任何联系的事物，一切都在一个大的网络联络之中。如果你觉得两个事情没有任何联系，那可能只是你还没找到联络其两物之间的那复杂的联系。</p><p>虽然标题是说计算机基础知识，但是字里行间插播了很多其他的内容，这也是为什么我把此文发在这里，而不是技术论坛，因为它的定位是杂谈，不算是技术文章，面向群体也是大众，所以尽量把很多计算机专业知识用白话解释，而不是一带而过。</p>]]></content>
    
    
    <categories>
      
      <category>总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>重新介绍JavaScript</title>
    <link href="/wilson-blog-hexo/2020/03/15/%E9%87%8D%E6%96%B0%E4%BB%8B%E7%BB%8DJavaScript/"/>
    <url>/wilson-blog-hexo/2020/03/15/%E9%87%8D%E6%96%B0%E4%BB%8B%E7%BB%8DJavaScript/</url>
    
    <content type="html"><![CDATA[<p>读 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript">重新介绍 JavaScript（JS 教程）</a> 一文整理的脑图</p><span id="more"></span><p><img src="https://user-images.githubusercontent.com/23159565/80954400-dd8f8900-8e2f-11ea-8bae-afe349796bad.png" alt="重新介绍JavaScript （JS教程）"></p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>三大框架对比</title>
    <link href="/wilson-blog-hexo/2020/03/09/%E4%B8%89%E5%A4%A7%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/"/>
    <url>/wilson-blog-hexo/2020/03/09/%E4%B8%89%E5%A4%A7%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/</url>
    
    <content type="html"><![CDATA[<p>前端三大框架有什么不同</p><span id="more"></span><table><thead><tr><th align="center"></th><th align="center">angular</th><th align="center">Vue</th><th align="center">React</th></tr></thead><tbody><tr><td align="center">开发者</td><td align="center">谷歌</td><td align="center">Evan You</td><td align="center">Facebook</td></tr><tr><td align="center">时间</td><td align="center">2010</td><td align="center">2014</td><td align="center">2013</td></tr><tr><td align="center">当前版本</td><td align="center">9</td><td align="center">2.6.x</td><td align="center">16.x</td></tr><tr><td align="center">使用者</td><td align="center">谷歌</td><td align="center">Facebook、Uber</td><td align="center">阿里、Gitlab</td></tr><tr><td align="center">语言</td><td align="center">ts</td><td align="center">vue3计划引入ts</td><td align="center">Facebook</td></tr><tr><td align="center">重大变化</td><td align="center">2016年的Angular2，去掉了名字AngularJS的JS</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">变动性</td><td align="center">每6个月一次主要更新</td><td align="center"></td><td align="center">注重稳定性，因为twitter和airbnb在用</td></tr><tr><td align="center">组件</td><td align="center">被称为指令，只是DOM元素上的标记，Angular可以追踪并附加特定的行为。Angular将组件的UI部分分离为HTML标记的属性，并将它们的行为以js代码的形式表示出来</td><td align="center">高度自定义，允许组合UI和行为，也支持使用预处理器取代CSS，便于集成其他库，例如Bootstrap</td><td align="center">组合了UI和行为，同样一块代码同时负责创建UI元素和指示它的行为</td></tr><tr><td align="center">学习曲线</td><td align="center">陡峭，是一个完整的解决方案，需要学习ts和MVC等概念，投资回报在于可以理解程序前端是怎样工作的</td><td align="center">提供高度自定义性，学习更容易，也因此允许丑代码，会导致代码调试和测试困难</td><td align="center">不是完整的框架，高级功能需要第三方库，所以学习使用React并不意味着你在使用最佳实践</td></tr><tr><td align="center">总结</td><td align="center">最成熟，后台支持良好，完整的包。但是陡峭的学习曲线劝退了很多初学者。适用于大型项目，或已经在使用ts的团队</td><td align="center">新成员，没有公司做支撑，但过去几年已经做的足够好，中国大公司在用，未来可期。适合喜欢简洁灵活的人群</td><td align="center">足够成熟，拥有大量社区贡献者，具备广泛的接受度。工作市场好，前途一片光明。适用于初次学习前端框架的人，并且它和其他框架的集成能力适合喜欢代码灵活性的人</td></tr><tr><td align="center">Watchers</td><td align="center">3.2K</td><td align="center">6K</td><td align="center">6.6K</td></tr><tr><td align="center">Stars</td><td align="center">57K</td><td align="center">157K</td><td align="center">144K</td></tr><tr><td align="center">Forks</td><td align="center">15.9K</td><td align="center">23.7K</td><td align="center">27.6K</td></tr><tr><td align="center">贡献者</td><td align="center">1089</td><td align="center">289</td><td align="center">1361</td></tr></tbody></table><p><img src="https://user-images.githubusercontent.com/23159565/80953949-0f542000-8e2f-11ea-95a5-b6aef13fa37f.png" alt="image"></p><p><a href="https://www.codeinwp.com/blog/angular-vs-vue-vs-react/">参考</a></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>zIndex</title>
    <link href="/wilson-blog-hexo/2020/01/20/zindex/"/>
    <url>/wilson-blog-hexo/2020/01/20/zindex/</url>
    
    <content type="html"><![CDATA[<h1 id="z-index"><a href="#z-index" class="headerlink" title="z-index"></a>z-index</h1><ul><li><a href="https://zhuanlan.zhihu.com/p/66677661">小知识: 关于z-index的最大值</a></li></ul><p></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">2147483647</span><br></code></pre></td></tr></table></figure><p>记住这个值，win32下int的最大值</p><p>2 1 4 7 4  8 3 6 4 7 ！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>反转数组</title>
    <link href="/wilson-blog-hexo/2020/01/15/revert-array/"/>
    <url>/wilson-blog-hexo/2020/01/15/revert-array/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * [ 吃瓜][ 加油][ 汗][ 天啊][ Emm][ 社会社会][ 旺柴][ 好的][ 打脸][ 哇]</span><br><span class="hljs-comment"> * 这样一个字符串能不能去掉其中所有的空格</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">removeBlanks</span>(<span class="hljs-params">target</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;处理前：&#x27;</span> + target);<br>  <span class="hljs-keyword">const</span> result = target.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\s/g</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;处理后：&#x27;</span> + result);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;原数据：&#x27;</span> + target);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * [吃瓜][加油][汗][天啊][Emm][社会社会][旺柴][好的][打脸][哇]</span><br><span class="hljs-comment"> * 能不能把顺序调过来变成</span><br><span class="hljs-comment"> * [哇][打脸][好的][旺柴][社会社会][Emm][天啊][汗][加油][吃瓜]</span><br><span class="hljs-comment"> * 空间复杂度较差，使用了两个栈</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">revert</span>(<span class="hljs-params">target</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;处理前：&#x27;</span> + target);<br>  <span class="hljs-keyword">let</span> stack = [];<br>  <span class="hljs-keyword">let</span> newStack = [];<br>  target.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">char</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 识别到关闭符且栈中有开始符则出栈</span><br>    <span class="hljs-keyword">if</span> (char === <span class="hljs-string">&#x27;]&#x27;</span> &amp;&amp; stack.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;[&#x27;</span>)) &#123;<br>      stack.<span class="hljs-title function_">push</span>(char);<br>      <span class="hljs-comment">// 将字符组装成字符串，从二维数组头部装入</span><br>      newStack.<span class="hljs-title function_">unshift</span>(stack.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>));<br>      <span class="hljs-comment">// 关键步骤：清空栈，否则每一次向二维数组装入时都冗余之前装过的数据</span><br>      stack.<span class="hljs-property">length</span> = <span class="hljs-number">0</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      stack.<span class="hljs-title function_">push</span>(char);<br>    &#125;<br>  &#125;)<br>  <span class="hljs-keyword">let</span> result = <span class="hljs-string">&#x27;&#x27;</span>;<br>  <span class="hljs-keyword">if</span> (newStack.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>    result = newStack.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>  &#125;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;处理后：&#x27;</span> + result);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;原数据：&#x27;</span> + target);<br>&#125;<br><br><span class="hljs-comment">// 程序入口</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;[ 吃瓜][ 加油][ 汗][ 天啊][ Emm][ 社会社会][ 旺柴][ 好的][ 打脸][ 哇]&#x27;</span>;<br>  <span class="hljs-comment">// removeBlanks(str);</span><br>  <span class="hljs-comment">// 处理前：[ 吃瓜][ 加油][ 汗][ 天啊][ Emm][ 社会社会][ 旺柴][ 好的][ 打脸][ 哇]</span><br>  <span class="hljs-comment">// 处理后：[吃瓜][加油][汗][天啊][Emm][社会社会][旺柴][好的][打脸][哇]</span><br>  <span class="hljs-comment">// 原数据：[ 吃瓜][ 加油][ 汗][ 天啊][ Emm][ 社会社会][ 旺柴][ 好的][ 打脸][ 哇]</span><br>  <span class="hljs-keyword">var</span> str2 = <span class="hljs-string">&#x27;[吃瓜][加油][汗][天啊][Emm][社会社会][旺柴][好的][打脸][哇]&#x27;</span>;<br>  <span class="hljs-title function_">revert</span>(str2);<br>  <span class="hljs-comment">// 处理前：[吃瓜][加油][汗][天啊][Emm][社会社会][旺柴][好的][打脸][哇]</span><br>  <span class="hljs-comment">// 处理后：[哇][打脸][好的][旺柴][社会社会][Emm][天啊][汗][加油][吃瓜]</span><br>  <span class="hljs-comment">// 原数据：[吃瓜][加油][汗][天啊][Emm][社会社会][旺柴][好的][打脸][哇]</span><br>&#125;<br><span class="hljs-title function_">main</span>();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>滑动穿透（遮罩下不允许滑动）</title>
    <link href="/wilson-blog-hexo/2020/01/15/scroll-strike/"/>
    <url>/wilson-blog-hexo/2020/01/15/scroll-strike/</url>
    
    <content type="html"><![CDATA[<h1 id="滑动穿透"><a href="#滑动穿透" class="headerlink" title="滑动穿透"></a>滑动穿透</h1><h2 id="情况列举"><a href="#情况列举" class="headerlink" title="情况列举"></a>情况列举</h2><ol><li>body无滚动，弹层无滚动</li><li>body无滚动，弹层有滚动</li><li>body有滚动，弹层无滚动</li><li>body有滚动，弹层有滚动</li></ol><h3 id="body无滚动，弹层无滚动"><a href="#body无滚动，弹层无滚动" class="headerlink" title="body无滚动，弹层无滚动"></a>body无滚动，弹层无滚动</h3><p>弹层出现时，body置为超出隐藏，固定布局，弹层关闭后恢复</p><p>打开弹层</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">layer.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;block&#x27;</span>;<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">style</span>.<span class="hljs-property">overflow</span> = <span class="hljs-string">&#x27;hidden&#x27;</span>;<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">style</span>.<span class="hljs-property">position</span> = <span class="hljs-string">&#x27;fixed&#x27;</span>; <span class="hljs-comment">// 【弊端】因为加了fixed，就会自动回滚到顶部</span><br></code></pre></td></tr></table></figure><p>关闭弹层</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">layer.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span>;<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">style</span>.<span class="hljs-property">overflow</span> = <span class="hljs-string">&#x27;auto&#x27;</span>;<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">style</span>.<span class="hljs-property">position</span> = <span class="hljs-string">&#x27;static&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>用户在超出一屏高度的位置点开弹层，页面会因为fixed布局回到顶部</p><h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>可使用swiper控制页面一页一屏</p><h3 id="body无滚动，弹层有滚动"><a href="#body无滚动，弹层有滚动" class="headerlink" title="body无滚动，弹层有滚动"></a>body无滚动，弹层有滚动</h3><p>弹层出现时，body置为超出隐藏，固定布局，样式中增加允许滑动，弹层关闭后恢复</p><p>打开弹层</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">layer.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;block&#x27;</span>;<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">style</span>.<span class="hljs-property">overflow</span> = <span class="hljs-string">&#x27;hidden&#x27;</span>;<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">style</span>.<span class="hljs-property">position</span> = <span class="hljs-string">&#x27;fixed&#x27;</span>; <span class="hljs-comment">// 【弊端】因为加了fixed，就会自动回滚到顶部</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">overflow-y</span>: scroll;<br>-webkit-<span class="hljs-attribute">overflow</span>-scrolling: touch;  <span class="hljs-comment">/* 解决在IOS上滚动惯性失效的问题 */</span><br></code></pre></td></tr></table></figure><p>关闭弹层</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">layer.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span>;<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">style</span>.<span class="hljs-property">overflow</span> = <span class="hljs-string">&#x27;auto&#x27;</span>;<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">style</span>.<span class="hljs-property">position</span> = <span class="hljs-string">&#x27;static&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h4><p>滑动到页面顶部或底部时仍会发生穿透</p><h4 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h4><p>当滑动到边界时禁止滑动</p><h3 id="body有滚动，弹层无滚动"><a href="#body有滚动，弹层无滚动" class="headerlink" title="body有滚动，弹层无滚动"></a>body有滚动，弹层无滚动</h3><p>阻止弹层的touchmove事件默认行为</p><h3 id="body有滚动，弹层有滚动"><a href="#body有滚动，弹层有滚动" class="headerlink" title="body有滚动，弹层有滚动"></a>body有滚动，弹层有滚动</h3><p>检测touchmove事件，如果touch的目标是弹窗不可滚动区域（背景蒙层）就禁掉默认事件，反之就不做控制</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.cnblogs.com/padding1015/p/10568070.html">滚动穿透的6种解决方案【已自测】</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>mpvue刷新问题</title>
    <link href="/wilson-blog-hexo/2020/01/10/mpvue/"/>
    <url>/wilson-blog-hexo/2020/01/10/mpvue/</url>
    
    <content type="html"><![CDATA[<h3 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h3><p><code>mpvue</code>小程序迁移为<code>uniapp</code>项目<code>A</code>(用于标识项目)，同时编译部署微信小程序和微信服务号<code>H5</code></p><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>页面刷新时会导致<code>vuex</code>内状态失效，但不准备在页面刷新前将<code>vuex</code>备份到<code>localStorage</code>等临时存储方式</p><p>由于小程序使用开发者工具刷新时会回到项目首页（pages中的第一个索引），于是将<code>H5</code>交互保持与小程序一致，使用微信内置刷新时项目跳转回首页。</p><p>处理方式为：</p><p>在App.vue的<code>onLaunch</code>（项目生命周期）中增加以下逻辑</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// #ifdef H5</span><br><span class="hljs-keyword">const</span> visit = <span class="hljs-variable language_">sessionStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;appvue&#x27;</span>);<br><span class="hljs-keyword">if</span> (visit === <span class="hljs-string">&#x27;true&#x27;</span>) &#123;<br>  wx.<span class="hljs-title function_">reLaunch</span>(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/pages/home/home&#x27;</span><br>  &#125;);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-variable language_">sessionStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;appvue&#x27;</span>, <span class="hljs-literal">true</span>);<br>&#125;<br><span class="hljs-comment">// #endif</span><br></code></pre></td></tr></table></figure><p>代码解释：</p><p>条件编译控制此逻辑仅在H5编译方式下生效</p><p>使用<code>sessionStorage</code>判断页面是否在进行刷新操作（在一次会话中，第一次进入项目时存储一个状态<code>appvue</code>，当使用微信浏览器内置刷新操作时，会话未过时，但项目会重新触发项目生命周期<code>onLaunch</code>，此时发现<code>sessionStorage</code>中包含<code>appvue</code>的状态，则执行页面跳回首页的交互）</p><p>但项目中存在<code>webview</code>组件</p><p>当项目中某个页面通过<code>webview</code>组件打开部署在另一个地方的<code>H5</code>项目B页面时，存在以下交互：</p><p><code>B</code> (webview)某页面点击按钮跳转到 <code>A</code> (小程序&#x2F;H5)的页面，点击返回，会直接以访问 <code>A</code> 项目公网地址的方式进行跳转（类似<code>https://www.xxx.com/A</code>）</p><p>此时跳回 <code>A</code> 会触发项目 <code>A</code> 的 <code>App.vue</code> 中的 <code>onLaunch</code> （项目生命周期）执行，但会话未过时，会触发跳转首页的逻辑，导致因为从 <code>webview</code> 跳转到项目 <code>A</code> 而跳回项目首页，而不是指定的路由，故存在问题。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h4><p>在 <code>webview</code> 组件加载时去掉 <code>sessionStorage</code> 中的标识，这样当从 <code>webview</code> 访问项目 <code>A</code> 时不会刷新回首页</p><p>web-view.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">onLoad</span>(<span class="hljs-params">query</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">url</span> = <span class="hljs-built_in">decodeURIComponent</span>(query.<span class="hljs-property">url</span>)<br>    <span class="hljs-keyword">const</span> visit = <span class="hljs-variable language_">sessionStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;appvue&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (visit === <span class="hljs-string">&#x27;true&#x27;</span>) &#123;<br>      <span class="hljs-variable language_">sessionStorage</span>.<span class="hljs-title function_">removeItem</span>(<span class="hljs-string">&#x27;appvue&#x27;</span>);<br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">onLaunch</span>(<span class="hljs-params">e</span>) &#123;<br>  <span class="hljs-comment">// #ifdef H5</span><br>  <span class="hljs-keyword">const</span> visit = <span class="hljs-variable language_">sessionStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;appvue&#x27;</span>);<br>  <span class="hljs-keyword">if</span> (visit === <span class="hljs-string">&#x27;true&#x27;</span>) &#123;<br>      wx.<span class="hljs-title function_">reLaunch</span>(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/pages/home/home&#x27;</span><br>      &#125;);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable language_">sessionStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;appvue&#x27;</span>, <span class="hljs-literal">true</span>);<br>  &#125;<br>  <span class="hljs-comment">// #endif</span><br>&#125;<br></code></pre></td></tr></table></figure><p>方案问题</p><p>从 <code>webview</code> 访问项目 <code>A</code> ，<code>App.vue</code> 执行 <code>onLaunch</code> 时不会跳转首页，但会记录 <code>appvue</code> ，此时页面返回到 <code>webview</code> 后再次进入，<code>sessionStorage</code> 检测到 <code>appvue</code> 有值，则仅第一次进入 <code>A</code> 时不会跳转首页，返回再进入时还是会跳转</p><h4 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h4><p>维护一个白名单，内容是在 <code>webview</code> 中访问的 <code>A</code> 项目路由，放行不进行跳转首页</p><p>App.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">methods</span>: &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 是否是从webview进行跳转的页面</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span> 是否进行跳转</span><br><span class="hljs-comment">    */</span><br>  <span class="hljs-title function_">pagesFromWebview</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-keyword">let</span> skipFlag = <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">// 维护白名单控制在webview中访问的页面不做回到首页的跳转</span><br>    <span class="hljs-keyword">const</span> notFreshPages = [<br>      <span class="hljs-string">&#x27;iou-reason&#x27;</span>, <br>      <span class="hljs-string">&#x27;upload-reason-imgs&#x27;</span>, <br>      <span class="hljs-string">&#x27;info-fill&#x27;</span>, <br>      <span class="hljs-string">&#x27;iou-info&#x27;</span>,<br>    ];<br>    <span class="hljs-keyword">if</span> (e &amp;&amp; e.<span class="hljs-property">path</span>) &#123;<br>      <span class="hljs-keyword">const</span> list = e.<span class="hljs-property">path</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;/&#x27;</span>);<br>      <span class="hljs-keyword">if</span> (list &amp;&amp; list.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 取最后一个作为路由标识</span><br>        <span class="hljs-keyword">const</span> flag = list[list.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>];<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;==========flag: &#x27;</span> + flag);<br>        <span class="hljs-comment">// 如果该路由在不刷新的名单中则不进行回到首页的跳转</span><br>        <span class="hljs-keyword">if</span> (notFreshPages.<span class="hljs-title function_">includes</span>(flag)) &#123;<br>          skipFlag = <span class="hljs-literal">true</span>;<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> skipFlag<br>  &#125;<br>&#125;,<br><br><span class="hljs-title function_">onLaunch</span>(<span class="hljs-params">e</span>) &#123;<br>  <span class="hljs-comment">// #ifdef H5</span><br>  <span class="hljs-keyword">const</span> visit = <span class="hljs-variable language_">sessionStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;appvue&#x27;</span>);<br>  <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> 弃用维护白名单的方式，改用更好的方式</span><br>  <span class="hljs-keyword">if</span> (visit === <span class="hljs-string">&#x27;true&#x27;</span> &amp;&amp; !<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">pagesFromWebview</span>(e)) &#123;<br>      wx.<span class="hljs-title function_">reLaunch</span>(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/pages/home/home&#x27;</span><br>      &#125;);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable language_">sessionStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;appvue&#x27;</span>, <span class="hljs-literal">true</span>);<br>  &#125;<br>  <span class="hljs-comment">// #endif</span><br>&#125;<br></code></pre></td></tr></table></figure><p>方案问题：需要维护白名单，当白名单内的路由变更时可能会因为遗漏维护而导致问题再次出现</p><h3 id="方案三"><a href="#方案三" class="headerlink" title="方案三"></a>方案三</h3><p>弃用白名单，增加第二个 <code>sessionStorage</code> 状态，当进入 <code>webview</code> 时禁用跳回首页的开关，离开 <code>webview</code> 时关闭禁用</p><p>web-view.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">onLoad</span>(<span class="hljs-params">query</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">url</span> = <span class="hljs-built_in">decodeURIComponent</span>(query.<span class="hljs-property">url</span>)<br>  <span class="hljs-comment">// 进入webview后禁止【页面刷新回首页】</span><br>  <span class="hljs-keyword">const</span> notfresh = <span class="hljs-variable language_">sessionStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;notfresh&#x27;</span>);<br>  <span class="hljs-keyword">if</span> (!notfresh) &#123;<br>    <span class="hljs-variable language_">sessionStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;notfresh&#x27;</span>, <span class="hljs-literal">true</span>);<br>  &#125;<br>&#125;,<br><span class="hljs-title function_">onUnload</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 从webview页返回到本项目时触发</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">url</span> = <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-comment">// 离开webview时解禁【页面刷新回首页】</span><br>  <span class="hljs-keyword">const</span> notfresh = <span class="hljs-variable language_">sessionStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;notfresh&#x27;</span>);<br>  <span class="hljs-keyword">if</span> (notfresh === <span class="hljs-string">&#x27;true&#x27;</span>) &#123;<br>    <span class="hljs-variable language_">sessionStorage</span>.<span class="hljs-title function_">removeItem</span>(<span class="hljs-string">&#x27;notfresh&#x27;</span>);<br>  &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">onLaunch</span>(<span class="hljs-params">e</span>) &#123;<br>  <span class="hljs-comment">// #ifdef H5</span><br>  <span class="hljs-keyword">const</span> visit = <span class="hljs-variable language_">sessionStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;appvue&#x27;</span>);<br>  <span class="hljs-keyword">const</span> notfresh = <span class="hljs-variable language_">sessionStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;notfresh&#x27;</span>);<br>  <span class="hljs-keyword">if</span> (visit === <span class="hljs-string">&#x27;true&#x27;</span> &amp;&amp; notfresh !== <span class="hljs-string">&#x27;true&#x27;</span>) &#123;<br>    wx.<span class="hljs-title function_">reLaunch</span>(&#123;<br>      <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/pages/home/home&#x27;</span><br>    &#125;);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable language_">sessionStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;appvue&#x27;</span>, <span class="hljs-literal">true</span>);<br>  &#125;<br>  <span class="hljs-comment">// #endif</span><br>&#125;<br></code></pre></td></tr></table></figure><p>存在问题，无法对 <code>webview</code> 跳去的 <code>A</code> 项目页面做刷新后跳转首页的控制</p>]]></content>
    
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>小程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>翻页时钟</title>
    <link href="/wilson-blog-hexo/2020/01/09/clock/"/>
    <url>/wilson-blog-hexo/2020/01/09/clock/</url>
    
    <content type="html"><![CDATA[<h1 id="翻页时钟"><a href="#翻页时钟" class="headerlink" title="翻页时钟"></a>翻页时钟</h1><h2 id="调研"><a href="#调研" class="headerlink" title="调研"></a>调研</h2><ul><li>已有同名iOS app</li></ul><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="/wilson-blog-hexo/img/post/clock.png" alt="clock"></p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><ul><li>进入即全屏</li><li>翻页时钟</li></ul><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><ul><li>微信内h5 index.html</li><li>微信小程序</li><li>原生app</li></ul><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><ul><li>h5(微信内打开，域名问题)</li><li>flutter(发布问题？)</li><li>rn(expo)</li></ul><h2 id="实现问题"><a href="#实现问题" class="headerlink" title="实现问题"></a>实现问题</h2><ul><li>全屏</li><li>横屏显示</li><li>翻页动效</li><li>发布</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://juejin.im/post/5be2403df265da616b102e23">前端 H5 横屏 独特处理方案详解</a></li><li><a href="https://magicly.me/h5-orientation-on-ios/">手机上如何让页面强制横屏</a></li><li><a href="https://www.51qianduan.com/article/3850.html">html5数字翻页时钟代码</a></li><li><a href="https://segmentfault.com/q/1010000009276119">如何让H5页面在手机浏览器里和微信全屏显示</a></li><li><a href="https://www.jianshu.com/p/95d2df476e85">Flutter——启动页splash全屏效果实现</a></li><li><a href="https://github.com/flutter/flutter/issues/29021">Expo like tool for flutter</a></li><li><a href="http://www.codeceo.com/article/14-html5-clock-animation.html">11、一款很酷的CSS3翻页时钟动画</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>HTTP访问控制（CORS）</title>
    <link href="/wilson-blog-hexo/2020/01/09/cors/"/>
    <url>/wilson-blog-hexo/2020/01/09/cors/</url>
    
    <content type="html"><![CDATA[<h1 id="HTTP访问控制（CORS）"><a href="#HTTP访问控制（CORS）" class="headerlink" title="HTTP访问控制（CORS）"></a>HTTP访问控制（CORS）</h1><h2 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h2><p>全称为“跨域资源共享”（Cross Origin Resource Share）</p><h2 id="官方资料"><a href="#官方资料" class="headerlink" title="官方资料"></a>官方资料</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS">MDN CORS</a></p><h2 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h2><ul><li>一种机制</li><li>使用额外的HTTP头</li></ul><h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><p>【域名】、【协议】、【端口】<code>任意一个</code>不同均为跨域</p><p><a href="http://www.xx.com/">http://www.xx.com/</a></p><p><a href="http://222.134.123.134:8080/">http://222.134.123.134:8080/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式</title>
    <link href="/wilson-blog-hexo/2020/01/08/regexp/"/>
    <url>/wilson-blog-hexo/2020/01/08/regexp/</url>
    
    <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>应该大多数学习过正则的人都看过<a href="https://deerchao.cn/tutorials/regex/regex.htm">正则表达式30分钟入门教程</a>，但这东西总感觉学一遍忘一遍，总做不到拿来一个正则匹配就能看懂，遂再复习一遍。</p><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><table><thead><tr><th align="center">规则</th><th align="center">解释</th><th align="center">补充解释</th><th align="center">举例</th></tr></thead><tbody><tr><td align="center">.</td><td align="center">除<code>换行符</code>以外的任意字符</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">\w</td><td align="center">字母、数字、下划线、汉字</td><td align="center"><code>\w</code>-&gt;”word:</td><td align="center">A、b、3、_、张</td></tr><tr><td align="center">\s</td><td align="center">空白符</td><td align="center"><code>\s</code>-&gt;”space”</td><td align="center"></td></tr><tr><td align="center">\d</td><td align="center">数字</td><td align="center"><code>\d</code>-&gt;”digit”</td><td align="center">1</td></tr><tr><td align="center">\b</td><td align="center">单词开始或结束</td><td align="center"><code>\b</code>-&gt;”boundary”</td><td align="center"></td></tr><tr><td align="center">^</td><td align="center">字符串开始</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">$</td><td align="center">字符串结束</td><td align="center"></td><td align="center"></td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>正则表达式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>markdown使用</title>
    <link href="/wilson-blog-hexo/2020/01/03/markdown/"/>
    <url>/wilson-blog-hexo/2020/01/03/markdown/</url>
    
    <content type="html"><![CDATA[<h2 id="Headers"><a href="#Headers" class="headerlink" title="Headers"></a>Headers</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># Header 1</span><br><span class="hljs-section">## Header 2</span><br><span class="hljs-section">### Header 3</span><br></code></pre></td></tr></table></figure><h1 id="Header-1"><a href="#Header-1" class="headerlink" title="Header 1"></a>Header 1</h1><h2 id="Header-2"><a href="#Header-2" class="headerlink" title="Header 2"></a>Header 2</h2><h3 id="Header-3"><a href="#Header-3" class="headerlink" title="Header 3"></a>Header 3</h3><h2 id="Unordered-Lists"><a href="#Unordered-Lists" class="headerlink" title="Unordered Lists"></a>Unordered Lists</h2><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">- </span>Bulleted<br><span class="hljs-bullet">- </span>List<br></code></pre></td></tr></table></figure><ul><li>Bulleted</li><li>List</li></ul><h2 id="Ordered-Lists"><a href="#Ordered-Lists" class="headerlink" title="Ordered Lists"></a>Ordered Lists</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> Numbered<br><span class="hljs-bullet">2.</span> List<br></code></pre></td></tr></table></figure><ol><li>Numbered</li><li>List</li></ol><h2 id="Fonts"><a href="#Fonts" class="headerlink" title="Fonts"></a>Fonts</h2><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-strong">**Bold**</span><br></code></pre></td></tr></table></figure><p><strong>Bold</strong></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-emphasis">_Italic_</span><br></code></pre></td></tr></table></figure><p><em>Italic</em></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-string">`Code`</span><br></code></pre></td></tr></table></figure><p><code>Code</code></p><h2 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h2><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scheme">[<span class="hljs-name">Link</span>](<span class="hljs-name">url</span>)<br></code></pre></td></tr></table></figure><p><a href="https://github.com/barnett617">Link Name</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">![LinkName](https:<span class="hljs-regexp">//</span>avatars.githubusercontent.com<span class="hljs-regexp">/u/</span><span class="hljs-number">23159565</span>?v=<span class="hljs-number">4</span>)<br></code></pre></td></tr></table></figure><p><img src="https://avatars.githubusercontent.com/u/23159565?v=4" alt="LinkName"></p><h2 id="Line"><a href="#Line" class="headerlink" title="Line"></a>Line</h2><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">para1<br><span class="hljs-bullet">***</span><br><span class="hljs-bullet"></span>para2<br></code></pre></td></tr></table></figure><p>para1</p><hr><p>para2</p><h2 id="Remove"><a href="#Remove" class="headerlink" title="Remove"></a>Remove</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">~~Remove <span class="hljs-keyword">this</span> line~~<br></code></pre></td></tr></table></figure><p><del>Remove this line</del></p><h2 id="Table"><a href="#Table" class="headerlink" title="Table"></a>Table</h2><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">:--- 代表左对齐<br><span class="hljs-meta">:--:</span> 代表居中对齐<br>---: 代表右对齐<br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">left</th><th align="center">center</th><th align="right">right</th><th>default</th></tr></thead><tbody><tr><td align="left">代表左对齐</td><td align="center">代表居中对齐</td><td align="right">代表右对齐</td><td>默认</td></tr><tr><td align="left">a</td><td align="center">b</td><td align="right">c</td><td>d</td></tr></tbody></table><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string"> left </span>|<span class="hljs-string"> center </span>|<span class="hljs-string"> right </span>|<span class="hljs-string"> default </span>|<br>|<span class="hljs-string"> :--- </span>|<span class="hljs-string"> :--: </span>|<span class="hljs-string"> ---: </span>|<span class="hljs-string"> --- </span>|<br>|<span class="hljs-string"> 代表左对齐 </span>|<span class="hljs-string"> 代表居中对齐 </span>|<span class="hljs-string"> 代表右对齐 </span>|<span class="hljs-string"> 默认 </span>|<br>|<span class="hljs-string"> a </span>|<span class="hljs-string"> b </span>|<span class="hljs-string"> c </span>|<span class="hljs-string"> d </span>|<br></code></pre></td></tr></table></figure><h2 id="Detail"><a href="#Detail" class="headerlink" title="Detail"></a>Detail</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">details</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">summary</span>&gt;</span>View More<span class="hljs-tag">&lt;/<span class="hljs-name">summary</span>&gt;</span><br><br>Hello, I&#x27;m here! :stuck_out_tongue_closed_eyes:<br><br><span class="hljs-tag">&lt;/<span class="hljs-name">details</span>&gt;</span><br></code></pre></td></tr></table></figure><details><summary>View More</summary><p>Hello, I’m here! :stuck_out_tongue_closed_eyes:</p></details><h2 id="Comment-hide-content"><a href="#Comment-hide-content" class="headerlink" title="Comment(hide content)"></a>Comment(hide content)</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">[<span class="hljs-regexp">//</span>]:<span class="hljs-comment">#something</span><br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-symbol">^_^</span>]:<span class="hljs-link">#something</span><br></code></pre></td></tr></table></figure><h2 id="Fault-Use"><a href="#Fault-Use" class="headerlink" title="Fault Use"></a>Fault Use</h2><ol><li>Nested Use</li></ol><blockquote><p>Don’t use nested markdown symbols or you won’t get your expected effect, because maybe github or something else will add extra actions to your markdown symbols like <code>###</code>, for example there will comes to a link symbol motion when you hover around the header following:</p></blockquote><p>e.g.</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">- ### Something<br></code></pre></td></tr></table></figure><ul><li><h3 id="Something"><a href="#Something" class="headerlink" title="Something"></a>Something</h3></li></ul><h2 id="Advanced-Use"><a href="#Advanced-Use" class="headerlink" title="Advanced Use"></a>Advanced Use</h2><ol><li>Todo list</li></ol><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">- </span>[ ] Mercury<br></code></pre></td></tr></table></figure><ul><li><input disabled="" type="checkbox"> Mercury</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何用vscode调试node程序和vue源码</title>
    <link href="/wilson-blog-hexo/2019/12/17/debug-node-vue/"/>
    <url>/wilson-blog-hexo/2019/12/17/debug-node-vue/</url>
    
    <content type="html"><![CDATA[<h1 id="如何用vscode调试node程序和vue源码"><a href="#如何用vscode调试node程序和vue源码" class="headerlink" title="如何用vscode调试node程序和vue源码"></a>如何用vscode调试node程序和vue源码</h1><h2 id="第一部分：如何使用-vscode-调试-node-程序"><a href="#第一部分：如何使用-vscode-调试-node-程序" class="headerlink" title="第一部分：如何使用 vscode 调试 node 程序"></a>第一部分：如何使用 <code>vscode</code> 调试 <code>node</code> 程序</h2><h3 id="一、准备待调试代码"><a href="#一、准备待调试代码" class="headerlink" title="一、准备待调试代码"></a>一、准备待调试代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Koa</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;koa&#x27;</span>);<br><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Koa</span>();<br><br><span class="hljs-comment">// logger</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">async</span> (ctx, next) =&gt; &#123;<br>  <span class="hljs-keyword">debugger</span><br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">next</span>();<br>  <span class="hljs-keyword">const</span> rt = ctx.<span class="hljs-property">response</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;X-Response-Time&#x27;</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;ctx.method&#125;</span> <span class="hljs-subst">$&#123;ctx.url&#125;</span> - <span class="hljs-subst">$&#123;rt&#125;</span>`</span>);<br>&#125;);<br><br><span class="hljs-comment">// x-response-time</span><br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">async</span> (ctx, next) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> start = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>();<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">next</span>();<br>  <span class="hljs-keyword">const</span> ms = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>() - start;<br>  ctx.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;X-Response-Time&#x27;</span>, <span class="hljs-string">`<span class="hljs-subst">$&#123;ms&#125;</span>ms`</span>);<br>&#125;);<br><br><span class="hljs-comment">// response</span><br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">async</span> ctx =&gt; &#123;<br>  ctx.<span class="hljs-property">body</span> = <span class="hljs-string">&#x27;Hello World&#x27;</span>;<br>&#125;);<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>);<br></code></pre></td></tr></table></figure><h3 id="二、配置-vscode-node-调试自动关联开关"><a href="#二、配置-vscode-node-调试自动关联开关" class="headerlink" title="二、配置 vscode node 调试自动关联开关"></a>二、配置 <code>vscode</code> node 调试自动关联开关</h3><ol><li>打开 <code>vscode</code> 设置（mac下可通过command + , 快捷打开）</li><li>搜索 <code>Auto Attach</code></li><li>设置为开（on）</li></ol><h3 id="三、运行程序携带检查参数"><a href="#三、运行程序携带检查参数" class="headerlink" title="三、运行程序携带检查参数"></a>三、运行程序携带<code>检查</code>参数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">node --inspect=<span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>:<span class="hljs-number">9229</span> index.<span class="hljs-property">js</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">node --inspect-brk index.<span class="hljs-property">js</span><br></code></pre></td></tr></table></figure><h3 id="四、Chrome-配置"><a href="#四、Chrome-配置" class="headerlink" title="四、Chrome 配置"></a>四、<code>Chrome</code> 配置</h3><ol><li>在 <code>Chrome</code> 地址栏输入 <code>chrome://inspect</code></li><li>点击 <code>Open dedicated DevTools for Node</code></li><li>将端口号修改为启动程序时指定的端口号</li><li>在 <code>Chrome</code> inspect 菜单中找到 <code>Target</code> 下找到运行的 <code>node</code> 程序</li><li>点击 <code>inspect</code></li></ol><h3 id="五、Chrome-作为调试客户端与程序建立关联"><a href="#五、Chrome-作为调试客户端与程序建立关联" class="headerlink" title="五、Chrome 作为调试客户端与程序建立关联"></a>五、Chrome 作为调试客户端与程序建立关联</h3><p>可在 <code>vscode</code> 中看到程序会在断点处停住</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://medium.com/the-node-js-collection/debug-your-node-js-app-in-60-seconds-9ee942a453f0">Debug Your Node.js App in 60 Seconds</a></li><li><a href="https://code.visualstudio.com/docs/nodejs/nodejs-debugging?wt.mc_id=medium-blog-jopapa">Node.js debugging in VS Code</a></li><li><a href="https://nodejs.org/en/docs/guides/debugging-getting-started/#enable-inspector">Debugging Guide</a></li></ul><h2 id="第二部分：如何调试-vue"><a href="#第二部分：如何调试-vue" class="headerlink" title="第二部分：如何调试 vue"></a>第二部分：如何调试 <code>vue</code></h2><h3 id="一、为开发模式启动脚本添加参数"><a href="#一、为开发模式启动脚本添加参数" class="headerlink" title="一、为开发模式启动脚本添加参数"></a>一、为开发模式启动脚本添加参数</h3><p>为 <code>package.json</code> 中 script 组内的 <code>dev</code> 脚本添加 <code>--sourcemap</code> 参数</p><p>修改后为(随 <code>vue</code> 的更新可能会有稍许不同)：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&quot;dev&quot;</span>: <span class="hljs-string">&quot;rollup -w -c scripts/config.js --environment TARGET:web-full-dev --sourcemap&quot;</span><br></code></pre></td></tr></table></figure><h3 id="二、修改-index-html-中关于-vue-编译包的引用"><a href="#二、修改-index-html-中关于-vue-编译包的引用" class="headerlink" title="二、修改 index.html 中关于 vue 编译包的引用"></a>二、修改 <code>index.html</code> 中关于 <code>vue</code> 编译包的引用</h3><p>选取 <code>examples</code> 中任一 <code>index.html</code>, 修改其原本对于 <code>vue</code> 包的引用为 <code>&lt;script src=&quot;../../dist/vue.js&quot;&gt;&lt;/script&gt;</code></p><p>修改对比：</p><p>修改前</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../dist/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>修改后</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="三、在修改过-vue-包引入的-index-html-文件所引入的-app-js-中增加-debugger"><a href="#三、在修改过-vue-包引入的-index-html-文件所引入的-app-js-中增加-debugger" class="headerlink" title="三、在修改过 vue 包引入的 index.html 文件所引入的 app.js 中增加 debugger"></a>三、在修改过 <code>vue</code> 包引入的 <code>index.html</code> 文件所引入的 <code>app.js</code> 中增加 <code>debugger</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">created</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">debugger</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">fetchData</span>()<br>&#125;,<br></code></pre></td></tr></table></figure><h3 id="四、安装简易服务器工具并启动"><a href="#四、安装简易服务器工具并启动" class="headerlink" title="四、安装简易服务器工具并启动"></a>四、安装简易服务器工具并启动</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">npm i -g http-server<br>hs -p <span class="hljs-number">8100</span><br></code></pre></td></tr></table></figure><h3 id="五、使用-Chrome-访问被-http-server-代理的文件目录"><a href="#五、使用-Chrome-访问被-http-server-代理的文件目录" class="headerlink" title="五、使用 Chrome 访问被 http-server 代理的文件目录"></a>五、使用 <code>Chrome</code> 访问被 <code>http-server</code> 代理的文件目录</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8100</span><span class="hljs-regexp">/examples/</span><br></code></pre></td></tr></table></figure><h3 id="按需调试"><a href="#按需调试" class="headerlink" title="按需调试"></a>按需调试</h3><p>打开控制面板 <code>source</code> 在左侧找到 <code>src</code> 目录 即 <code>vue.js</code> 源码文件，根据自己需求断点调试即可</p><h2 id="参考链接-1"><a href="#参考链接-1" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://mp.weixin.qq.com/s/6TGSWEsMu4lzoXTUshGrEg">vuex 源码学习</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>vscode</tag>
      
      <tag>debug</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年终总结</title>
    <link href="/wilson-blog-hexo/2019/12/11/2019%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <url>/wilson-blog-hexo/2019/12/11/2019%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<blockquote><p>2019年快结束了，又来到一年一度的复盘总结时</p></blockquote><span id="more"></span><p>这一年又学习了很多东西，但又感觉没什么，东西多是因为技术的更迭实在是快。常常会想，为什么前端会有这么多东西呢，但是站在更高的角度去看，只是前端东西多吗，后端呢，其他行业呢？其实都很复杂，整个人类社会都是复杂的，而且是螺旋式地由简单不断变得复杂。</p><p>对于做技术的，可能是你掌握的技能越来越多，对于其他行业可能是掌握的话术、套路、方案越来越多。但其实，由简单变得复杂是必然的，是趋势所在，即使你不想变得复杂，大环境也会推着你向前走。此时会显得化繁为简，回归简单是多么难得。</p><p>工作如此，你能够掌握更多的技能是由时间决定的，而能否拥有化繁为简的能力才是你的智慧所在。做人也如此，人的一生基本都是一个从简单变复杂，再从复杂回归简单的一个过程。</p><blockquote><p>“人之将死，其言也善” ——《论语》</p></blockquote><p>所谓大道至简，你能否从一个点出发，引申类比出其他所有你想要掌握的知识。</p><blockquote><p>霍金一生都在研究能否通过一个公式来描述全宇宙的规律，它叫做万物理论。最后他把目标锁定在【时间】这个点上。能否找到解释宇宙所有规律的钥匙，人类可能还需要很久很久的探索。</p></blockquote><p>如果不能，你看到的则是迎面而来越来越多的东西。但如果你能，你会看到世界是静止的，历史上从没有新鲜事物产生。但是能够做到这一点的人有多少呢？很少。做到的一些人被称为圣人。我们作为平凡的普通人，可能究其一生都在探索如何成为那样的人，其实我们都做不到。</p><p>我们能做到在某一个领域有一定的成就积累就已经会被认为是成功者了，这就是大众的宽恕。</p><blockquote><p>本以为这篇总结会是对自己技术上的进步做一个复盘，但不知怎么的就上升为行而上的人生思考。</p></blockquote><p>回归技术本身，从事开发两年多，感受颇多，也感觉到自己的进步。</p><p>我觉得作为一个技术人员，首先要学习的不是什么什么技术栈，而是认识自己。因为技术栈是死的，它就在那，虽然一直在变化，但它也是可观察、可追溯、有来源的变化。但人不同，你可能这五年还是一个技术员，但五年后你变成了另一种角色，另一种职业，比如你可能去开饭馆、做青旅老板、做自由摄影师等等。人的行为是很难预测的，因为受 <code>思想</code> + <code>情感</code> 二者的驱使。</p><h3 id="认识自己首先要了解自己的以下几个方面："><a href="#认识自己首先要了解自己的以下几个方面：" class="headerlink" title="认识自己首先要了解自己的以下几个方面："></a>认识自己首先要了解自己的以下几个方面：</h3><ul><li>自己之前学过什么</li><li>擅长什么</li><li>对什么感兴趣并能一段时间内保持激情</li><li>以后要做什么、为什么</li></ul><p>试着回答这几个问题，是不是感觉比回答面试官问你的面试题要难。</p><p>因为面试题答不上来，你回来之后可以通过网上搜索就可以拿到答案，但这些问题的答案呢，你可能要安静地思考，和自己长期的对话才能得出，而且即使你这一刻把这些答案写下来了，你再过一段时间，可能会给出不同的答案，因为人的想法是会变的。<br>但那些技术难题的答案呢，显然一个答案是会在很长一段时间内都是固定的，即使会出现更好的方案，也是基于之前已有的方案而演进出的更优解决方案。</p><p>那么我来回答自己所提出的这几个问题</p><h4 id="首先，我之前学过什么？"><a href="#首先，我之前学过什么？" class="headerlink" title="首先，我之前学过什么？"></a>首先，我之前学过什么？</h4><p>我是一个理科生，所以肯定是学过数理化的，但是学的一般，或者说考试能力一般。但是我对学过的东西都乐于用在生活中的理解，比如学过生物，我会思考人的胖瘦是因为摄入食物，经过食物不同组成成分分解成热量和脂肪，如果消耗低于摄入，就会囤积脂肪，从而变胖；学过化学，我知道做鱼要加醋和酒，是因为醋的成分是酸，酒的成分是醇，二者混合会生成的脂类会有香味，等等类似这种例子。我觉得学习科学的目的是帮助人类认识这个世界的，前人通过实验总结出一些规律留给后人，是为了后人不再花很多的时间去研究为什么会是这样。所以如果你不是想去发现更多的自然规律，你大可不必去重头了解一遍之前的人是怎么一步一步得出现在这些结论的过程，而是直接用前人得出的结论就足以很好地和这个世界打交道了。</p><p>当然，那些的确想在人类历史上做出自己贡献的人，我不讨论。因为我不是那其中一员，我没有资格评头论足。</p><p>然后我大学学的是软件工程，计算机体系的一个分支，由<code>软件</code>和<code>工程</code>组成，软件主要学习软件是怎样构成的，通过使用编程语言按照人类的书写习惯编写程序交给操作系统，通过编译器解析成计算机所能执行的指令，最终转化为电路接通与断开的组合来控制电子元件所组成的设备去按照预期工作，这个设备叫电脑。工程就是生产这个软件的过程管理，使其能够高效、成体系地服务于人，比如我可以用一套模式把任何人类需求做成一个软件放在电脑上来服务于人。</p><p>其中包括以下这些环节：</p><ul><li>需求整理：把想让计算机做的事情整理成人能看懂的文字或图，可以用于一个软件从没有到诞生的指导和参考</li><li>环境部署：操作系统、网络架设、代码运行环境</li><li>程序编写：不同编程语言的使用和组合，按照既定逻辑把需求转化为计算机程序</li><li>软件测试：也就是流水线工作中的质检环节，所以现在的测试工程师都叫 QA(Quality Assurance，质量保证)</li><li>运营售卖：这是软件成为如今商业社会一份子的重要环节，也是商业变现策略的运作环节</li><li>程序维护：程序和人一样，不可能从始至终健康，有个小病小灾的不能否定软件本身原有的价值，而应该遇到问题处理问题，保持它能一直很好的为人类服务。</li></ul><p>最后就是能把上述所有环节整理成一个体系，也就是软件解决方案。这样，程序才不会只是跑在命令行输出 Hello World! 的小打小闹，被当作玩具。<br>软件是能改变世界的，不然怎么会成为第三次工业革命中的核心成员。同样这样一个东西，有人只能看到它就是程序员写出来跑在电脑上的程序，而有的人就能看到它无限的价值和可能。</p><blockquote><p>视角决定视野</p></blockquote><h4 id="第二个问题，我擅长什么？"><a href="#第二个问题，我擅长什么？" class="headerlink" title="第二个问题，我擅长什么？"></a>第二个问题，我擅长什么？</h4><p>我擅长整理和总结，从小我就能发现自己对于家里的杂物我会把它们分门别类的整理，虽然有时结果还是很乱，但我会不断地研究怎么样能让东西很好的在我的控制之下，也就是我想找什么应该从哪里找，被大人动了东西我能不能察觉到。<br>至于总结，是我长大后才发展出的属性，我擅长通过较长一段时间的观察和积累，思考周围人事物的变化，并总结其中的规律。</p><p>比如2019年，我观察了公司的人是怎么获得晋升的，晋升了的人具有什么样的特点，他们做了哪些事，评委视角是怎么考量晋升者的，他们期望我们是怎样的，或者他们认为我们怎么样就会认为我们具备晋升的资格。于是在2019年结束前，我获得了自己工作以来的第一次晋升。</p><h4 id="第三个问题，我对什么感兴趣？"><a href="#第三个问题，我对什么感兴趣？" class="headerlink" title="第三个问题，我对什么感兴趣？"></a>第三个问题，我对什么感兴趣？</h4><p>我喜欢和事物打交道，所以我选择了走开发这条职业路线。<br>但这也因为成长过程的原因，我曾经是一个不擅长处理人之间关系的人，而且我所成长的环境，是一个人情世故很落后的地方。<br>对于我看到的那些阿谀奉承、灯红酒绿、推杯换盏，我觉得不适应，也有些拒绝参与其中，所以我选择了进入相对简单的技术群体。<br>但是时过境迁，我发现还是逃不过那些繁文缛节，这些东西可以理解为人们所说的游戏规则，也可以理解为任何事物都具有其一定的规则。</p><blockquote><p>没有规矩，不成方圆。——《孟子》</p></blockquote><p>所以这可能也是一种成长吧，就是心态上的转变，从以自己的角度看待外部世界，到去适应这个世界，迎合所处的环境，接受“没有绝对的公平”这样的观点。<br>这也正常，这不是妥协，从而沦为一条咸鱼，而是正确的和这个世界相处的方式。<br>那些拒绝和大家一样的人，最终都没了，比如尼采。</p><h4 id="最后一问，我以后要做什么，为什么。"><a href="#最后一问，我以后要做什么，为什么。" class="headerlink" title="最后一问，我以后要做什么，为什么。"></a>最后一问，我以后要做什么，为什么。</h4><p>这个其实我还没想好，有人说做长期的计划是不切实际的，也有人说没有长远的计划会迷失，对于这两种观点我还在摇摆。<br>而且对于工作尚短的我，的确很难在这个节点说自己以后一定会做什么，做到什么，那很不负责任，也会限制我本可以有的其他可能。<br>所以我目前只会定期思考复盘前面走过的路，来给自己后面的前进打气，增加笃定和从容，减少怀疑和困惑。</p><p>没有工作总结，因为目前工作是在为别人做事，收获自己的成长。</p><p>没有技术总结，因为还只是个工作不满三年的新手，网上那么多人已经总结过了，看看别人写的就很好。</p><p>此文仅是一篇关于个人思想的整理。</p>]]></content>
    
    
    <categories>
      
      <category>总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2020年你为什么要学习js</title>
    <link href="/wilson-blog-hexo/2019/12/05/2020%E5%B9%B4%E4%BD%A0%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%AD%A6%E4%B9%A0js/"/>
    <url>/wilson-blog-hexo/2019/12/05/2020%E5%B9%B4%E4%BD%A0%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%AD%A6%E4%B9%A0js/</url>
    
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/23159565/80948849-81c00280-8e25-11ea-9b54-f0068721abc7.png" alt="image"></p><p>js全称是javascript，它既不是java的嫡系，也不单单是一门脚本语言（script直译）。</p><span id="more"></span><h4 id="暮色"><a href="#暮色" class="headerlink" title="暮色"></a>暮色</h4><p>编程语言的强大程度决定于它能使用的场景和所能处理的事情，比如现在这么多软硬件程序，都需要编程语言来编写程序逻辑使之能够提供功能。也因为使用场景之多以及环境之复杂，所以才诞生了不同的编程语言去处理不同的场景事务，就好比人类的职业划分是为了让人类根据自身属性不同去承担不同范围的工作。</p><p>编程语言自诞生之初就是对人类世界的一种抽象。不同的编程语言（用于人类编写程序的计算机语言）都是对于计算机所能识别的基础指令的一些封装，语言之不同在于封装形式之不同。比如一个人，既能当警察，也能做医生，还能教书育人当老师，那么这个人可不可以这些都做，可以。但也有人选择只做一件事情。</p><h4 id="新月"><a href="#新月" class="headerlink" title="新月"></a>新月</h4><p>编程语言也类似，一种编程语言既可以用于浏览器编程，也可以用于服务器编程，还可以用于家用电器内部程序的硬件编程，那它可不可以都做呢，可以。但大多数人的记忆中，js还是仅适用于浏览器编程的。那么为什么js还可以用于浏览器以外的环境进行运行呢，这依赖于其所运行的宿主环境，也就是一个托盘。就好像你用微波炉加热一盘菜，你直接把菜倒在微波炉里加热，虽然菜能热，但是没法吃了，但如果你把菜放在一个盘子里，再把盘子放进微波炉加热，这样微波炉就能很好地服务于你。</p><p>js在各种环境运行也如此，既然服务器没有解析js的先天功能，就用服务器能解析的c++写一套环境，然后这套环境里定义了解析js的规则，从而使得放在这个环境里的js可以为服务器所运行，这个环境就叫做nodejs。那么其他环境呢，比如硬件设备，都可以拥有类似于nodejs的环境来使得js可以成为程序界的通用语言。但是功劳在于这些环境，也就是js引擎。那么当js可以变得如此通用，畅行于程序的世界，就不禁想到，js于编程语言，正如英语于人类语言一般。比如你学英语，那么你走到世界大部分地区，都是能够与当地交流的，因为各个国家基本都拥有会英语的人，这些人就相当于js引擎，也就是中间翻译者，他们能听懂英语，就可以提供你要的服务。</p><h4 id="月食"><a href="#月食" class="headerlink" title="月食"></a>月食</h4><p>那么为什么有这样通用语言存在的必要呢？我们反过来想，假如你去日本要学日语，你去法国要学法语，你去俄罗斯要学俄语，那岂不是你每去一个国家都要提前花时间学一门新的语言，这样成本很高，而且没必要。但是如果你学习一门国际上认可的通用人类交流语言，也就是英语，那么你基本上可以畅行无阻，岂不美哉。</p><p>那么回到编程语言上，js目前就有成为编程语言界通用语言存在的趋势，因为当你编写运行在浏览器的程序之时，你会使用js，曾几何时你可能还可以选择另外一种语言叫jscript，但随着历史的发展，它已经被js挤下去消亡了，就像百度外卖一样。然后当你编写服务端程序的时候，如今你同样可以使用js，曾经你的选择可能会是java、c、c++、c#、python、go等等，但如果告诉你，他们能做的事情js都能做，你会不会感到高兴，因为你只会英语（只会js）。</p><h4 id="破晓"><a href="#破晓" class="headerlink" title="破晓"></a>破晓</h4><p>曾经js只被当作一门玩具语言，因为它仅用于处理客户端一些简单不重要的逻辑，大多数用户使用的程序功能都是由服务端所提供的。但是现如今nodejs告诉你，我可以帮助你把js写的逻辑运行在服务器环境，你是不是可以考虑把前后端编程语言统一为js一种。</p><p>那么当你开始心动，决定只用这一种语言编写程序的时候，不禁会想，它真的能完全取代别的语言，实现它们所提供的功能吗，那么便需要讨论到第二部分，即js所具备的功能。比如java可以利用计算机操作系统所提供的多线程来共用同一进程的内存资源，从而提高程序运行效率，同时处理多项事务的能力，那么js可以吗？</p><p>预知后事如何，且听下回分解。</p>]]></content>
    
    
    <categories>
      
      <category>总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>做事方法论总结</title>
    <link href="/wilson-blog-hexo/2019/12/03/thinking/"/>
    <url>/wilson-blog-hexo/2019/12/03/thinking/</url>
    
    <content type="html"><![CDATA[<h1 id="做事方法论总结"><a href="#做事方法论总结" class="headerlink" title="做事方法论总结"></a>做事方法论总结</h1><ol><li>注重细节，80%的问题会集中出现在被轻视或忽略的那20%部分</li><li>切忌舍近求远，当问题亟待解决时应先解决问题，再考虑旁枝末节</li><li>切忌破窗效应（当一个窗户破掉之后，人们并不会想着把它修好，而是使它变得更加糟糕），做事要避免给后人留坑，如果已经遇到坑应试着解决，而非继续埋坑。</li></ol><h2 id="程序员思考方式"><a href="#程序员思考方式" class="headerlink" title="程序员思考方式"></a>程序员思考方式</h2><ul><li>偶然复杂度</li><li>优秀程序员的开发效率是普通程序员的10倍（工作方法和工作习惯共同决定）</li></ul><h2 id="解决问题的步骤"><a href="#解决问题的步骤" class="headerlink" title="解决问题的步骤"></a>解决问题的步骤</h2><ul><li>明确真正的目标</li><li>分治（大而化小）</li><li>沟通（减少理解偏差）</li><li>自动化</li></ul><h2 id="读代码"><a href="#读代码" class="headerlink" title="读代码"></a>读代码</h2><ul><li>我们写不出来，是因为看的还不够多，当见多识广以后，设计模式、算法、脚本、框架都将跃然编辑器上。</li><li>读代码有助于理解框架原理，学习优秀的编程范式、思路，获得比看书更加直观的码感训练（参考英语口语的语感）</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>什么样的人适合做技术</title>
    <link href="/wilson-blog-hexo/2019/10/17/%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E4%BA%BA%E9%80%82%E5%90%88%E5%81%9A%E6%8A%80%E6%9C%AF/"/>
    <url>/wilson-blog-hexo/2019/10/17/%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E4%BA%BA%E9%80%82%E5%90%88%E5%81%9A%E6%8A%80%E6%9C%AF/</url>
    
    <content type="html"><![CDATA[<p>突然有感而发想到这样一个话题——什么样的人适合做技术</p><span id="more"></span><p>直接说例子</p><p>当遇到一个技术问题后的解决思路</p><p>比如浏览器里报出了这样的错“Access to XMLHttpRequest at ‘<a href="https://xxx.com/">https://xxx.com</a>‘ from origin ‘<a href="http://xxx.com/">http://xxx.com</a>‘ has been blocked by CORS policy: No ‘Access-Control-Allow-Origini’ header is present on the requested resource”</p><p>A同学:之前不认识这种提示，然后找到相关人员了解到“哦，原来这是跨域导致的问题”，然后找后端在服务器配置里增加了跨域请求的配置，解决了。然后A默默把这个知识点记住了。注意！是记住了，像是背下一个数学公式一样的背下来了，或者把它当做笔记一样地记在自己某个记事本里，实体的或者电子的。</p><p>B同学：之前不认识这种提示，然后找到了相关人员了解到“哦，原来这是跨域导致的问题”，然后他就开始好奇了，啥是个跨域呢，他打开搜索引擎去学习跨域是什么（这也就是很多程序员自嘲自己是面向搜索引擎的程序员，其实这不是坏事，搜索引擎就是程序员的图书馆，大多技术点都能够通过搜索引擎学习到原理并消化），学习的过程中他自然而然就会再学习到什么是同源策略。</p><p>最终他一知半解的学习了这个新的概念，虽然还是感觉迷迷糊糊的，但起码他今天学习到了新的知识点，自己的技能栈也得以进一步完善。当下一次，再下一次遇到跨域的问题时，他都会结合不同场景去加深之前对跨域的理解，最终达到对这个知识点的精通。</p><p>久而久之，他可能做到对浏览器内部原理精通，前提是他能够坚持长期保持这样的学习方法并深耕某一技术领域。</p><hr><p>那我们来分析这次事例，这是一个知识点吗？是的，就是跨域，但这是像数学公式一样的东西吗？不是的。</p><p>数学公式是什么，是公式，是能够解决计算问题的一种程式，不管是推导公式还是原始公式，都是很基础的工具，你给它输入各种各样的输入值，都会得到确定的计算结果，也就是输出值。</p><p>这很像面向过程编程思想中的函数，还有现在前端流行的函数式编程中的纯函数，其实编程和数学一直都存在很强的关联性，甚至计算机的发明就是数学家用来处理数据运算的机器而已。</p><p>那么回到我们这个问题当中，浏览器中的报错是一个公式吗？不是，它是一个结果，是因为你的配置不符合浏览器的同源策略限制，所以浏览器告诉你这里的访问跨域了，不让你进行访问，这是一个结果。</p><p>至于这样的结果是唯一的吗？不是，有很多种，至于有多少种，那就要看浏览器同源策略的限制有多少种，只要你不满足其中的任何一种，你都会遭到跨域警告，而且每种违背同源的警告内容可能都会不同，当然大致都是在告诉你跨域了。</p><p>那么这样情况下，A如果只是记住了这个结果，有意义吗？有一点。但是对于他个人的技术成长没有帮助，因为他并没有通过这次跨域警告事件而真正认识跨域这个东西，他只是记住了这个知识点，像文科生背历史事件一样。当下一次遇到相似但不相同的情况时，他可能仍搞不定，而且还需要再记住一种新的情况。</p><p>如此长期下去，如果有心者可能会意识到这个问题从而转变为寻找众多相似知识点之间的规律，去试着探寻问题核心。但如果没有这个心，那就是在不断地记忆新的知识点，直到背不动为止。那个时候他会觉得做技术太难了，要记的东西太多了，而且庞杂无规律，数量巨大。渐渐地，他可能会开始质疑自己是不是不适合做技术。</p><p>这样的人的确不适合做技术，但如今互联网公司的程序员们中大量充斥着这样的人。</p><hr><p>那么B同学这样的是否适合做技术呢？是适合的。这就是当下互联网领域最受欢迎的技术人才类型，也就是具有研究型人格的人，他们往往对于每个技术点背后真正的原理感兴趣，能够不断深入到技术背后的本质，并不断完善自己的知识体系，形成一个完整的技术栈。这种研究型人格的技术人才是做技术岗位的不二首选。</p><p><img src="https://user-images.githubusercontent.com/23159565/80950118-d4022300-8e27-11ea-86f7-620aa9eee27a.png" alt="image"></p><p>我这里说的只有A和B两个同学，但其实实际工作中会有ABCDEFG各种同学，这里举例的AB同学其实只是代表了面对问题时思路反差比较大的两类人，一类是记忆型学习人格，另一类是理解型学习人格。两者无对错之分，但有分别适合的职业和岗位之分，如果把自己的学习方式用在错误的职业位置上，会长期难以得到职业成就感。</p><p>但我们反观研究型人格的人，他们也可能因为太过于执着于每件事情背后的本质，每件事都期望能够通过追本溯源找到确切的结果，而恰恰并不适合做管理岗位。因为管理是要和人打交道的，人和技术不一样，技术是死的，冰冷的，而人是活的，温度各异的。人有情绪，而且变幻莫测。技术的发展走向起码是有规律可循的，而人没有。</p><p>人类作为在地球上进化千年的有机体，并且在征服了各大生物种群之后成为世界主宰者，可以说进化的十分复杂。</p><hr><p>那么管理字面上说是管理，其实更多的是和人的交流，对于不同的人采用不同的交流一方式，没有固定的方法，也没有可以用于计算的公式。这一点不管从可变性上还是复杂度上都极大地超越了技术。</p><p>所以说适合的人做适合的事才是最高效正确的，乐于洽谈的人可能就是很难静下心来研究每件事物背后的本质。但他恰恰能够通过言语交谈办成事，而且能够通过合适的方式劝服他人去做某件事情，比如召集一帮技术很厉害的人去研发一款软件，并且使他们充满激情地做这件事情并乐此不疲。</p><p><img src="https://user-images.githubusercontent.com/23159565/80950166-ef6d2e00-8e27-11ea-8b10-54554d21c4af.png" alt="image"></p><p>而适合做技术的人呢，可能就是很难去通过言语去取悦他人，而是更加乐意和冷冰冰的机器去交谈。因为他们的确善于操纵机器，对于机器里的每一个二进制的变动都心中有数。这样的人就适合做技术，但也不是绝对的。有些人也能够通过技术老本行先在科技界建立一定的威望，然后再利用这个光环转去创立公司，转型成为管理者，但是这样的人少之又少，仅有的那些成功转型者名字，大家也都知道了。</p><p>那么我们每个人适合做什么事呢，需要花时间去和自己对话，认真思考自己的定位，先找到自己某个阶段适合做什么工作，再去落实执行，或许会事倍功半。但凡事没有绝对，也永远都有人唱反调，有人就是不管三七二十一先做了再说。但读过历史的人都知道，事前做计划的确会降低失败的概率。</p><p>最后，推荐一本最近在读的书《人类简史》</p><p>杂谈结束，后会有期</p>]]></content>
    
    
    <categories>
      
      <category>总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《ECMAScript6入门》读后感</title>
    <link href="/wilson-blog-hexo/2019/05/21/ECMAScript6%E4%B8%80%E4%B9%A6%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    <url>/wilson-blog-hexo/2019/05/21/ECMAScript6%E4%B8%80%E4%B9%A6%E8%AF%BB%E5%90%8E%E6%84%9F/</url>
    
    <content type="html"><![CDATA[<p>关于阮一峰《ECMAScript6入门》一书的观感</p><span id="more"></span><p><a href="https://es6.ruanyifeng.com/#docs/reference">原书链接</a></p><h2 id="暮色"><a href="#暮色" class="headerlink" title="暮色"></a>暮色</h2><p>首先，抛开技术不谈（这可能有点过分，一本技术书籍的书评竟然和技术没多大关系，但是秉承“一千个读者有一千个哈姆雷特”的原则，建议各位亲自去拜读此书，找寻自己的收获），当然此评也不是广告，因为阮一峰根本不认识我，我只是在学习ES6过程中了解到此书。再说一下为什么此文不谈技术，而更多地谈的是我看此书的感受，因为就我长期对对于阮一峰的了解和关注，他本身也认为技术只是他生活的一部分，而不是全部，令他更开心的可能是他关于人生的感想整理成书——<a href="http://www.ruanyifeng.com/blog/2019/01/survivor-preface.html">《未来世界的幸存者》</a>并出版。的确，我的人生规划也不会把技术看做多么重要的东西，它只是我当下阶段职业所需的技能，我会更多地从技术中抽取不同厉害的人或深刻或缜密的思维背后的哲学，用以加深我对这个世界的认知和理解。</p><h2 id="新月"><a href="#新月" class="headerlink" title="新月"></a>新月</h2><p>阮一峰本身不是搞计算机的，他写的书却成为技术圈的参考教科书，至少在ES6这一个知识点上，被大家广为流传借鉴，可见学问存在“大同”效应，即大道至简。如果你是一个对于知识追求理解原理和本质的人，那么在学习了一部分知识后，自然而然会对其他未学的东西有着开导的作用。比如举个不一定恰当的例子，所谓举一反三是什么呢，在前端界我们都知道有三大主流框架React、Vue、Angular，那放给初学者可能就觉得要学的东西太多了，竟然要掌握三种框架，去不同公司，做不同项目可能都要用不同的技术框架，简直像个学不完的无底洞。但如果是有一定经验的人会怎么看呢——举一反三，三大框架本师出同门，都是用基础语言Javascript经过不同的包装形式封装而成，所以高级开发经常会告诉初级工程师要打牢基础，因为基础好了，无论出现什么样的新技术都万变不离其宗，这样的学习方法就是举一反三。吃透理解一个框架，对比地再去学习另外两个，就会发现有很多相似的地方和思想，假如学习一门新技能需要花费10天的话，这样学起来也就不是10x3&#x3D;30天了，而可能是10+9+8&#x3D;27天，甚至是10+7+3&#x3D;20天或者更少。因为伴随着你前面的积淀，再去学习新的东西，如果能利用上之前所学到的思想，大多情况下可能不会再用同样多的时间，而是越来越快，至少相近的知识是这样的。</p><h2 id="月食"><a href="#月食" class="headerlink" title="月食"></a>月食</h2><p>那么回归ECMAScript 6 入门这本书为什么能够一直被奉为学习ES6入门的首推宝书呢，可能读过此书的人才能感受到。首先该书从2014年4月20号发生第一次github上的提交，在开源大家庭的共同维护下已经走过了五个年头。那为什么它会成为一本开源的书呢，作者自己当然有自己的想法，但我们也可以看到，其实阮一峰自己也经常提及自己不是计算机科班出身的事实，但这也不影响他能够写出帮助其他计算机专业的人学习的教材，也不妨碍他和技术圈的人合作产出，所以通过开源的方式，可以云集世界各地的高手一同校验、纠错，历史提交记录中不乏一些很有价值的帮助，比如“fix: <a href="https://github.com/ruanyf/es6tutorial/commit/eba11dd8c79819d8af9aa4ff39e35a901c0449d9">IIFE 不一定是匿名</a>”、“<a href="https://github.com/ruanyf/es6tutorial/commit/57fe8c62fc3c282df0dfb61156edeccc511a4815">修改示例代码使其更精确</a>”。另外我们可以从很多细节中感受出他对于这本书的认真态度和投入，比如最后一章所列举的参考链接，就如同专业论文的参考文献，既做到了对于参考内容的版权尊重，也帮助读者对于某些知识点的追本溯源提供了便捷的帮助。同时，这也给人一种学无止境的感觉，当你花一段时间拜读完此书时，认为自己已经做到了“ES6入门”，然而看到最后一章附注的参考链接，才发现你刚刚打开知识海洋的大门，你会发现自己学到的只是冰山一角，因为毕竟你读完这本书可能只要花费不到一个月的时间，而作者写成这本书却要花费五年的心血，甚至更多。所以说——学无止境，任何时候你感觉自己已经会了，或者对于某个领域或某个知识点完全理解了，都是在阻碍你后面更大的进步。</p><h2 id="破晓"><a href="#破晓" class="headerlink" title="破晓"></a>破晓</h2><p>再说一个令人咂舌的细节点，就我写下此评的这一天（2019年05月21日17:27:02）打开该书的github地址，发现<a href="https://github.com/ruanyf/es6tutorial/issues">issues</a>和<a href="https://github.com/ruanyf/es6tutorial/pulls">pull requests</a>栏目的待审阅数双双为零，乍一看还以为是此书封版了，已经完善归档，不再需要更新，或是作者设置为禁止其他人继续提交改动了，但好像不是这样。点开近期close掉的issue，发现刚发生在3天前，同时最近一次的pull request处理于4天前，看到这个足以令人震惊。因为逛开源圈的都知道，茫茫众多开源项目，能够做到这样及时关注用户反馈，对开源提交做出处理，达到0待处理issue和0待处理pr的开源项目实在不多，这有时也是从维护积极性维度衡量一个开源项目质量高低的核心指标，有些开源项目一开始很好，比如框架或者工具类的项目，大家会当做现成轮子去使用到生产中，但时过境迁，当项目中所使用的开源工具出现问题，由于是开源项目，所以项目作者就是项目的售后和客服，遇到问题了，如果从网上找不到太大的帮助，八成会回到github的项目原地址来看看issue或者pr中别人有没有睬过同样的坑，当欣喜若狂地搜索到结果后，迎面而来的可能是一盆冷水，就是这种问题的确也很多人遇到过，但作者已经很久没有再维护此项目了，issue和pr中待处理的问题一堆，逐渐地人们可能会换用其他新的技术框架或方案，这样的开源项目便也就此论为昙花一现。与之不同的是，阮一峰能够持续地维护此书，的确值得钦佩。可能有人会说，这只是一本小书，文字内容为主，附以简单的代码片段说明，跟大的开源技术框架不能比，但我们这里看到的是态度，一个人对于小的事情能够报以认真严肃的态度，当面对大问题的时候大多能够从容应对，毕竟还有分治策略不是吗，大的问题大多可以拆解成多个小的问题的合集，继而分而治之。就好比一个人从刚入职场做着简单的岗位起，如果因为觉得基础岗位所做的事情简单无趣而不能认真对待，那么怎么能够得到晋升去做更大事情的机会呢，相反能够在基础岗位做出优异成绩的人大多稳步发展，逐步上升，成为厉害的人，这才是我们应该学习的态度。千里之行始于足下、高楼万丈平地起，这样的道理我们从小学时期就受过教育，只是很多人在成长的过程中都丢掉了。</p>]]></content>
    
    
    <categories>
      
      <category>读书</category>
      
    </categories>
    
    
    <tags>
      
      <tag>es6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git子模块功能使用实践</title>
    <link href="/wilson-blog-hexo/2019/05/21/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8git%E5%AD%90%E6%A8%A1%E5%9D%97%E5%8A%9F%E8%83%BD%E5%A4%87%E4%BB%BD%E5%85%B3%E4%BA%8E%E4%B8%BB%E9%A2%98%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%9B%B4%E6%94%B9/"/>
    <url>/wilson-blog-hexo/2019/05/21/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8git%E5%AD%90%E6%A8%A1%E5%9D%97%E5%8A%9F%E8%83%BD%E5%A4%87%E4%BB%BD%E5%85%B3%E4%BA%8E%E4%B8%BB%E9%A2%98%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%9B%B4%E6%94%B9/</url>
    
    <content type="html"><![CDATA[<p>关于一次使用git子模块功能备份hexo主题文件的记录</p><span id="more"></span><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>整个事情源于某天心血来潮又写了篇博客，当准备使用hexo发表时，突然想到一个问题<code>之前虽然做到对于博客项目的git备份了，但是最近新换的主题配置修改也备份了吗？</code>，有点像强迫症出门后思考房门有没有锁好的感觉。</p><p>背景是这样的：最初我刚接触hexo的时候，觉得发现了宝贝，它是个不错的静态博客生成器，风格偏极客风，虽说是博客工具，但要拿给不会技术的人可能用起来还比较蹩脚，因为其虽然声称使用简便，只需要快速地搭建环境，敲敲命令，就可以在网页上展现出漂亮的个人博客网站来，但其搭建环境基于Node.js，命令又依赖于git，还得把本地的博客源文件编译成浏览器可解读的静态文件发布到远程git仓库，还得使用支持pages服务的git仓库，比如github的github pages或coding pages。所以我当初刚接触的时候，对其原理也是一知半解，仅停留在”会用“程度，但随着时间的推移，免不了发生一些其他变动，比如换电脑，这时候我就发现，如果没有对本地博客项目进行版本库的管理和备份，那么只要硬盘上的博客项目文件夹出现丢失或者换电脑，就麻烦了。当然，换电脑还算好，只要用优盘把旧电脑里的文件夹拷贝过去，在新电脑搭建相同的环境，就能恢复使用了，但这方法不够优雅，不够geek。于是就在网上查hexo博客备份的方法，最后结合查到的方式和自己的推敲尝试，记录了一篇<a href="https://www.h2mes.com/2018/09/03/wo-shi-ru-he-bei-fen-bo-ke-de/">我是如何备份博客的</a></p><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>但今天再看，当时只解决了博客“根项目”的保存，最近换了新的主题，主题的配置文件改了一大通，当然就是根据自己进行的个性化修改，突然想到，主题项目是博客项目themes文件夹的一个子项目，是进到themes目录，通过<code>git clone</code>下载到本地的另一个git项目。问题来了，git项目中嵌套git项目，事情看上去不那么简单。好在之前就了解过<code>子项目git submodule</code>的概念，知道这是那块的东西，但当时刚接触<code>子项目</code>的时候觉得有点复杂，就没再理会，现在发现逃不过了，这是最好也是最恰当的解决方案，所以再次开始了搜查。</p><p>先是根据猜想结合自己使用git的经验进行尝试</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>首先，理了一下思路，新下载的<code>hexo-theme-matery</code>项目是不应该直接划为子模块的，因为它的远程关联是github中原作者的项目，我对其的修改不可能直接提交到人家那里，也提交不上去，所以我首先应该有一份自己的关于<code>hexo-theme-matery</code>项目的拷贝，无论是本地git还是远程仓库，都是自己的，所以先进入到<code>themes/hexo-theme-matery</code>目录，把git初始化删掉（后来想到这里其实不用直接把git初始化删掉，只要把远程仓库关联改成我自己的就可以了，因为在本地git的提交都是我自己的，只要同步到自己的远程仓库就可以了）</p><p>删除git初始化（使一个项目脱离git的管理）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf ./.git<br></code></pre></td></tr></table></figure><p>然后再重新初始化<code>themes/hexo-theme-matery</code>目录成为一个git项目，并关联我远程建的空项目</p><p>由于远端建的是空项目，所以可以毫无冲突的直接push并建立默认分支设置（加参数 -u）</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">cd hexo-theme-matery<br>git init .<br>git <span class="hljs-built_in">add</span> .<br>git commit -m <span class="hljs-string">&#x27;initial matery theme as a divided git project&#x27;</span><br>git remote <span class="hljs-built_in">add</span> origin git@git.coding.net:daemonG/my-hexo-theme-matery.git<br>git push -u origin master<br></code></pre></td></tr></table></figure><p>接下来要建立子项目关联了，参考了网上的一篇文章<a href="https://juejin.im/post/5c2e22fcf265da615d72c596">在 hexo 中使用 git submodules 管理主题</a></p><p>照猫画虎地进行了如下的操作</p><p>按照我对网上文章的理解，以为是通过如下命令，把某个文件夹变成一个项目并命名子项目为theme-matery</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">cd hexo-theme-matery<br>git <span class="hljs-keyword">add </span><span class="hljs-keyword">submodule </span>. theme-matery<br></code></pre></td></tr></table></figure><p>但发现提示错误，发现是命令的参数顺序错了，于是改正为</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">git <span class="hljs-keyword">submodule </span><span class="hljs-keyword">add </span>. theme-matery<br></code></pre></td></tr></table></figure><p>还不对，提示子模块必须是一个绝对路径的目录，修改为</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git submodule <span class="hljs-built_in">add</span> ./ theme-matery<br></code></pre></td></tr></table></figure><p>可以了，但发现好像不对，子模块添加成功的提示告诉我，我敲的这个命令是在当前目录添加了一个theme-matery目录，内容是当前目录的所有，这并不是我想要的，于是准备删掉这次操作的产物</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git submodule <span class="hljs-built_in">remove</span> theme-matery<br></code></pre></td></tr></table></figure><p>提示并没有remove这个命令，并提示了我有哪些关于子模块的命令可用，于是</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git submodule deinit</span><br></code></pre></td></tr></table></figure><p>提示需要对全部文件进行子模块撤销</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">git submodule deinit <span class="hljs-comment">--all</span><br></code></pre></td></tr></table></figure><p>提示新建立的子模块已经有了git修改记录，如果此时要撤销子模块，需要进行强制撤销操作</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">git submodule deinit <span class="hljs-comment">--all -f</span><br></code></pre></td></tr></table></figure><p>这样发现，新建的<code>theme-matery</code>文件夹消失了，但还残留一个<code>.gitmodules</code>文件，这是git子模块的描述文件，既然刚才是一次失败的尝试，这个也删掉</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf .gitmodules<br></code></pre></td></tr></table></figure><p>终于恢复如初了，再来，继续尝试其他方法。既然刚才的确生成了子模块描述文件和对应的子项目，那么方向不错，只是生成的位置和预期不符，于是我退到项目根路径重新操作</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-function"><span class="hljs-title">cd</span></span> ..<br><span class="hljs-function"><span class="hljs-title">cd</span></span> ..<br>git submodule add themes/hexo-theme-matery/ theme-matery<br></code></pre></td></tr></table></figure><p>同样提示了刚才犯的一个错误，指定的子模块要以绝对路径给出</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git submodule add .<span class="hljs-regexp">/themes/</span>hexo-theme-matery/ theme-matery<br></code></pre></td></tr></table></figure><p>这回的确在项目根路径生成子模块了，但也不对，原来命令中的最后一个参数是最终生成的子模块文件夹名称，而不是对于子模块定义的别名，我理解错了，所以还得删掉重来</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">git <span class="hljs-built_in">rm</span> theme<span class="hljs-literal">-matery</span><br>git <span class="hljs-built_in">rm</span> theme<span class="hljs-literal">-matery</span> <span class="hljs-operator">-f</span><br>git <span class="hljs-built_in">rm</span> .gitmodules<br></code></pre></td></tr></table></figure><p>这我就迷茫了，到底应该怎么添加子模块呢，再看网上查的文章，里面举的例子是把一个远程git项目下载到根项目中并作为子模块，前提是我原来只有一个git根项目，然后再添加一个远程git项目到本地的git项目的一个子文件夹作为一个子模块存在，下载+子模块初始化两步合并操作，但我的情况是，我本地已经是一个git根项目里套着一个别人的git项目了，想在本地操作，把这个子git项目变成根git项目的子模块。</p><p>emmmmm…</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>灵光一闪，有了办法</p><p>反正刚才已经把本地的主题项目同步到远端新建的空项目了，所以也就是我修改过配置文件的主题项目已经在远端有了备份，所以我可以把本地的删掉，然后按照参考文章里的做法，通过下载远端项目到本地并初始化为子模块的方式进行操作了</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">git submodule <span class="hljs-keyword">add</span><span class="language-bash"> git@git.coding.net:daemonG/my-hexo-theme-matery.git themes/my-hexo-theme-matery</span><br></code></pre></td></tr></table></figure><p>完美，效果是我想要的</p><p>接下来还有提交的问题，我已经预料到这个问题，虽然是子模块，但肯定也存在提交的问题，毕竟是两个独立的git项目，只是存在父子关联关系，应该存在<code>单独提交父项目</code>、<code>单独提交子项目</code>和<code>同时提交父项目和子项目</code>三种情况</p><p>先试一下</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git <span class="hljs-keyword">add</span> .<br>git <span class="hljs-keyword">commit</span> -m <span class="hljs-string">&#x27;add theme/matery as submodule&#x27;</span><br></code></pre></td></tr></table></figure><p>在根目录发现这样提交并不会提交子模块的修改</p><p>难道是子模块的修改没被git管理到？</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git submodule <span class="hljs-built_in">add</span> .<br>git <span class="hljs-built_in">add</span> . --recursive<br></code></pre></td></tr></table></figure><p>呃，这都是无用操作</p><p>再试了一下参考文章里的<code>git commit -am &#39;update config of submodule&#39;</code>，也不行</p><p>感到无助的时候回归官方文档<a href="https://git-scm.com/book/zh/v1/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97">Git 工具 - 子模块</a>和另一篇文章的参考<a href="https://www.jianshu.com/p/384c73fe173f">Git Submodule的使用</a>，有一句说法醍醐灌顶</p><blockquote><p>主git仓库中存在.gitmodules文件，它记录了submodule的基本信息。例如remote地址。<br>同时在某处记录了主git仓库所用的submodule的commit号。<br>主git仓库并不同步submodule中的所有代码，而是同步其remote地址和commit号，每个clone都是根据这两个信息自行到remote地址获取到该commit版本的内容。所以，如果你要更新submodule必须做上面的操作步骤。而你操作完成后，你的git仓库中submodule的commit号得到更新。</p></blockquote><p>所以，根项目想要把子模块的修改一并作为主项目的一部分进行提交，需要察觉到子模块中的commit号改变</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-function"><span class="hljs-title">cd</span></span> ..<br><span class="hljs-function"><span class="hljs-title">cd</span></span> ..<br>git add .<br>git commit -m <span class="hljs-string">&#x27;update config of submodule&#x27;</span><br></code></pre></td></tr></table></figure><p>这样再回到主项目，子模块的提交就一并提交到主项目的远程了，当然子项目还是“自治”的，子模块的提交还是子模块的提交，它也是一个独立的git项目</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>虽然啰嗦了这么一大篇，主要是为了再现当时的各种失败尝试，这样在日后遇到问题时能够想起当时的思路。但也免不了此时的结论就是最佳的方案，可能还有一些操作是错误的，或者存在隐患的，关于git子模块的使用还在进一步的实践和学习中。</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>刚做了这样的尝试，博客就崩了，发布上去直接白屏，经过多方排查，想到是我重新命名了主题项目的名称，而整个hexo的设计都是约定优于配置的，所以改动主题项目名，必定导致配置上对不上，出现报错，并且还不好定位到错误，还好想到了是这里的问题，所以把根项目配置文件中theme的配置项改为修改后的名称，博客恢复正常了。</p><h3 id="子模块常用命令"><a href="#子模块常用命令" class="headerlink" title="子模块常用命令"></a>子模块常用命令</h3><h4 id="改动子模块"><a href="#改动子模块" class="headerlink" title="改动子模块"></a>改动子模块</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">cd 子模块目录<br>git <span class="hljs-keyword">add</span> .<br>git <span class="hljs-keyword">commit</span> -m <span class="hljs-string">&#x27;像正常修改提交git项目一样操作&#x27;</span><br>git push<br>cd 父模块目录<br>git <span class="hljs-keyword">add</span> .<br>git <span class="hljs-keyword">commit</span> -m <span class="hljs-string">&#x27;提交父模块中子模块的改动&#x27;</span><br>git push<br></code></pre></td></tr></table></figure><p>核心步骤：进到子模块目录进行提交，再回到父模块项目再次提交</p><h4 id="更新子模块"><a href="#更新子模块" class="headerlink" title="更新子模块"></a>更新子模块</h4><h5 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h5><p>在父模块目录遍历更新其下的子模块</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cd</span> 父模块目录<br>git submodule <span class="hljs-keyword">foreach</span> git pull<br></code></pre></td></tr></table></figure><h5 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h5><p>进入到子模块目录中正常更新</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> 子模块<br>git pull<br></code></pre></td></tr></table></figure><h4 id="下载包含子模块的git项目"><a href="#下载包含子模块的git项目" class="headerlink" title="下载包含子模块的git项目"></a>下载包含子模块的git项目</h4><p>递归下载，同时下载父模块git项目并递归检查其包含的子模块git项目一并下载</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">项目地址 --recursive</span><br></code></pre></td></tr></table></figure><p>先下载父模块项目，下载后如果父项目包含子模块则会有对应子项目名称的空目录，进入子模块目录初始化子模块</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">项目地址</span><br><span class="hljs-title">cd</span> 子模块目录<br>git submodule init<br>git submodule update<br></code></pre></td></tr></table></figure><p><code>git submodule update</code>用以确保子模块更新到最新和下载完整，比如使用递归下载<code>git clone 项目地址 --recursive</code>时下载不全的情况</p><h4 id="移除子模块"><a href="#移除子模块" class="headerlink" title="移除子模块"></a>移除子模块</h4><p>git不支持直接删除子模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> 子模块<br>git <span class="hljs-built_in">rm</span> --cached .<br><span class="hljs-built_in">cd</span> 父模块<br><span class="hljs-built_in">rm</span> -rf 子模块<br><span class="hljs-built_in">rm</span> .gitmodules<br></code></pre></td></tr></table></figure><p><del>待补充</del></p><p><del>总结hexo的优点和缺点</del></p><h2 id="hexo优缺点"><a href="#hexo优缺点" class="headerlink" title="hexo优缺点"></a>hexo优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>高度可定制化</li><li>支持二次开发</li><li>开源，具备维护性并可参与到功能开发中</li><li>满足用户极客心理的诉求</li><li>主题拓展性强，有活跃的群体在丰富着可用的主题</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>不稳定，区别于知乎、简书这样的商业产品，具备专业团队保证使用的稳定性</li><li>使用基于配置，需要对配置规则较熟悉，否则会产生预料之外的错误，并且不易定位到</li><li>依赖于git、git远程仓库和pages服务，如果想通过自己的域名访问博客还依赖域名服务（以及域名租用的费用）</li></ul><h3 id="使用建议"><a href="#使用建议" class="headerlink" title="使用建议"></a>使用建议</h3><h4 id="对博客源项目进行git独立项目备份"><a href="#对博客源项目进行git独立项目备份" class="headerlink" title="对博客源项目进行git独立项目备份"></a>对博客源项目进行git独立项目备份</h4><p>因为使用hexo-deployer发布到远端git仓库的是对源项目进行编译后的文件，与原项目有着完全不同的目录格式，一旦源项目丢失，无法通过已经发布的远程git项目逆向生成</p><h4 id="对使用到的主题项目进行独立项目备份"><a href="#对使用到的主题项目进行独立项目备份" class="headerlink" title="对使用到的主题项目进行独立项目备份"></a>对使用到的主题项目进行独立项目备份</h4><p>因为主题项目一般都是独立的git项目，也会独立的更新功能，如果不能很好的将其作为子模块和博客项目关联并对其进行独立git项目备份的话，在换电脑或主题项目变更后，很难保留用户自己的修改</p><h4 id="对每一次的博客变动在本地发布测试通过后再向远端部署"><a href="#对每一次的博客变动在本地发布测试通过后再向远端部署" class="headerlink" title="对每一次的博客变动在本地发布测试通过后再向远端部署"></a>对每一次的博客变动在本地发布测试通过后再向远端部署</h4><p>因为hexo是基于配置约定的，所以有时用户会错误的使用一些命令或配置修改，会导致hexo在部署到远端的时候发生错误，而产生覆盖远端发布文件，导致博客不可访问的问题。所以对待hexo博客要像对待一个web项目一样经过本地测试，命令如下（s为server的首字母标识）</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo s</span><br></code></pre></td></tr></table></figure><p>如果默认的4000端口被占用，可通过添加<code>-p</code>参数指定其他端口</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">hexo</span> s -p <span class="hljs-number">4001</span><br></code></pre></td></tr></table></figure><p>经本地验证无误，符合改动预期后再发布远程</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g -d</span><br></code></pre></td></tr></table></figure><h4 id="其他情况"><a href="#其他情况" class="headerlink" title="其他情况"></a>其他情况</h4><p>还有可能导致博客无法正常访问的原因可能是pages服务配置不正确，或者域名不可用，域名过期等原因，需要查阅网上其他人的解决方案</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://segmentfault.com/a/1190000003076028">使用Git Submodule管理子模块</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用Python生成柱状图、折线图、饼状图来统计自己的手机话费</title>
    <link href="/wilson-blog-hexo/2019/05/07/%E7%94%A8Python%E7%94%9F%E6%88%90%E6%9F%B1%E7%8A%B6%E5%9B%BE%E3%80%81%E6%8A%98%E7%BA%BF%E5%9B%BE%E3%80%81%E9%A5%BC%E7%8A%B6%E5%9B%BE%E6%9D%A5%E7%BB%9F%E8%AE%A1%E8%87%AA%E5%B7%B1%E7%9A%84%E6%89%8B%E6%9C%BA%E8%AF%9D%E8%B4%B9/"/>
    <url>/wilson-blog-hexo/2019/05/07/%E7%94%A8Python%E7%94%9F%E6%88%90%E6%9F%B1%E7%8A%B6%E5%9B%BE%E3%80%81%E6%8A%98%E7%BA%BF%E5%9B%BE%E3%80%81%E9%A5%BC%E7%8A%B6%E5%9B%BE%E6%9D%A5%E7%BB%9F%E8%AE%A1%E8%87%AA%E5%B7%B1%E7%9A%84%E6%89%8B%E6%9C%BA%E8%AF%9D%E8%B4%B9/</url>
    
    <content type="html"><![CDATA[<p>用Python生成柱状图、折线图、饼状图来统计自己的手机话费</p><span id="more"></span><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul><li>macOS</li><li>PyCharm</li></ul><h1 id="依赖库"><a href="#依赖库" class="headerlink" title="依赖库"></a>依赖库</h1><ul><li>matplotlib</li><li>numpy</li></ul><h1 id="中文字体"><a href="#中文字体" class="headerlink" title="中文字体"></a>中文字体</h1><p><a href="https://www.fontpalace.com/font-details/SimHei/">SimHei</a></p><h1 id="步骤详解"><a href="#步骤详解" class="headerlink" title="步骤详解"></a>步骤详解</h1><h2 id="一、配置依赖包"><a href="#一、配置依赖包" class="headerlink" title="一、配置依赖包"></a>一、配置依赖包</h2><p>使用pycharm，直接依赖 matplotlib，如果当前环境变量的pip中不包含 matplotlib 库则会报错，根据IDE提示自动下载 matplotlib 库</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> matplotlib<br></code></pre></td></tr></table></figure><h2 id="二、配置中文字体"><a href="#二、配置中文字体" class="headerlink" title="二、配置中文字体"></a>二、配置中文字体</h2><p>下载中文字体文件 <a href="https://www.fontpalace.com/font-details/SimHei/">SimHei</a> 并双击则安装到操作系统的字体库，然后输入一下代码找到 matplotlib 库的字体目录</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> matplotlib<br><span class="hljs-built_in">print</span>(matplotlib.matplotlib_fname())<br></code></pre></td></tr></table></figure><ol><li>参考输出<code>/usr/local/lib/python3.7/site-packages/matplotlib/mpl-data/matplotlibrc</code></li><li>打开finder（访达）并按command+shift+g</li><li>输入上面得到的路径并前往</li><li>找到 matplotlib 字体文件库，如<code>/usr/local/lib/python3.7/site-packages/matplotlib/mpl-data/fonts/ttf</code></li><li>将下载的SimHei.ttf文件拷贝到这里</li><li>找到字体配置文件 matplotlibrc 可能在<code>/usr/local/lib/python3.7/site-packages/matplotlib/mpl-data/</code>目录下</li><li>修改其中的以下三项</li><li>重新加载字体配置使新增字体生效</li></ol><p>matplotlibrc配置</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada">font.family : <span class="hljs-type">sans</span>-serif<br>font.sans-serif : <span class="hljs-type">SimHei</span>, Bitstream Vera Sans, Lucida Grande, Verdana, Geneva, Lucid, Arial, Helvetica, Avant Garde, sans-serif<br>axes.unicode_minus:<span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p>重新加载字体配置</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">from</span> matplotlib.font_manager <span class="hljs-keyword">import</span> _rebuild<br>_rebuild()<br></code></pre></td></tr></table></figure><h2 id="三、准备数据源"><a href="#三、准备数据源" class="headerlink" title="三、准备数据源"></a>三、准备数据源</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py">mobile_176xxxx4617 = [<span class="hljs-number">6.33</span>, <span class="hljs-number">24.1</span>, <span class="hljs-number">40.7</span>, <span class="hljs-number">47.9</span>, <span class="hljs-number">31.9</span>, <span class="hljs-number">31.4</span>, <span class="hljs-number">41.7</span>, <span class="hljs-number">46.4</span>, <span class="hljs-number">38.9</span>, <span class="hljs-number">39</span>, <span class="hljs-number">48</span>, <span class="hljs-number">47.4</span>]<br>mobile_155xxxx9617 = [<span class="hljs-number">41.4</span>, <span class="hljs-number">36.5</span>, <span class="hljs-number">16.4</span>, <span class="hljs-number">16.6</span>, <span class="hljs-number">16.1</span>, <span class="hljs-number">16</span>, <span class="hljs-number">16</span>, <span class="hljs-number">31.2</span>, <span class="hljs-number">20</span>, <span class="hljs-number">16</span>, <span class="hljs-number">22.1</span>, <span class="hljs-number">16</span>]<br>mobile_173xxxx9636 = [<span class="hljs-number">9.4</span>, <span class="hljs-number">9.1</span>, <span class="hljs-number">9.7</span>, <span class="hljs-number">9.1</span>, <span class="hljs-number">9.2</span>, <span class="hljs-number">9</span>, <span class="hljs-number">9</span>, <span class="hljs-number">9.1</span>, <span class="hljs-number">39</span>, <span class="hljs-number">9</span>, <span class="hljs-number">19.22</span>, <span class="hljs-number">19</span>]<br>time = [<span class="hljs-string">&#x27;2018.4&#x27;</span>, <span class="hljs-string">&#x27;2018.5&#x27;</span>, <span class="hljs-string">&#x27;2018.6&#x27;</span>, <span class="hljs-string">&#x27;2018.7&#x27;</span>, <span class="hljs-string">&#x27;2018.8&#x27;</span>, <span class="hljs-string">&#x27;2018.9&#x27;</span>, <span class="hljs-string">&#x27;2018.10&#x27;</span>, <span class="hljs-string">&#x27;2018.11&#x27;</span>, <span class="hljs-string">&#x27;2018.12&#x27;</span>, <span class="hljs-string">&#x27;2019.1&#x27;</span>, <span class="hljs-string">&#x27;2019.2&#x27;</span>, <span class="hljs-string">&#x27;2019.3&#x27;</span>]<br></code></pre></td></tr></table></figure><h2 id="四、生成统计图"><a href="#四、生成统计图" class="headerlink" title="四、生成统计图"></a>四、生成统计图</h2><ul><li>柱状图 module_histogram.py</li><li>折线图 module_line_graph.py</li><li>饼状图 module_pie_chart.py</li></ul><h2 id="五、效果预览图"><a href="#五、效果预览图" class="headerlink" title="五、效果预览图"></a>五、效果预览图</h2><p>柱状图</p><p><img src="https://user-images.githubusercontent.com/23159565/80947706-4cb2b080-8e23-11ea-9d0e-e2fa99070686.png" alt="image"></p><p>折线图</p><p><img src="https://user-images.githubusercontent.com/23159565/80947718-51776480-8e23-11ea-84a5-7963ddc0790a.png" alt="image"></p><p>饼状图<br><img src="https://user-images.githubusercontent.com/23159565/80947743-59370900-8e23-11ea-945f-f3080adb2eb5.png" alt="image"></p><p><a href="https://github.com/barnett617/python_analysis">项目地址</a></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于WEB中宽高的一些整理</title>
    <link href="/wilson-blog-hexo/2019/04/12/web-height/"/>
    <url>/wilson-blog-hexo/2019/04/12/web-height/</url>
    
    <content type="html"><![CDATA[<h1 id="关于WEB中宽高的一些整理"><a href="#关于WEB中宽高的一些整理" class="headerlink" title="关于WEB中宽高的一些整理"></a>关于WEB中宽高的一些整理</h1><h2 id="屏幕宽高（screen-width-screen-height）"><a href="#屏幕宽高（screen-width-screen-height）" class="headerlink" title="屏幕宽高（screen.width &amp; screen.height）"></a>屏幕宽高（screen.width &amp; screen.height）</h2><p>屏幕宽高的计量单位是<code>设备像素</code>（但IE8对其计量单位使用<code>CSS像素</code>）</p><p><img src="/wilson-blog-hexo/img/post/web-height/web-height-01.jpeg"></p><p><img src="/wilson-blog-hexo/img/post/web-height/web-height-02.jpeg"></p><p>由此可见</p><ol><li>截图工具对于截图的计量（值和单位）基本与 screen.width &amp; screen.height 一致（差1）</li><li>截图工具是对于用户的设备屏幕上的某个区域进行选择</li><li><code>screen</code>的属性更偏向于表示物理设备的属性参数</li><li><code>window</code>的属性更偏向于表示WEB的参数</li></ol><p>进一步观察</p><p><code>screen</code>还有4个更加“实用”的属性</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">screen.availHeight</span><br><span class="hljs-keyword"></span><span class="hljs-number">877</span><br><span class="hljs-keyword">screen.availWidth</span><br><span class="hljs-keyword"></span><span class="hljs-number">1440</span><br><span class="hljs-keyword">screen.availLeft</span><br><span class="hljs-keyword"></span><span class="hljs-number">0</span><br><span class="hljs-keyword">screen.availTop</span><br><span class="hljs-keyword"></span><span class="hljs-number">23</span><br></code></pre></td></tr></table></figure><p>为什么说实用呢，因为这些屏幕的实际宽高并不一定在用户应用中都能被使用，比如这里可以看到<code>screen.availTop</code>有23的长度是不在可用范围呢，那这段长度是什么呢，见下图</p><p><img src="/wilson-blog-hexo/img/post/web-height/web-height-03.jpeg"></p><p>其实是设备（电脑）系统本身的状态栏高度，这一部分高度在浏览器未全屏显示的时候的确是不算在应用（浏览器）高度内的，同时很明显可以看到<code>screen.availHeight + screen.availTop = 877 + 23 = 900 = screen.height</code>，这三个属性的值形成一个完整的闭环，详细的描述了设备屏幕在不同使用场景下的参数</p><h2 id="窗体宽高（window-width-window-height）"><a href="#窗体宽高（window-width-window-height）" class="headerlink" title="窗体宽高（window.width &amp; window.height）"></a>窗体宽高（window.width &amp; window.height）</h2><p>窗体宽高的计量单位使用<code>CSS像素</code>（但不被IE支持，并且欧朋浏览器对其计量单位使用<code>设备像素</code>）</p><p>以上所说的计量单位区分是因为在浏览器中访问这些对象属性的时候返回值只是一个数字，而没有单位，其在不同的环境中（浏览器类型）计算方式并不同</p><p><img src="/wilson-blog-hexo/img/post/web-height/web-height-04.jpeg"></p><p><img src="/wilson-blog-hexo/img/post/web-height/web-height-05.jpeg"></p><p>以下两张图可见</p><p>window.innerHeight &amp; window.innerWidth是随着浏览器视窗当前的真实展现宽高变化的</p><p><img src="/wilson-blog-hexo/img/post/web-height/web-height-06.jpeg"></p><p><img src="/wilson-blog-hexo/img/post/web-height/web-height-07.jpeg"></p><h2 id="滑动偏移量（Scrolling-offset）"><a href="#滑动偏移量（Scrolling-offset）" class="headerlink" title="滑动偏移量（Scrolling offset）"></a>滑动偏移量（Scrolling offset）</h2><p>实验如图</p><p><img src="/wilson-blog-hexo/img/post/web-height/web-height-08.jpeg"></p><p>当前位置时</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-built_in">window</span>.pageYOffset<br><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p><img src="/wilson-blog-hexo/img/post/web-height/web-height-09.jpeg"></p><p>而滑动到此位置时</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-built_in">window</span>.pageYOffset<br><span class="hljs-number">416</span><br></code></pre></td></tr></table></figure><p>两次之前的滑动差值第二次减去第一次的416其实是屏幕在Y轴上的滚动量，并且由于这是计算视窗滑动量，所以在不同的浏览器上计算方式没有差别</p><p><img src="/wilson-blog-hexo/img/post/web-height/web-height-10.jpeg"></p><p>存在如下一个关系</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">document<span class="hljs-selector-class">.documentElement</span><span class="hljs-selector-class">.clientHeight</span><br><span class="hljs-number">797</span><br>window<span class="hljs-selector-class">.innerHeight</span><br><span class="hljs-number">797</span><br>window<span class="hljs-selector-class">.outerHeight</span><br><span class="hljs-number">877</span><br>screen<span class="hljs-selector-class">.availHeight</span><br><span class="hljs-number">877</span><br></code></pre></td></tr></table></figure><p><img src="/wilson-blog-hexo/img/post/web-height/web-height-11.jpeg"></p><p>还有一个反应WEB文档真实宽高的属性</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">document<span class="hljs-selector-class">.documentElement</span><span class="hljs-selector-class">.scrollHeight</span><br><span class="hljs-number">12061</span><br></code></pre></td></tr></table></figure><p>参考文章</p><ul><li><a href="https://www.quirksmode.org/mobile/viewports.html#link12">A tale of two viewports — part one</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JS的方法参数传递（按值传递）</title>
    <link href="/wilson-blog-hexo/2019/02/12/JS%E7%9A%84%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%EF%BC%88%E6%8C%89%E5%80%BC%E4%BC%A0%E9%80%92%EF%BC%89/"/>
    <url>/wilson-blog-hexo/2019/02/12/JS%E7%9A%84%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%EF%BC%88%E6%8C%89%E5%80%BC%E4%BC%A0%E9%80%92%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>出处：JavaScript高级程序设计（第三版）第四章——变量、作用域和内存问题</p><span id="more"></span><h2 id="一句话总结"><a href="#一句话总结" class="headerlink" title="一句话总结"></a>一句话总结</h2><p>JS的方法参数是<code>按值传递</code>的</p><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>ES变量分为两种<code>数据类型</code>的值：基本类型和引用类型</p><h3 id="基本类型存储"><a href="#基本类型存储" class="headerlink" title="基本类型存储"></a>基本类型存储</h3><p>基本类型的值在申请内存时是固定大小，所以保存在<code>栈内存</code>，故在复制基本类型变量时也是在栈内存中新开辟一份内存空间进行存储</p><h3 id="引用类型存储"><a href="#引用类型存储" class="headerlink" title="引用类型存储"></a>引用类型存储</h3><p>而引用类型变量的值大小不固定，且可任意改动，引用类型变量的本质是指向某一块内存区域的指针变量，故引用类型变量存储在内存自由分配的<code>堆内存</code>中，在对引用变量作直接复制（重新赋值）时也只是将新的变量指向相同的一片内存区域（即两个指针指向同一片堆内存空间）</p><h4 id="引用类型探析"><a href="#引用类型探析" class="headerlink" title="引用类型探析"></a>引用类型探析</h4><p>引用类型的值是存放在内存中的<code>对象</code>，但由于JS语言不允许直接访问<code>内存</code>中的位置（即不能直接操作对象的内存空间），故操作对象时实际是在操作对象的<code>引用</code>，而不是直接操作实际的对象本身（即引用类型的值是按<code>引用</code>访问的，这个引用可以理解为对象的句柄）</p><h5 id="特别地"><a href="#特别地" class="headerlink" title="特别地"></a>特别地</h5><p>很多语言对于字符串是以对象形式进行表示，故为引用类型变量，但ES不是</p><h2 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h2><p>ES中所有函数（方法）的参数都是<code>按值传递</code>的，即调用一个方法时，是将调用该方法时传入该方法的参数的<code>值</code>复制给函数内部的参数（将实参的值复制给形参）</p><h3 id="具体分类"><a href="#具体分类" class="headerlink" title="具体分类"></a>具体分类</h3><p>JS在访问变量时有按值和按引用两种方式，但参数只会按值传递</p><h4 id="向参数传递基本类型的值"><a href="#向参数传递基本类型的值" class="headerlink" title="向参数传递基本类型的值"></a>向参数传递<code>基本类型</code>的值</h4><p>被传递的值会被复制给一个<code>局部变量</code>（这个局部变量就是形参，在ES中就是arguments对象的一个元素）</p><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">addTen</span>(<span class="hljs-params">num</span>) &#123;<br>  num += <span class="hljs-number">10</span>;<br>  <span class="hljs-keyword">return</span> num;<br>&#125;<br><span class="hljs-keyword">var</span> count = <span class="hljs-number">20</span>;<br><span class="hljs-keyword">var</span> result = <span class="hljs-title function_">addTen</span>(count);<br><span class="hljs-comment">// 看有没有影响到原变量</span><br><span class="hljs-title function_">alert</span>(count);<br><span class="hljs-title function_">alert</span>(result)<br></code></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-number">20</span><br><span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><h4 id="向参数传递引用类型的值"><a href="#向参数传递引用类型的值" class="headerlink" title="向参数传递引用类型的值"></a>向参数传递<code>引用类型</code>的值</h4><p>JS会把被传递的值的地址复制给一个局部变量，因为复制的是地址，所以在函数执行时，函数形参在函数内部改变时会影响到函数外部的该引用变量的值，因为两个地址指向同一片内存区域，但在函数执行结束，函数内部的局部变量被销毁，影响即会消失</p><h5 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">setName</span>(<span class="hljs-params">obj</span>) &#123;<br>  obj.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;tom&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><span class="hljs-title function_">setName</span>(person);<br><span class="hljs-comment">// 当把person传递给setName时，obj和person都指向相同的内存，所以对obj所指向的内存区域修改会影响到person</span><br><span class="hljs-title function_">alert</span>(person.<span class="hljs-property">name</span>);<br></code></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">tom<br></code></pre></td></tr></table></figure><h6 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h6><p>因为person指向的对象在堆内存中只存在一个，并且是全局对象</p><h4 id="求证参数是按值传递而不是按引用传递"><a href="#求证参数是按值传递而不是按引用传递" class="headerlink" title="求证参数是按值传递而不是按引用传递"></a>求证参数是按值传递而不是按引用传递</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">setName</span>(<span class="hljs-params">obj</span>) &#123;<br>  obj.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;tom&#x27;</span>;<br>  obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>  obj.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;jerry&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><span class="hljs-title function_">setName</span>(person);<br><span class="hljs-comment">// 当把person传递给setName时，obj和person都指向相同的内存，所以对obj所指向的内存区域修改会影响到person</span><br><span class="hljs-title function_">alert</span>(person.<span class="hljs-property">name</span>);<br></code></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">tom<br></code></pre></td></tr></table></figure><h5 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h5><p>函数内部重新生成的对象obj，并对其新赋值jerry并没有改变函数外部person对应的属性值</p><p>如果向引用类型参数赋值是按引用赋值，那么person的name应该变为jerry，因为假设形参obj拿到的是person的引用，而不是person引用的值，那么当函数内部生成新对象，并对obj进行重新指向时，形参obj的指向改变，外部的person的指向也应该改变，但是结果证明alert(person.name)显示的依旧是tom，所以即使函数参数是引用类型，也是按值传递</p><p>而实际上在函数内部重写obj时，这个变量引用的是一个<code>局部对象变量</code>，该局部对象会在<code>函数执行完毕</code>之时销毁</p><p>原文自 <a href="https://github.com/barnett617/wilson-blog-hexo">个人github博客</a>，欢迎star</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅拷贝和深拷贝</title>
    <link href="/wilson-blog-hexo/2019/01/22/clone/"/>
    <url>/wilson-blog-hexo/2019/01/22/clone/</url>
    
    <content type="html"><![CDATA[<h1 id="浅拷贝和深拷贝"><a href="#浅拷贝和深拷贝" class="headerlink" title="浅拷贝和深拷贝"></a>浅拷贝和深拷贝</h1><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><h3 id="典型案例"><a href="#典型案例" class="headerlink" title="典型案例"></a>典型案例</h3><ul><li>Object.assign()</li><li>展开赋值</li><li>Array.prototype.slice()</li><li>Array.prototype.concat()</li></ul><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>浅拷贝对于js基本类型进行正确拷贝，对引用类型只拷贝指针，但指针指向的堆内存相同，所以对于原对象的基本类型属性进行改变不会影响到新拷贝出的对象对应的属性，但对原对象的引用类型属性改变，新拷贝的对象对应的属性也会随之变化</p><h3 id="Object-assign实例"><a href="#Object-assign实例" class="headerlink" title="Object.assign实例"></a>Object.assign实例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-attr">child</span>: &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;tom&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">10</span>&#125;&#125;;<br><span class="hljs-keyword">var</span> copy = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;&#125;, obj)<br><br>obj<br><span class="hljs-attr">child</span>:<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">20</span><br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;jerry&quot;</span><br><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;world&quot;</span><br><br>copy<br><span class="hljs-attr">child</span>:<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">20</span><br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;jerry&quot;</span><br><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;hello&quot;</span><br><br>obj.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;world&#x27;</span>;<br>obj.<span class="hljs-property">child</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;jerry&#x27;</span>;<br>obj.<span class="hljs-property">child</span>.<span class="hljs-property">age</span> = <span class="hljs-number">20</span>;<br><br>obj<br><span class="hljs-attr">child</span>:<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">20</span><br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;jerry&quot;</span><br><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;world&quot;</span><br>copy<br><span class="hljs-attr">child</span>:<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">20</span><br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;jerry&quot;</span><br><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;hello&quot;</span><br></code></pre></td></tr></table></figure><h3 id="rest实例"><a href="#rest实例" class="headerlink" title="rest实例"></a>rest实例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> rest = &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;iamrest&#x27;</span>, <span class="hljs-attr">child</span>: &#123;<span class="hljs-attr">childname</span>: <span class="hljs-string">&#x27;iamchild&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">30</span>&#125;&#125;;<br><span class="hljs-literal">undefined</span><br><span class="hljs-keyword">var</span> restcopy = &#123;...rest&#125;<br><span class="hljs-literal">undefined</span><br>rest<br>&#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;iamrest&quot;</span>, <span class="hljs-attr">child</span>: &#123;…&#125;&#125;<br><span class="hljs-attr">child</span>: &#123;<span class="hljs-attr">childname</span>: <span class="hljs-string">&quot;iamchild&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">30</span>&#125;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;iamrest&quot;</span><br>restcopy<br>&#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;iamrest&quot;</span>, <span class="hljs-attr">child</span>: &#123;…&#125;&#125;<br><span class="hljs-attr">child</span>: &#123;<span class="hljs-attr">childname</span>: <span class="hljs-string">&quot;iamchild&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">30</span>&#125;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;iamrest&quot;</span><br><br>rest.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;imnotrest&#x27;</span>;<br>rest.<span class="hljs-property">child</span>.<span class="hljs-property">age</span> = <span class="hljs-number">40</span><br><span class="hljs-number">40</span><br>rest<br>&#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;imnotrest&quot;</span>, <span class="hljs-attr">child</span>: &#123;…&#125;&#125;<br><span class="hljs-attr">child</span>: &#123;<span class="hljs-attr">childname</span>: <span class="hljs-string">&quot;iamchild&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">40</span>&#125;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;imnotrest&quot;</span><br><span class="hljs-attr">__proto__</span>: <span class="hljs-title class_">Object</span><br>restcopy<br>&#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;iamrest&quot;</span>, <span class="hljs-attr">child</span>: &#123;…&#125;&#125;<br><span class="hljs-attr">child</span>: &#123;<span class="hljs-attr">childname</span>: <span class="hljs-string">&quot;iamchild&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">40</span>&#125;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;iamrest&quot;</span><br><span class="hljs-attr">__proto__</span>: <span class="hljs-title class_">Object</span><br></code></pre></td></tr></table></figure><h3 id="Array-prototype-slice实例"><a href="#Array-prototype-slice实例" class="headerlink" title="Array.prototype.slice实例"></a>Array.prototype.slice实例</h3><blockquote><p>MDN官方定义slice方法用于数组对象浅拷贝<code>slice() 方法返回一个新的数组对象，这一对象是一个由 begin和 end（不包括end）决定的原数组的浅拷贝。原始数组不会被改变。</code>，详见<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/slice">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects&#x2F;Array&#x2F;slice</a></p></blockquote><h4 id="slice方法用法（核心：对数组进行浅拷贝）"><a href="#slice方法用法（核心：对数组进行浅拷贝）" class="headerlink" title="slice方法用法（核心：对数组进行浅拷贝）"></a>slice方法用法（核心：对数组进行浅拷贝）</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ruby">arr.slice();<br><span class="hljs-regexp">//</span> [<span class="hljs-number">0</span>, <span class="hljs-keyword">end</span>]<br><br>arr.slice(<span class="hljs-keyword">begin</span>);<br><span class="hljs-regexp">//</span> [<span class="hljs-keyword">begin</span>, <span class="hljs-keyword">end</span>]<br><br>arr.slice(<span class="hljs-keyword">begin</span>, <span class="hljs-keyword">end</span>);<br><span class="hljs-regexp">//</span> [<span class="hljs-keyword">begin</span>, <span class="hljs-keyword">end</span>)<br></code></pre></td></tr></table></figure><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>]];<br><span class="hljs-literal">undefined</span><br><br><span class="hljs-keyword">var</span> slice0 = arr.<span class="hljs-title function_">slice</span>();<br><span class="hljs-literal">undefined</span><br><br>slice0;<br>(<span class="hljs-number">3</span>) [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-title class_">Array</span>(<span class="hljs-number">2</span>)]<br><span class="hljs-number">0</span>: <span class="hljs-number">3</span><br><span class="hljs-number">1</span>: <span class="hljs-number">4</span><br><span class="hljs-number">2</span>: (<span class="hljs-number">2</span>) [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br><span class="hljs-attr">length</span>: <span class="hljs-number">3</span><br><span class="hljs-attr">__proto__</span>: <span class="hljs-title class_">Array</span>(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>结论：如果不传任何参数，则对原数组进行完整浅拷贝</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> slice1 = arr.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>);<br><span class="hljs-literal">undefined</span><br><br>slice1;<br>(<span class="hljs-number">2</span>) [<span class="hljs-number">4</span>, <span class="hljs-title class_">Array</span>(<span class="hljs-number">2</span>)]<br><span class="hljs-number">0</span>: <span class="hljs-number">4</span><br><span class="hljs-number">1</span>: (<span class="hljs-number">2</span>) [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br><span class="hljs-attr">length</span>: <span class="hljs-number">2</span><br><span class="hljs-attr">__proto__</span>: <span class="hljs-title class_">Array</span>(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>结论：如果传一个参数，则从数组的该索引位置（包含索引位置的元素）浅拷贝到数组最后一个元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> slice2 = arr.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>);<br><span class="hljs-literal">undefined</span><br><br>slice2<br>(<span class="hljs-number">2</span>) [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><span class="hljs-number">0</span>: <span class="hljs-number">3</span><br><span class="hljs-number">1</span>: <span class="hljs-number">4</span><br><span class="hljs-attr">length</span>: <span class="hljs-number">2</span><br><span class="hljs-attr">__proto__</span>: <span class="hljs-title class_">Array</span>(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>如果传两个参数，则对原数组进行从第一个参数的索引位置（包含该元素）到第二个参数位置止（不包含该元素）进行浅拷贝</p><h4 id="插播数组splice方法的使用（核心：对数组进行切片，同时增删元素，直接对原数组进行操作）"><a href="#插播数组splice方法的使用（核心：对数组进行切片，同时增删元素，直接对原数组进行操作）" class="headerlink" title="插播数组splice方法的使用（核心：对数组进行切片，同时增删元素，直接对原数组进行操作）"></a>插播数组splice方法的使用（核心：对数组进行切片，同时增删元素，直接对原数组进行操作）</h4><p><code>array.splice(start[, deleteCount[, item1[, item2[, ...]]]])</code></p><p>初看这种方法api抽象的表达方式可能会很晕，这里start表示为必填的参数，而后面的中括号内的部分表示可选参数，也就是如果在start后面的第二个参数会被认为是deleteCount，后面不要看嵌套多少层，其实都是从第三个参数开始也都是可填可不填的，如果填了就依次累加，表示要新添加进数组的元素</p><h5 id="方法注意点"><a href="#方法注意点" class="headerlink" title="方法注意点"></a>方法注意点</h5><ol><li>方法返回值是<code>被删除</code>元素所组成的数组</li><li>方法对于元素的删除和新增都基于原数组，即对数组进行直接操作（也就相当于对数组进行区别于栈结构和队列结构的顺序操作，可以像对链表操作一样一样操作数组，修改内部元素）</li></ol><h5 id="参数注意"><a href="#参数注意" class="headerlink" title="参数注意"></a>参数注意</h5><ul><li>start 操作起点</li><li>deleteCount 删除个数</li><li>item 新增元素</li></ul><h6 id="start可以是任意整数，分正整数、负整数和0"><a href="#start可以是任意整数，分正整数、负整数和0" class="headerlink" title="start可以是任意整数，分正整数、负整数和0"></a>start可以是任意整数，分正整数、负整数和0</h6><ul><li>如果是0，则表示从数组第一个元素开始（并且包括start索引所在元素）</li><li>如果是数组长度范围内的负整数，则表示从数组尾部往前数</li><li>如果是数组长度范围内的正整数，则表示从数组头部往后数</li></ul><p>整体看来splice方法属于对数组的高级切片操作，可以对数组同时进行删除、新增元素操作</p><h6 id="deleteCount表示要删除的元素个数，如果为0或者负数时不会删除数组元素"><a href="#deleteCount表示要删除的元素个数，如果为0或者负数时不会删除数组元素" class="headerlink" title="deleteCount表示要删除的元素个数，如果为0或者负数时不会删除数组元素"></a>deleteCount表示要删除的元素个数，如果为0或者负数时不会删除数组元素</h6><h5 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js">[<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>].<span class="hljs-title function_">splice</span>(<span class="hljs-string">&#x27;s&#x27;</span>)<br>(<span class="hljs-number">4</span>) [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]<br>[<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>].<span class="hljs-title function_">splice</span>(<span class="hljs-literal">false</span>)<br>(<span class="hljs-number">4</span>) [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]<br>[<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>].<span class="hljs-title function_">splice</span>(<span class="hljs-literal">true</span>)<br>(<span class="hljs-number">3</span>) [<span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]<br>[<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>].<span class="hljs-title function_">splice</span>(<span class="hljs-number">1000</span>)<br>[]<br>[<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>].<span class="hljs-title function_">splice</span>(-<span class="hljs-number">1000</span>)<br>(<span class="hljs-number">4</span>) [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]<br>[<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>].<span class="hljs-title function_">splice</span>(<span class="hljs-number">0</span>)<br>(<span class="hljs-number">4</span>) [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]<br>[<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>].<span class="hljs-title function_">splice</span>(<span class="hljs-number">1</span>)<br>(<span class="hljs-number">3</span>) [<span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]<br>[<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>].<span class="hljs-title function_">splice</span>(<span class="hljs-number">3.1</span>)<br>[<span class="hljs-number">8</span>]<br>[<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>].<span class="hljs-title function_">splice</span>(<span class="hljs-number">3.6</span>)<br>[<span class="hljs-number">8</span>]<br></code></pre></td></tr></table></figure><p>以上为只传一个参数的情况，此时 deleteCount &#x3D; arr.length - start</p><ul><li>当start传奇怪的参数，比如字符串，splice会试着把字符串转换为数字，如果转换不成功即变成NaN，那么就会当做0处理，会清空数组；</li><li>对于布尔类型数值同样会转换为数字，true是1，false是0；</li><li>对于浮点数，splice会对浮点数做取整处理，即只保留整数部分；</li><li>所以当传一个大于数组长度的正整数，不会删除数组元素，当传一个绝对值大于数组长度的负整数时，deleteCount &#x3D; arr.length - start会得到一个大于数组长度的数，所以会清空数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js">[<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>].<span class="hljs-title function_">splice</span>(<span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-number">3</span>)<br>(<span class="hljs-number">3</span>) [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>]<br>[<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>].<span class="hljs-title function_">splice</span>(<span class="hljs-literal">false</span>, <span class="hljs-number">3</span>)<br>(<span class="hljs-number">3</span>) [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>]<br>[<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>].<span class="hljs-title function_">splice</span>(<span class="hljs-literal">true</span>, <span class="hljs-number">3</span>)<br>(<span class="hljs-number">3</span>) [<span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]<br>[<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>].<span class="hljs-title function_">splice</span>(-<span class="hljs-number">1000</span>, <span class="hljs-number">3</span>)<br>(<span class="hljs-number">3</span>) [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>]<br>[<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>].<span class="hljs-title function_">splice</span>(<span class="hljs-number">1000</span>, <span class="hljs-number">3</span>)<br>[]<br>[<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>].<span class="hljs-title function_">splice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>)<br>(<span class="hljs-number">3</span>) [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>]<br>[<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>].<span class="hljs-title function_">splice</span>(<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-number">3</span>)<br>(<span class="hljs-number">3</span>) [<span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]<br><br><span class="hljs-title class_">Number</span>(<span class="hljs-string">&#x27;s&#x27;</span>)<br><span class="hljs-title class_">NaN</span><br><br>[<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>].<span class="hljs-title function_">splice</span>(<span class="hljs-title class_">NaN</span>, <span class="hljs-number">3</span>)<br>(<span class="hljs-number">3</span>) [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>]<br><br>[<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>].<span class="hljs-title function_">splice</span>(<span class="hljs-number">3.6</span>, <span class="hljs-number">3</span>)<br>[<span class="hljs-number">8</span>]<br>[<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>].<span class="hljs-title function_">splice</span>(<span class="hljs-number">3.2</span>, <span class="hljs-number">3</span>)<br>[<span class="hljs-number">8</span>]<br><br><span class="hljs-title class_">Number</span>(<span class="hljs-number">3.6</span>)<br><span class="hljs-number">3.6</span><br><span class="hljs-built_in">parseInt</span>(<span class="hljs-number">3.6</span>)<br><span class="hljs-number">3</span><br><span class="hljs-built_in">parseInt</span>(<span class="hljs-number">3.2</span>)<br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>以上为传两个参数的情况，这个时候显性地指定了要删除的元素个数，对于start不合理的传参情况会按照上面的处理方式，唯一特别的就是当start为绝对值大于数组长度的整数时，由于删除起点已超出数组范围，所以无论deleteCount为多少，都不会怼数组进行删除操作，而当start为绝对值大于数组长度的负整数时，start会按0处理</p><p>展开剖析反而会显得更复杂，上述仅为理解过程，附上官方原定义：</p><blockquote><p>start​指定修改的开始位置（从0计数）。如果超出了数组的长度，则从数组末尾开始添加内容；如果是负值，则表示从数组末位开始的第几位（从-1计数）；如果负数的绝对值大于数组的长度，则表示开始位置为第0位。</p></blockquote><blockquote><p>deleteCount 可选整数，表示要移除的数组元素的个数。如果 deleteCount 是 0或者负数，则不移除元素。这种情况下，至少应添加一个新元素。<br>如果 deleteCount 大于start 之后的元素的总数，则从 start 后面的元素都将被删除（含第 start 位）。<br>如果deleteCount被省略，则其相当于(arr.length - start)。</p></blockquote><blockquote><p>item1, item2, … 可选<br>要添加进数组的元素,从start 位置开始。如果不指定，则 splice() 将只删除数组元素。</p></blockquote><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>深拷贝即对被拷贝对象进行绝对拷贝，拷贝前后的两个对象绝对独立，互不影响</p><h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> tom = &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;iamtom&#x27;</span>, <span class="hljs-attr">child</span>: &#123;<span class="hljs-attr">age</span>: <span class="hljs-number">20</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;imtomchild&#x27;</span>&#125;&#125;;<br><span class="hljs-literal">undefined</span><br><br><span class="hljs-keyword">var</span> tomcopy = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(tom));<br><span class="hljs-literal">undefined</span><br><br>tomcopy<br>&#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;iamtom&quot;</span>, <span class="hljs-attr">child</span>: &#123;…&#125;&#125;<br><span class="hljs-attr">child</span>: &#123;<span class="hljs-attr">age</span>: <span class="hljs-number">20</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;imtomchild&quot;</span>&#125;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;iamtom&quot;</span><br><span class="hljs-attr">__proto__</span>: <span class="hljs-title class_">Object</span><br><br>tom<br>&#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;iamtom&quot;</span>, <span class="hljs-attr">child</span>: &#123;…&#125;&#125;<br><span class="hljs-attr">child</span>: &#123;<span class="hljs-attr">age</span>: <span class="hljs-number">20</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;imtomchild&quot;</span>&#125;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;iamtom&quot;</span><br><span class="hljs-attr">__proto__</span>: <span class="hljs-title class_">Object</span><br><br>tom.<span class="hljs-property">child</span>.<span class="hljs-property">age</span> = <span class="hljs-number">30</span>;<br><span class="hljs-number">30</span><br><br>tom<br>&#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;iamtom&quot;</span>, <span class="hljs-attr">child</span>: &#123;…&#125;&#125;<br><span class="hljs-attr">child</span>: &#123;<span class="hljs-attr">age</span>: <span class="hljs-number">30</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;imtomchild&quot;</span>&#125;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;iamtom&quot;</span><br><span class="hljs-attr">__proto__</span>: <span class="hljs-title class_">Object</span><br><br>tomcopy<br>&#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;iamtom&quot;</span>, <span class="hljs-attr">child</span>: &#123;…&#125;&#125;<br><span class="hljs-attr">child</span>: &#123;<span class="hljs-attr">age</span>: <span class="hljs-number">20</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;imtomchild&quot;</span>&#125;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;iamtom&quot;</span><br><span class="hljs-attr">__proto__</span>: <span class="hljs-title class_">Object</span><br></code></pre></td></tr></table></figure><p>结论：使用JSON对象的stringify方法对被拷贝对象进行字符串化，再对生成的字符串对象化，会生成一个和原对象完全相同，但内存空间不同的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">11</span>, <span class="hljs-number">49</span>];<br><span class="hljs-literal">undefined</span><br><span class="hljs-keyword">var</span> arrcopy = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(arr));<br><span class="hljs-literal">undefined</span><br><br>arr<br>(<span class="hljs-number">5</span>) [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">11</span>, <span class="hljs-number">49</span>]<br>arrcopy<br>(<span class="hljs-number">5</span>) [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">11</span>, <span class="hljs-number">49</span>]<br><br>arr[<span class="hljs-number">2</span>] = <span class="hljs-number">6</span>;<br><span class="hljs-number">6</span><br><br>arr<br>(<span class="hljs-number">5</span>) [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">11</span>, <span class="hljs-number">49</span>]<br>arrcopy<br>(<span class="hljs-number">5</span>) [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">11</span>, <span class="hljs-number">49</span>]<br></code></pre></td></tr></table></figure><p>结论：数组同样适用（因为数组本质也是对象）</p><h3 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h3><p>对于对象的特殊属性无法拷贝，包括：</p><ul><li>undefined</li><li>symbol值</li><li>函数</li><li>日期类型</li><li>正则类型</li><li>……</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> special = &#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;normal&#x27;</span>,<br><span class="hljs-attr">a</span>: <span class="hljs-literal">undefined</span>,<br><span class="hljs-attr">b</span>: <span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br>&#125;,<br><span class="hljs-attr">c</span>: <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;world&#x27;</span>),<br>&#125;<br><span class="hljs-literal">undefined</span><br><br><span class="hljs-keyword">var</span> specialcopy = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(special))<br><span class="hljs-literal">undefined</span><br><br>special<br>&#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;normal&quot;</span>, <span class="hljs-attr">a</span>: <span class="hljs-literal">undefined</span>, <span class="hljs-attr">b</span>: ƒ, <span class="hljs-attr">c</span>: <span class="hljs-title class_">Symbol</span>(world)&#125;<span class="hljs-attr">a</span>: <span class="hljs-attr">undefinedb</span>: ƒ <span class="hljs-title function_">test</span>()<span class="hljs-attr">c</span>: <span class="hljs-title class_">Symbol</span>(world)<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;normal&quot;</span><span class="hljs-attr">__proto__</span>: <span class="hljs-title class_">Object</span><br><span class="hljs-attr">a</span>: <span class="hljs-literal">undefined</span><br><span class="hljs-attr">b</span>: ƒ <span class="hljs-title function_">test</span>()<br><span class="hljs-attr">c</span>: <span class="hljs-title class_">Symbol</span>(world)<br><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;normal&quot;</span><br><span class="hljs-attr">__proto__</span>: <span class="hljs-title class_">Object</span><br><br>specialcopy<br>&#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;normal&quot;</span>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>js中的“拷贝”（第一篇）——js数据类型</title>
    <link href="/wilson-blog-hexo/2019/01/21/copy/"/>
    <url>/wilson-blog-hexo/2019/01/21/copy/</url>
    
    <content type="html"><![CDATA[<h1 id="js中的“拷贝”（第一篇）——js数据类型"><a href="#js中的“拷贝”（第一篇）——js数据类型" class="headerlink" title="js中的“拷贝”（第一篇）——js数据类型"></a>js中的“拷贝”（第一篇）——js数据类型</h1><h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h2><ul><li>基本类型变量赋值</li><li>引用类型变量赋值</li></ul><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在es6出现以前，js有六大<code>数据类型</code>，由五大<code>基本类型</code>+一个<code>引用类型</code>所组成，五大基本类型分别为<code>undefined</code>、<code>null</code>、<code>boolean</code>、<code>number</code>、<code>string</code>，一大引用类型为<code>object</code></p><p>但随着es6的普及（从新知识变成基本知识），新添一位成员名叫symbol，js的数据类型格局变为六大<code>基本类型</code>+一大<code>引用类型</code>，symbol的出现被列入<code>基本类型</code>队列，而引用类型并无变化</p><h3 id="基本类型变量（primitive-value）"><a href="#基本类型变量（primitive-value）" class="headerlink" title="基本类型变量（primitive value）"></a>基本类型变量（primitive value）</h3><ol><li>undefined</li><li>null</li><li>boolean</li><li>number</li><li>string</li><li>symbol <del>object</del></li></ol><p>另附以上六种基本类型在<code>chrome71</code>控制台中实际输出</p><h4 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">typeof</span> <span class="hljs-literal">undefined</span><br><span class="hljs-string">&quot;undefined&quot;</span><br></code></pre></td></tr></table></figure><p><code>undefined</code>首字母不大写</p><h4 id="null"><a href="#null" class="headerlink" title="null"></a>null</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">typeof</span> <span class="hljs-literal">null</span><br><span class="hljs-string">&quot;object&quot;</span><br></code></pre></td></tr></table></figure><p>空对象的类型当然是对象</p><h4 id="boolean"><a href="#boolean" class="headerlink" title="boolean"></a>boolean</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Boolean</span>(<span class="hljs-literal">true</span>)<br><span class="hljs-string">&quot;boolean&quot;</span><br></code></pre></td></tr></table></figure><p><code>boolean</code>首字母不大写</p><p><code>Boolean</code>是<code>window</code>对象提供的js全局方法，用于将一个值转换为布尔类型，以下是我能想到比较有代表的转换case:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Boolean</span>()<br><span class="hljs-literal">false</span><br><span class="hljs-title class_">Boolean</span>(<span class="hljs-literal">false</span>)<br><span class="hljs-literal">false</span><br><span class="hljs-title class_">Boolean</span>(<span class="hljs-number">0</span>)<br><span class="hljs-literal">false</span><br><span class="hljs-title class_">Boolean</span>(<span class="hljs-number">111</span>)<br><span class="hljs-literal">true</span><br><span class="hljs-title class_">Boolean</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-literal">false</span><br><span class="hljs-title class_">Boolean</span>(<span class="hljs-literal">undefined</span>)<br><span class="hljs-literal">false</span><br><span class="hljs-title class_">Boolean</span>(<span class="hljs-literal">null</span>)<br><span class="hljs-literal">false</span><br><span class="hljs-title class_">Boolean</span>(<span class="hljs-string">&#x27;false&#x27;</span>)<br><span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h4 id="number"><a href="#number" class="headerlink" title="number"></a>number</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Number</span>()<br><span class="hljs-string">&quot;number&quot;</span><br></code></pre></td></tr></table></figure><p>同<code>Boolean()</code>，<code>Number()</code>是将变量转换为number类型的内置方法，以下为示例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Number</span>()<br><span class="hljs-number">0</span><br><span class="hljs-title class_">Number</span>(<span class="hljs-number">1</span>)<br><span class="hljs-number">1</span><br><span class="hljs-title class_">Number</span>(<span class="hljs-literal">false</span>)<br><span class="hljs-number">0</span><br><span class="hljs-title class_">Number</span>(<span class="hljs-literal">true</span>)<br><span class="hljs-number">1</span><br><span class="hljs-title class_">Number</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-number">0</span><br><span class="hljs-title class_">Number</span>(<span class="hljs-string">&#x27;false&#x27;</span>)<br><span class="hljs-title class_">NaN</span><br><span class="hljs-title class_">Number</span>(<span class="hljs-string">&#x27;true&#x27;</span>)<br><span class="hljs-title class_">NaN</span><br><span class="hljs-title class_">Number</span>(<span class="hljs-string">&#x27;1&#x27;</span>)<br><span class="hljs-number">1</span><br><span class="hljs-title class_">Number</span>(<span class="hljs-literal">undefined</span>)<br><span class="hljs-title class_">NaN</span><br><span class="hljs-title class_">Number</span>(<span class="hljs-literal">null</span>)<br><span class="hljs-number">0</span><br><span class="hljs-title class_">Number</span>(<span class="hljs-string">&#x27;1str&#x27;</span>)<br><span class="hljs-title class_">NaN</span><br><span class="hljs-title class_">Number</span>(<span class="hljs-string">&#x27;str1&#x27;</span>)<br><span class="hljs-title class_">NaN</span><br></code></pre></td></tr></table></figure><p>以上看出，Number()方法在转换字符串时，会尽量把数字字符串顺利转换为number类型，但包含字符串或干脆就是是纯字符串的字符串类型变量显得无能为力，经过Number()方法处理的返回值是得到一个特殊的变量<code>NaN</code>，它是js内置的一个用以表示非数字的number类型常量，为什么说它是变量，而不是类型呢，因为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">typeof</span> <span class="hljs-title class_">NaN</span><br><span class="hljs-string">&quot;number&quot;</span><br></code></pre></td></tr></table></figure><h4 id="string"><a href="#string" class="headerlink" title="string"></a>string</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">typeof</span> <span class="hljs-title class_">String</span>()<br><span class="hljs-string">&quot;string&quot;</span><br></code></pre></td></tr></table></figure><p>同样，<code>string</code>类型首字母不大写，首字母大写的是js内置的用以将某个值转换为该类型的方法，同<code>Boolean()</code>、<code>Number()</code>，也有<code>String()</code>，case如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">String</span>()<br><span class="hljs-string">&quot;&quot;</span><br><span class="hljs-title class_">String</span>(<span class="hljs-string">&#x27;boolean&#x27;</span>)<br><span class="hljs-string">&quot;boolean&quot;</span><br><span class="hljs-title class_">String</span>(<span class="hljs-string">&#x27;number&#x27;</span>)<br><span class="hljs-string">&quot;number&quot;</span><br><span class="hljs-title class_">String</span>(<span class="hljs-title class_">Number</span>(<span class="hljs-string">&#x27;false&#x27;</span>))<br><span class="hljs-string">&quot;NaN&quot;</span><br><span class="hljs-title class_">String</span>(<span class="hljs-number">1</span>)<br><span class="hljs-string">&quot;1&quot;</span><br><span class="hljs-title class_">String</span>(<span class="hljs-literal">undefined</span>)<br><span class="hljs-string">&quot;undefined&quot;</span><br><span class="hljs-title class_">String</span>(<span class="hljs-literal">null</span>)<br><span class="hljs-string">&quot;null&quot;</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-title class_">String</span>(<span class="hljs-literal">undefined</span>)<br><span class="hljs-string">&quot;string&quot;</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-title class_">String</span>(<span class="hljs-literal">null</span>)<br><span class="hljs-string">&quot;string&quot;</span><br></code></pre></td></tr></table></figure><p>以上看出，“万物皆可字符串化”，<code>NaN</code>、<code>undefined</code>、<code>null</code>也难逃于此，它们被String()大法转变后，都乖乖套上了双引号，用<code>typeof</code>一照都是字符串类型</p><h4 id="symbol"><a href="#symbol" class="headerlink" title="symbol"></a>symbol</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Symbol</span>(<span class="hljs-number">1</span>)<br><span class="hljs-string">&quot;symbol&quot;</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Symbol</span>()<br><span class="hljs-string">&quot;symbol&quot;</span><br></code></pre></td></tr></table></figure><p>以上就是传统主流js(es5标准实现下的js)的六大基本类型</p><h3 id="引用类型变量（reference-value）"><a href="#引用类型变量（reference-value）" class="headerlink" title="引用类型变量（reference value）"></a>引用类型变量（reference value）</h3><p>首先所有的<code>引用类型</code>都隶属于object类型，细分有<code>array</code>、<code>function</code>、<code>object</code>、<code>date</code>、<code>regexp</code>等</p><blockquote><p>注意：引用类型无法再通过typeof进行判断，因为引用类型都衍生与object，typeof引用于判断基本类型的区分</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Array</span>()<br><span class="hljs-string">&quot;object&quot;</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()<br><span class="hljs-string">&quot;object&quot;</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>)&#123;&#125;<br><span class="hljs-string">&quot;function&quot;</span><br><span class="hljs-keyword">typeof</span> []<br><span class="hljs-string">&quot;object&quot;</span><br></code></pre></td></tr></table></figure><h4 id="object"><a href="#object" class="headerlink" title="object"></a>object</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Object</span>()<br><span class="hljs-string">&quot;object&quot;</span><br></code></pre></td></tr></table></figure><p>同样<code>object</code>首字母也不大写，同样js内置了<code>Object()</code>方法将一切转换为js对象，但这和<code>String()</code>、<code>Boolean()</code>、<code>Number()</code>不可同日而语，因为<code>Object</code>可以说是js的根、源头，一切生自<code>Object</code>，没有它就没有js的其他一切</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Object</span>()<br><span class="hljs-string">&quot;object&quot;</span><br><span class="hljs-title class_">Object</span>()<br>&#123;&#125;<br><span class="hljs-keyword">typeof</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()<br><span class="hljs-string">&quot;object&quot;</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Object</span>()<br><span class="hljs-string">&quot;object&quot;</span><br><span class="hljs-title class_">Object</span>(<span class="hljs-number">1</span>)<br><span class="hljs-title class_">Number</span> &#123;<span class="hljs-number">1</span>&#125;<br><span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Number</span>(<span class="hljs-number">1</span>)<br><span class="hljs-string">&quot;number&quot;</span><br><span class="hljs-title class_">Object</span>(<span class="hljs-literal">null</span>)<br>&#123;&#125;<br><span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Object</span>(<span class="hljs-literal">null</span>)<br><span class="hljs-string">&quot;object&quot;</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Object</span>(<span class="hljs-literal">false</span>)<br><span class="hljs-string">&quot;object&quot;</span><br><span class="hljs-title class_">Object</span>(<span class="hljs-literal">false</span>)<br><span class="hljs-title class_">Boolean</span> &#123;<span class="hljs-literal">false</span>&#125;<br></code></pre></td></tr></table></figure><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><p>引用类型的值是<code>可变的</code>，区分于基本类型<code>不可变</code>，所以对于基本类型的数据进行拷贝，就真的是拷贝出了一份类型相同的一个新值。但引用类型的变量只是指向一片内存空间的指针，所以对引用类型的直接拷贝得到的只是一个指向同一片内存空间的另一个指针而已，但拷贝前后所表示的值是相同的，所以此时如果改变原引用变量的值，会同时改变拷贝出的变量的值，举个例子:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> x = &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;hello&#x27;</span>&#125;<br><span class="hljs-literal">undefined</span><br><span class="hljs-keyword">var</span> y = x;<br><span class="hljs-literal">undefined</span><br>x<br>&#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;hello&quot;</span>&#125;<br>y<br>&#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;hello&quot;</span>&#125;<br>x.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;world&#x27;</span><br><span class="hljs-string">&quot;world&quot;</span><br>x<br>&#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;world&quot;</span>&#125;<br>y<br>&#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;world&quot;</span>&#125;<br></code></pre></td></tr></table></figure><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p><code>instanceof</code>见名知意，判断某个对象实例是否是某种对象的实例，（晦涩版：用来判断某个构造函数的 prototype 属性所指向的对象是否存在于另外一个要检测对象的原型链上，这里牵扯到<code>构造函数</code>、<code>ptototype属性</code>、<code>原型链</code>重要概念，需要后面一一详解）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">(&#123;&#125;) <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span><br><span class="hljs-literal">true</span><br>([]) <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Array</span><br><span class="hljs-literal">true</span><br>(<span class="hljs-regexp">/a/</span>) <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">RegExp</span><br><span class="hljs-literal">true</span><br>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125;) <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Function</span><br><br><br><span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>本篇系整合各篇优质内容并加以个人理解整理而成，参考文章如下：</p><ul><li><a href="https://segmentfault.com/a/1190000006752076">JavaScript 深入了解基本类型和引用类型的值</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>重读javascript第一篇</title>
    <link href="/wilson-blog-hexo/2019/01/17/reread-js/"/>
    <url>/wilson-blog-hexo/2019/01/17/reread-js/</url>
    
    <content type="html"><![CDATA[<p>对于 <a href="https://javascript.info/intro">https://javascript.info/intro</a> 的个人翻译及一些“添油加醋”</p><h1 id="什么是javascript"><a href="#什么是javascript" class="headerlink" title="什么是javascript"></a>什么是javascript</h1><p>js最初被创造来使web动起来，即画龙点睛的点睛之笔，在没有点睛之前的web即是html+css的静态页面（当然css也可以让html动起来），但js可以让web充满更多可能，比如看现在的前端工程就可以得知，从前后端分离后单独的前端项目工程可能就是一个或几个压缩后的js文件外加几个静态配置文件，到前端项目打包工具是用js编写，再到js能够动态改变DOM结构以完成页面在浏览器渲染时的千变万化，js的威力可见一斑。</p><p>究其本质，js只是一种脚本语言，可以写在html内容，并可以在页面被加载时自动执行，但是js不需要被机器编译，因为它运行在浏览器环境或其他js引擎之上，这是它和java最大的区别。而我们有时候听到的js编译过程实际上指的是对js进行打包压缩，在符合js解析规则的前提下最大化减少js代码之间的空隙，以使得它在能够实现预期功能的前提下变得尽可能的小，因为它是要在用户访问html时下载到用户电脑本地的文件，不同于服务端代码是运行在远离用户电脑的服务器上。</p><h1 id="为什么叫javascript"><a href="#为什么叫javascript" class="headerlink" title="为什么叫javascript"></a>为什么叫javascript</h1><p>在其创立之初，其实它叫livescript，名字也很直观，“动态的脚本”，但时值当时java火极一时，想要搭载快车，通过“蹭热度”一并火起来的js便改名为javascript。但随着其不断地迭代演进，js逐渐脱离java的热度，成为一门独立的语言，基于其自己的规范——ECMAScript（European Computer Manufacturers Association，欧洲计算机制造商组织制定的脚本规范），此规范几乎每年都会有更新和不断完善，js是其规范的一种实现，所以随着es的更新迭代，js的特性也在不断地扩充。</p><p>现在js不仅能在浏览器中运行，还能在服务端环境运行，甚至任何设备上，这得益于js的运行环境——js引擎</p><h1 id="引擎如何工作"><a href="#引擎如何工作" class="headerlink" title="引擎如何工作"></a>引擎如何工作</h1><p>引擎很复杂，但其一些最根本的概念也很好理解</p><ol><li>引擎读取（解析）脚本</li><li>然后把脚本转化（“编译”）成机器语言</li><li>随后机器代码运行起来，非常之快</li></ol><p>引擎会在每一个环节执行优化，甚至当脚本运行时侦查并分析运转在脚本内的数据并基于它的能力去对机器代码执行优化，当完成后脚本会运行的非常快。</p><h1 id="浏览器内的js可以做什么"><a href="#浏览器内的js可以做什么" class="headerlink" title="浏览器内的js可以做什么"></a>浏览器内的js可以做什么</h1><p>现在js是一种“安全”的语言，它不提供底层对于内存或CPU的访问，因为它创建之初被用在不需要它们的浏览器内部</p><p>js的能力强依赖于它所运行的环境，比如nodejs支持允许js读写任意文件或是处理网络请求等等。</p><p>浏览器内的js可以做任何和网页计算、人机交互、网页服务等相关的事情</p><p>例如它可以：</p><ol><li>添加新的html到已有的页面上，改变已存在的内容，修改页面样式</li><li>响应用户的动作，比如鼠标点击、鼠标移动、键盘按键</li><li>将请求通过网络发送给服务器，下载上传文件（所谓的AJAX和COMET技术）</li><li>读取写入cookie，询问访问者问题，展示消息</li><li>记住客户端数据（本地数据，local storage）</li></ol><h1 id="浏览器内的js不能做什么"><a href="#浏览器内的js不能做什么" class="headerlink" title="浏览器内的js不能做什么"></a>浏览器内的js不能做什么</h1><ol><li>网页上的js不能任意读写、拷贝硬盘上的文件或执行上面的程序，它不具备直接访问操作系统的方法</li></ol><p>现代浏览器允许对文件的操作，但被限于仅仅提供用户做特定的动作，比如拖动文件到浏览器窗口或是通过一个input标签选择文件</p><p>同时也可以合摄像头、麦克风或其他设备交互，但需要用户明确的授权，所以一个能够运行js的网页不会偷偷启动一个网页摄像头去观察着周围的一切并把数据发送给NSA（美国安全局）</p><ol start="2"><li>不同的页签或窗口彼此之间不互知，有时候它们可能知道，比如用户通过一个窗体使用js打开另一个窗体。但即使这种情况，一个页面上的js也无法访问另一个页面如果它们来自不同的网站（同一个域名、同一种协议、同一个端口）</li></ol><p>这就是同源策略，想要绕开它，两个网站都需要包含一段特殊的js代码来处理数据交换</p><p>这个限制同样是为了保证用户的安全，一个用户通过<a href="http://anysite.com打开的页面必须不能够访问另一个通过http//gmail.com%E4%B8%8A%E6%89%93%E5%BC%80%E7%9A%84%E7%BD%91%E9%A1%B5%E5%B9%B6%E4%BB%8E%E9%82%A3%E9%87%8C%E7%AA%83%E5%8F%96%E4%BF%A1%E6%81%AF">http://anysite.com打开的页面必须不能够访问另一个通过http://gmail.com上打开的网页并从那里窃取信息</a></p><ol start="3"><li>js可以很轻易地通过网络和当前页面从那来的那台服务进行通信，但其从其他网站或其他域下获得数据的能力是受阻的，虽然也可能，但其需要来自远端明确的允许（包含在HTTP头内），同样这也是一个安全限制</li></ol><p>这些限制如果js不是在浏览器内使用是不存在的，比如在服务器端。现代浏览器也允许通过询问拓展许可的插件或拓展</p><h1 id="什么使得js独一无二"><a href="#什么使得js独一无二" class="headerlink" title="什么使得js独一无二"></a>什么使得js独一无二</h1><ul><li>和HTML、CSS的完全集成</li><li>简单的事情被简单地处理</li><li>被所有的主流浏览器支持并默认打开</li></ul><p>js是唯一集合了这三件事的浏览器技术</p><p>这铸就了js的独一无二，这也是为什么它成为传播最广的创建浏览器接口的工具</p><h1 id="“超越”javascript的语言"><a href="#“超越”javascript的语言" class="headerlink" title="“超越”javascript的语言"></a>“超越”javascript的语言</h1><p>js的语法并不适合每个人的需求，不同的人需要不同的特征</p><ul><li>coffeescript是js一个“语法糖”，它介绍了更简短的语法，允许我们写更加清晰准确的代码，通常Ruby开发起来和它很像</li><li>typescript是一个集中于添加“严格的数据类型检查”以简化开发过程并支持复杂的系统，它由微软开发</li><li>dart是一种单独的语言并拥有其自己的引擎运行在非浏览器环境（比如移动应用），它最初被谷歌提供用于作为js的替代品，但现在浏览器要求其被转化成js，就像如上的其他语言</li></ul><p>还有更多，当然尽管我们使用这其中的一种语言，我们也需要了解js以真正地理解我们在做什么</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>js最初被创建用来作为一种仅在浏览器端的语言，但它现在也被用于其他许多环境中</li><li>今天，js拥有着独一无二的定位，作为最广泛适配浏览器的语言拥有着对HTML、CSS的完全集成</li><li>还有众多语言可以被转译成js，并提供着特定的特征。了解一下它们是被推荐的，至少简短地了解下，在征服js之后</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2017-2018年个人盘点(多图)</title>
    <link href="/wilson-blog-hexo/2018/10/02/2017%E5%B9%B410-2018%E5%B9%B4%E4%B8%AA%E4%BA%BA%E7%9B%98%E7%82%B9/"/>
    <url>/wilson-blog-hexo/2018/10/02/2017%E5%B9%B410-2018%E5%B9%B4%E4%B8%AA%E4%BA%BA%E7%9B%98%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<p>每当思绪万千，就想化作文字来记录片刻的美好。每当提笔却又不知从何写起，索性只能洋洋洒洒。</p><span id="more"></span><blockquote><p>2023-06-17 16:46:02更新：本来是以前用<a href="portal.qiniu.com">七牛云</a>当图床的，如今没有备案域名，连原本上传的图片都看不了了…</p></blockquote><blockquote><p>只好又整理了一遍照片放到自己的博客仓库</p></blockquote><blockquote><p>17到18这一年，是丰满的一年</p></blockquote><h3 id="2017年3月"><a href="#2017年3月" class="headerlink" title="2017年3月"></a>2017年3月</h3><h4 id="杭州三月的油菜花，生机勃勃"><a href="#杭州三月的油菜花，生机勃勃" class="headerlink" title="杭州三月的油菜花，生机勃勃"></a>杭州三月的油菜花，生机勃勃</h4><p><img src="/wilson-blog-hexo/img/post/2017-2018/youcaihua.jpeg" alt="油菜花"></p><h4 id="上班必经的柳荫路，每经于此，都心旷神怡"><a href="#上班必经的柳荫路，每经于此，都心旷神怡" class="headerlink" title="上班必经的柳荫路，每经于此，都心旷神怡"></a>上班必经的柳荫路，每经于此，都心旷神怡</h4><p><img src="/wilson-blog-hexo/img/post/2017-2018/road.jpeg" alt="街道"></p><h4 id="上班工具"><a href="#上班工具" class="headerlink" title="上班工具"></a>上班工具</h4><p><img src="/wilson-blog-hexo/img/post/2017-2018/bicycle.jpeg" alt="自行车"></p><h4 id="开始一天的工作"><a href="#开始一天的工作" class="headerlink" title="开始一天的工作"></a>开始一天的工作</h4><p><img src="/wilson-blog-hexo/img/post/2017-2018/work.jpeg" alt="打开电脑"></p><h4 id="下班后自己做饭的尝试"><a href="#下班后自己做饭的尝试" class="headerlink" title="下班后自己做饭的尝试"></a>下班后自己做饭的尝试</h4><p><img src="/wilson-blog-hexo/img/post/2017-2018/food.jpeg" alt="宫保鸡丁"></p><blockquote><p>后来才知道小时候吃的加黄瓜的宫保鸡丁原来是天津的做法</p></blockquote><h4 id="住所"><a href="#住所" class="headerlink" title="住所"></a>住所</h4><p><img src="/wilson-blog-hexo/img/post/2017-2018/apartment.jpeg" alt="住所"></p><h4 id="那时标准的体重"><a href="#那时标准的体重" class="headerlink" title="那时标准的体重"></a>那时标准的体重</h4><p><img src="/wilson-blog-hexo/img/post/2017-2018/weight.jpeg" alt="体重"></p><h3 id="3月份的游玩"><a href="#3月份的游玩" class="headerlink" title="3月份的游玩"></a>3月份的游玩</h3><h4 id="去“莲都”之称的丽水跑马拉松-runner"><a href="#去“莲都”之称的丽水跑马拉松-runner" class="headerlink" title="去“莲都”之称的丽水跑马拉松 :runner:"></a>去“莲都”之称的丽水跑马拉松 :runner:</h4><p>第一次感受到江南小城的惬意和舒适</p><h4 id="跑步记录"><a href="#跑步记录" class="headerlink" title="跑步记录"></a>跑步记录</h4><p><img src="/wilson-blog-hexo/img/post/2017-2018/lishui.jpeg" alt="丽水马拉松"></p><h3 id="4月份"><a href="#4月份" class="headerlink" title="4月份"></a>4月份</h3><h4 id="烟花三月下扬州（三月指农历的三月）"><a href="#烟花三月下扬州（三月指农历的三月）" class="headerlink" title="烟花三月下扬州（三月指农历的三月）"></a>烟花三月下扬州（三月指农历的三月）</h4><p><img src="/wilson-blog-hexo/img/post/2017-2018/yangzhou.jpeg" alt="扬州"></p><blockquote><p>其实是去跑扬州国际半马，顺便游玩 :satisfied:</p></blockquote><p><img src="/wilson-blog-hexo/img/post/2017-2018/yangzhou.jpeg" alt="扬州马拉松"></p><h4 id="千里跃进大别山（参加“将军县”六安金寨的百里毅行）"><a href="#千里跃进大别山（参加“将军县”六安金寨的百里毅行）" class="headerlink" title="千里跃进大别山（参加“将军县”六安金寨的百里毅行）"></a>千里跃进大别山（参加“将军县”六安金寨的百里毅行）</h4><p><img src="/wilson-blog-hexo/img/post/2017-2018/liuanhiking.jpeg" alt="六安毅行"></p><h3 id="5月份"><a href="#5月份" class="headerlink" title="5月份"></a>5月份</h3><h4 id="返校准备答辩，整理了一下过去一年的跑步记录-runner"><a href="#返校准备答辩，整理了一下过去一年的跑步记录-runner" class="headerlink" title="返校准备答辩，整理了一下过去一年的跑步记录 :runner:"></a>返校准备答辩，整理了一下过去一年的跑步记录 :runner:</h4><p><img src="/wilson-blog-hexo/img/post/2017-2018/marathon_award.jpeg" alt="马拉松奖牌"></p><h4 id="奶奶生病，回家看望奶奶"><a href="#奶奶生病，回家看望奶奶" class="headerlink" title="奶奶生病，回家看望奶奶"></a>奶奶生病，回家看望奶奶</h4><p><img src="/wilson-blog-hexo/img/post/2017-2018/hospital.jpeg" alt="家乡"></p><h4 id="家乡的蓝天依旧"><a href="#家乡的蓝天依旧" class="headerlink" title="家乡的蓝天依旧"></a>家乡的蓝天依旧</h4><p><img src="/wilson-blog-hexo/img/post/2017-2018/blue_sky.jpeg" alt="家乡蓝天"></p><h3 id="又跑去黄山歙县跑第一个全马"><a href="#又跑去黄山歙县跑第一个全马" class="headerlink" title="又跑去黄山歙县跑第一个全马"></a>又跑去黄山歙县跑第一个全马</h3><p>图片待补充：黄山</p><p><img src="/wilson-blog-hexo/img/post/2017-2018/huangshan.jpeg" alt="新安江山水画廊马拉松"></p><blockquote><p>整个县城的人大多都以枇杷的种植、加工、售卖为主要生活和工作，整个村子漫山遍野随处可见枇杷成群</p></blockquote><p><img src="/wilson-blog-hexo/img/post/2017-2018/pipa.jpeg" alt="枇杷"></p><h3 id="2017年10月"><a href="#2017年10月" class="headerlink" title="2017年10月"></a>2017年10月</h3><blockquote><p>从新闻上得知十月一号当天进入杭州的游客有一千万之多，抱着看热闹的心态，晚上一个人独自跑到西湖去看人山人海，其实西湖早在2016年刚到杭州的淡季逛过了，那天只是想看看千万游客是啥样 :joy: </p></blockquote><p>11月，陪伴着公司度过了通宵三天，充实的双十一。地处杭州，那是一家主营电商业务的公司，同时也是毕业后加入的第一家互联网公司。</p><p>11月，跑了临近杭州的浙江舟山群岛国际马拉松，结识了一个同在异乡的河北老乡，并且现在还在联系。</p><h3 id="2018年5月"><a href="#2018年5月" class="headerlink" title="2018年5月"></a>2018年5月</h3><h4 id="5月初的西北旺，北京互联网的聚集地"><a href="#5月初的西北旺，北京互联网的聚集地" class="headerlink" title="5月初的西北旺，北京互联网的聚集地"></a>5月初的西北旺，北京互联网的聚集地</h4><p><img src="/wilson-blog-hexo/img/post/2017-2018/xibeiwang.jpeg" alt="西北旺"></p><h4 id="第一次来天安门"><a href="#第一次来天安门" class="headerlink" title="第一次来天安门"></a>第一次来天安门</h4><p><img src="/wilson-blog-hexo/img/post/2017-2018/tiananmen.jpeg" alt="天安门"></p><h3 id="2018年7月"><a href="#2018年7月" class="headerlink" title="2018年7月"></a>2018年7月</h3><h4 id="7月的后海"><a href="#7月的后海" class="headerlink" title="7月的后海"></a>7月的后海</h4><p><img src="/wilson-blog-hexo/img/post/2017-2018/houhai.jpeg" alt="后海"></p><h4 id="7月的十渡"><a href="#7月的十渡" class="headerlink" title="7月的十渡"></a>7月的十渡</h4><p><img src="/wilson-blog-hexo/img/post/2017-2018/shidu.jpeg" alt="十渡"></p><h4 id="还有7月的天津"><a href="#还有7月的天津" class="headerlink" title="还有7月的天津"></a>还有7月的天津</h4><p><img src="/wilson-blog-hexo/img/post/2017-2018/tianjin.jpeg" alt="天津瓷房子"></p><h3 id="2018年8月"><a href="#2018年8月" class="headerlink" title="2018年8月"></a>2018年8月</h3><h4 id="圆明园"><a href="#圆明园" class="headerlink" title="圆明园"></a>圆明园</h4><p><img src="/wilson-blog-hexo/img/post/2017-2018/yuanmingyuan.jpeg" alt="圆明园"></p><h4 id="曾经只从课本上才能看到图片，身临其境感受不一样的历史厚重感"><a href="#曾经只从课本上才能看到图片，身临其境感受不一样的历史厚重感" class="headerlink" title="曾经只从课本上才能看到图片，身临其境感受不一样的历史厚重感"></a>曾经只从课本上才能看到图片，身临其境感受不一样的历史厚重感</h4><p><img src="/wilson-blog-hexo/img/post/2017-2018/shengxiao.jpeg" alt="十二生肖"></p><h3 id="2018年9月"><a href="#2018年9月" class="headerlink" title="2018年9月"></a>2018年9月</h3><h4 id="中秋节回家（家乡的天，依旧的蓝）"><a href="#中秋节回家（家乡的天，依旧的蓝）" class="headerlink" title="中秋节回家（家乡的天，依旧的蓝）"></a>中秋节回家（家乡的天，依旧的蓝）</h4><p><img src="/wilson-blog-hexo/img/post/2017-2018/zhongqiu.jpeg" alt="中秋节家乡"></p><h4 id="与家人匆忙相聚后的离乡返京的站台"><a href="#与家人匆忙相聚后的离乡返京的站台" class="headerlink" title="与家人匆忙相聚后的离乡返京的站台"></a>与家人匆忙相聚后的离乡返京的站台</h4><p><img src="/wilson-blog-hexo/img/post/2017-2018/station.jpeg" alt="返程站台"></p><blockquote><p>也许是漂泊在外已经习惯，恋乡情愫已淡，也许是还没到怀念家乡的年龄</p></blockquote><p>人真的是越长大越容易感动</p><p>还记得在杭州的时候，想组一台自己的台式机，却一直经费紧张，只买了一个主机电源就没再继续。</p><p>如今也有了自己的台式机，可以在住的地方作为固定的工作站</p><p><img src="/wilson-blog-hexo/img/post/2017-2018/taishiji.jpeg" alt="台式机"></p><p>想知道自己现在还跑的动半马</p><p><img src="/wilson-blog-hexo/img/post/2017-2018/hangzhou_run.jpeg" alt="杭州半马"></p><p>从六千块的笔记本到公司配的二手Mac Pro，再到自己一万六买的Mac Pro</p><p>从杭州到北京，经过一年多的厚积薄发，工资翻倍，房租翻倍</p><p><img src="/wilson-blog-hexo/img/post/2017-2018/beijing_apartment.jpeg" alt="北京住处"></p><p><img src="/wilson-blog-hexo/img/post/2017-2018/my_computer.jpeg" alt="现在的笔记本"></p><p><img src="/wilson-blog-hexo/img/post/2017-2018/computer.jpeg" alt="现在的笔记本"></p><p><img src="/wilson-blog-hexo/img/post/2017-2018/work_computer.jpeg" alt="工作用的笔记本"></p><p>看着自己身边的装备一件一件通过自己的努力和进步挣得，满是欣喜满足</p><p>有些喜悦，无法分享，因为别人没有过同样的经历，可能永远无法感受到你的那一份感受</p><p>回望过去，是为了夯实脚下的步伐，更好的向前方前进</p><p>乔布斯说要 <code>Stay hungry Stay foolish</code></p><p>张一鸣说要 <code>Stay hungry Stay young</code></p><p>嗯，流水账结束，继续加油 :muscle:</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何使用原生技术写一个倒计时时钟</title>
    <link href="/wilson-blog-hexo/2018/09/05/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%8E%9F%E7%94%9F%E6%8A%80%E6%9C%AF%E5%86%99%E4%B8%80%E4%B8%AA%E5%80%92%E8%AE%A1%E6%97%B6%E6%97%B6%E9%92%9F/"/>
    <url>/wilson-blog-hexo/2018/09/05/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%8E%9F%E7%94%9F%E6%8A%80%E6%9C%AF%E5%86%99%E4%B8%80%E4%B8%AA%E5%80%92%E8%AE%A1%E6%97%B6%E6%97%B6%E9%92%9F/</url>
    
    <content type="html"><![CDATA[<p>心血来潮，想做一个苹果发布会的倒计时</p><h2 id="访问地址"><a href="#访问地址" class="headerlink" title="访问地址"></a>访问地址</h2><p><a href="https://barnett617.github.io/clock/">https://barnett617.github.io/clock/</a></p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>步骤如下：</p><ol><li>首先，网页标题来个标志性的苹果图标</li></ol><ul><li><p><a href="https://www.flaticon.com/free-icon/apple_152752#term=apple&page=1&position=2">一个好的图标网站</a></p></li><li><p><a href="https://cloudconvert.com/svg-to-ico">svg转换ico在线工具</a></p></li></ul><p>如何为网站添加图标：</p><p>在&lt;head&gt;标签中添加<code>&lt;link rel=&quot;shortcut icon&quot; href=&quot;favicon.ico&quot;&gt;</code>，其会从项目根目录找favicon.ico文件</p><blockquote><p><code>rel</code>表示将要引用的资源类型，<code>href</code>表示指向资源的URL，<br>&lt;link rel&#x3D;”shortcut icon” href&#x3D;”favicon.ico”&gt;中    <code>rel=&quot;shortcut icon&quot;</code>是一种固定写法，不写或错写会导致图标无法正常显示。</p></blockquote><ol start="2"><li>主体布局</li></ol><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>如果要背景铺满屏幕，来一个渐变色要怎么做呢</p><p>首先，为什么要用渐变，因为好看啊</p><p>其次，为什么渐变不用PS做的图片，因为CSS3提供了gradients属性，通过CSS实现其实渐变是由浏览器生成的，可以减少下载的事件和宽带的使用</p><p>既然渐变是浏览器生成的，就会涉及到不同浏览器的支持问题（Safari、Opera、Firefox等）</p><p>另外，渐变的方式分为两种：<code>线性渐变（Linear Gradients）</code>和<code>径向渐变（Radial Gradients）</code>，顾名思义，线性渐变是从一个<em>起点</em>沿着一个<em>方向</em>从一种颜色渐变成另一种颜色，而径向渐变是从一个<em>起点</em>沿着一个<em>角度</em>渐变</p><p>线性：linear-gradient</p><p>径向：radial-gradient</p><p>其参数对于不同的浏览器有着不同的写法，但基本都是在配置渐变方向和渐变首末的颜色</p><p>从上到下（默认）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background</span>: <span class="hljs-built_in">-webkit-linear-gradient</span>(red, blue); <span class="hljs-comment">/* Safari 5.1 - 6.0 */</span><br><span class="hljs-attribute">background</span>: <span class="hljs-built_in">-o-linear-gradient</span>(red, blue); <span class="hljs-comment">/* Opera 11.1 - 12.0 */</span><br><span class="hljs-attribute">background</span>: <span class="hljs-built_in">-moz-linear-gradient</span>(red, blue); <span class="hljs-comment">/* Firefox 3.6 - 15 */</span><br><span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(red, blue); <span class="hljs-comment">/* 标准的语法 */</span><br></code></pre></td></tr></table></figure><p>从左到右</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background</span>: <span class="hljs-built_in">-webkit-linear-gradient</span>(left, red , blue); <span class="hljs-comment">/* Safari 5.1 - 6.0 */</span><br><span class="hljs-attribute">background</span>: <span class="hljs-built_in">-o-linear-gradient</span>(right, red, blue); <span class="hljs-comment">/* Opera 11.1 - 12.0 */</span><br><span class="hljs-attribute">background</span>: <span class="hljs-built_in">-moz-linear-gradient</span>(right, red, blue); <span class="hljs-comment">/* Firefox 3.6 - 15 */</span><br><span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to right, red , blue); <span class="hljs-comment">/* 标准的语法 */</span><br></code></pre></td></tr></table></figure><p>左上角到右下角</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background</span>: <span class="hljs-built_in">-webkit-linear-gradient</span>(left top, red , blue); <span class="hljs-comment">/* Safari 5.1 - 6.0 */</span><br><span class="hljs-attribute">background</span>: <span class="hljs-built_in">-o-linear-gradient</span>(bottom right, red, blue); <span class="hljs-comment">/* Opera 11.1 - 12.0 */</span><br><span class="hljs-attribute">background</span>: <span class="hljs-built_in">-moz-linear-gradient</span>(bottom right, red, blue); <span class="hljs-comment">/* Firefox 3.6 - 15 */</span><br><span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to bottom right, red , blue); <span class="hljs-comment">/* 标准的语法 */</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：Internet Explorer 9 及之前的版本不支持渐变</p></blockquote><p>上面的是指定方向，也可以指定角度，如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">linear-gradient</span>(to top, <span class="hljs-number">#7A88FF</span>, <span class="hljs-number">#7AFFAF</span>);<br><span class="hljs-comment">/* 等价 */</span><br><span class="hljs-attribute">background-image</span>:<span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">0deg</span>, <span class="hljs-number">#7A88FF</span>, <span class="hljs-number">#7AFFAF</span>);<br></code></pre></td></tr></table></figure><blockquote><p>角度指的是过渡在哪个方向截止，浏览器会绘制一条经过元素中心点的假想线。指定的角度就是<em>这条线的角度</em>，同时还指明<em>过度在哪里结束</em></p></blockquote><table><thead><tr><th>度数</th><th>解释</th><th>描述</th></tr></thead><tbody><tr><td>0deg</td><td>表示元素的顶边</td><td>to top</td></tr><tr><td>90deg</td><td>表示元素的右边</td><td>to right</td></tr><tr><td>180deg</td><td>表示元素的底边</td><td>to bottom</td></tr><tr><td>270deg</td><td>表示元素的左边</td><td>to left</td></tr></tbody></table><p>如果仍然无法理解角度如何用，这里有一个<a href="https://codepen.io/thebabydino/full/qgoBL">在线演示</a></p><p>除此，透明度（transparent）使用</p><blockquote><p>CSS3 渐变也支持透明度（transparent），可用于创建减弱变淡的效果。</p></blockquote><blockquote><p>可使用 rgba() 函数来定义颜色结点。rgba() 函数中的最后一个参数可以是从 0 到 1 的值，它定义了颜色的透明度：0 表示完全透明，1 表示完全不透明。</p></blockquote><p>如下为从左侧完全透明的红色到右侧完全不透明的红色</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background</span>: <span class="hljs-built_in">-webkit-linear-gradient</span>(left,<span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>),<span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)); <span class="hljs-comment">/* Safari 5.1 - 6 */</span><br><span class="hljs-attribute">background</span>: <span class="hljs-built_in">-o-linear-gradient</span>(right,<span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>),<span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)); <span class="hljs-comment">/* Opera 11.1 - 12*/</span><br><span class="hljs-attribute">background</span>: <span class="hljs-built_in">-moz-linear-gradient</span>(right,<span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>),<span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)); <span class="hljs-comment">/* Firefox 3.6 - 15*/</span><br><span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to right, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>), <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)); <span class="hljs-comment">/* 标准的语法 */</span><br></code></pre></td></tr></table></figure><p>以上都是<code>线性渐变</code></p><p>接下来是<code>径向渐变</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">radial-gradient(center, shape size, start-<span class="hljs-attribute">color</span>, ..., last-<span class="hljs-attribute">color</span>);<br></code></pre></td></tr></table></figure><blockquote><p>若不指定前面的参数，只指明颜色，则按照默认情况对颜色进行<em>均匀</em>分布</p></blockquote><blockquote><p>可以根据需求添加任意多个颜色。额外添加的颜色叫色标（color stop）</p></blockquote><blockquote><p>添加色标后，背景会从第一个颜色过渡到第二个颜色，再从第二个颜色过渡到第三个颜色，直到渐变的最后一个颜色为止。浏览器会平均分布各个颜色</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background</span>: <span class="hljs-built_in">-webkit-radial-gradient</span>(red, green, blue); <span class="hljs-comment">/* Safari 5.1 - 6.0 */</span><br><span class="hljs-attribute">background</span>: <span class="hljs-built_in">-o-radial-gradient</span>(red, green, blue); <span class="hljs-comment">/* Opera 11.6 - 12.0 */</span><br><span class="hljs-attribute">background</span>: <span class="hljs-built_in">-moz-radial-gradient</span>(red, green, blue); <span class="hljs-comment">/* Firefox 3.6 - 15 */</span><br><span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(red, green, blue); <span class="hljs-comment">/* 标准的语法 */</span><br></code></pre></td></tr></table></figure><p>如下为背景色从左到右开始渐变，最左边是玫红，在元素宽度20%的位置变成青色，80%的位置变成黄色，最后是蓝色。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">linear-gradient(<span class="hljs-selector-tag">to</span> <span class="hljs-attribute">right</span>, <span class="hljs-selector-id">#E94E65</span>, <span class="hljs-selector-id">#15A892</span> <span class="hljs-number">20%</span>, <span class="hljs-selector-id">#A89215</span> <span class="hljs-number">80%</span>, <span class="hljs-selector-id">#1574A8</span>);<br></code></pre></td></tr></table></figure><blockquote><p>使用多色渐变时，第一个颜色和最后一个颜色无需指定位置，因为浏览器会嘉定第一个颜色从0%的位置开始，最后一个颜色在100%的位置结束。除非想把第一个颜色或最后一个颜色的位置放在指定的位置开始，才需要专门定位。</p></blockquote><blockquote><p>若想颜色不均匀分布，可手动对颜色增加权重</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background</span>: <span class="hljs-built_in">-webkit-radial-gradient</span>(red <span class="hljs-number">5%</span>, green <span class="hljs-number">15%</span>, blue <span class="hljs-number">60%</span>); <span class="hljs-comment">/* Safari 5.1 - 6.0 */</span><br><span class="hljs-attribute">background</span>: <span class="hljs-built_in">-o-radial-gradient</span>(red <span class="hljs-number">5%</span>, green <span class="hljs-number">15%</span>, blue <span class="hljs-number">60%</span>); <span class="hljs-comment">/* Opera 11.6 - 12.0 */</span><br><span class="hljs-attribute">background</span>: <span class="hljs-built_in">-moz-radial-gradient</span>(red <span class="hljs-number">5%</span>, green <span class="hljs-number">15%</span>, blue <span class="hljs-number">60%</span>); <span class="hljs-comment">/* Firefox 3.6 - 15 */</span><br><span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(red <span class="hljs-number">5%</span>, green <span class="hljs-number">15%</span>, blue <span class="hljs-number">60%</span>); <span class="hljs-comment">/* 标准的语法 */</span><br></code></pre></td></tr></table></figure><blockquote><p>shape 参数定义了形状。它可以是值 circle 或 ellipse。其中，circle 表示圆形，ellipse 表示椭圆形。默认值是 ellipse。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background</span>: <span class="hljs-built_in">-webkit-radial-gradient</span>(circle, red, yellow, green); <span class="hljs-comment">/* Safari 5.1 - 6.0 */</span><br><span class="hljs-attribute">background</span>: <span class="hljs-built_in">-o-radial-gradient</span>(circle, red, yellow, green); <span class="hljs-comment">/* Opera 11.6 - 12.0 */</span><br><span class="hljs-attribute">background</span>: <span class="hljs-built_in">-moz-radial-gradient</span>(circle, red, yellow, green); <span class="hljs-comment">/* Firefox 3.6 - 15 */</span><br><span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(circle, red, yellow, green); <span class="hljs-comment">/* 标准的语法 */</span><br></code></pre></td></tr></table></figure><blockquote><p>repeating-radial-gradient() 函数用于重复径向渐变</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* Safari 5.1 - 6.0 */</span><br><span class="hljs-attribute">background</span>: <span class="hljs-built_in">-webkit-repeating-radial-gradient</span>(red, yellow <span class="hljs-number">10%</span>, green <span class="hljs-number">15%</span>);<br><span class="hljs-comment">/* Opera 11.6 - 12.0 */</span><br><span class="hljs-attribute">background</span>: <span class="hljs-built_in">-o-repeating-radial-gradient</span>(red, yellow <span class="hljs-number">10%</span>, green <span class="hljs-number">15%</span>);<br><span class="hljs-comment">/* Firefox 3.6 - 15 */</span><br><span class="hljs-attribute">background</span>: <span class="hljs-built_in">-moz-repeating-radial-gradient</span>(red, yellow <span class="hljs-number">10%</span>, green <span class="hljs-number">15%</span>);<br><span class="hljs-comment">/* 标准的语法 */</span><br><span class="hljs-attribute">background</span>: <span class="hljs-built_in">repeating-radial-gradient</span>(red, yellow <span class="hljs-number">10%</span>, green <span class="hljs-number">15%</span>);<br></code></pre></td></tr></table></figure><h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><p>需要文字内容水平垂直居中，这就涉及到一个老生常谈的问题</p><p>一开始随手一加，使用flex布局</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>倒计时<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">justify-content</span>: center;<br>  <span class="hljs-attribute">align-items</span>: center;<br>&#125;<br></code></pre></td></tr></table></figure><p>发现效果并不理想，只水平居中了，垂直方向并没有居中</p><p>这里犯了一个flex布局的理解错误，对某个元素进行flex的设置，将影响其<em>子元素</em>，而不是其本身的布局，所以这里其实想container这一级水平垂直居中，那么<code>display: flex;</code>应该加在它的父级，即body的属性上</p><p>而在body上加过多的样式不是理想的做法，我们是想以 container 为页面根级，所以在其上加flex布局，然后将其子元素达到居中的效果，那么要让 container 作为页面根级，则需要其铺满屏幕，这里需要做一些样式设计。</p><p>首先，发现 container 并未铺满屏幕，即元素没有贴边浏览器，这是因为body有一个默认外边距，会随着不同的浏览器有着不同的行为，所以即使 container 高度和宽度100%贴着body，也无法占满屏幕，这就是为什么要对css作全局初始样式，重置其默认样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>    <span class="hljs-attribute">display</span>: block;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">8px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>需要在body上进行重置 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">button</span>, <span class="hljs-selector-tag">p</span>, pre &#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>另外，要让渐变色的背景铺满屏幕，这里采用了对html和body元素设置高度100%，从而达到自适应，背景总占满屏幕的效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">html</span>, <span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>&#125;<br><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">45deg</span>, <span class="hljs-number">#7A88FF</span>, <span class="hljs-number">#7AFFAF</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="倒计时"><a href="#倒计时" class="headerlink" title="倒计时"></a>倒计时</h3><p>接下来，需要一个定时器来展示倒计时</p><p>这里结束时间从简处理，即使用(后续可优化为目标时间从目标网站中获取)</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p><code>倒计时</code>即是要计算<em>剩余</em>时间，即目标时间的时间戳减去当下时间的时间戳来做一个格式化显示，因为当下时间是实时变化的，所以并不需要做特殊处理，只要用<code>目标时间戳(常量)</code> - <code>当前时间(变量)</code>便可得到倒计时应该显示的<em>剩余时间</em></p><p>这里<code>国际化</code>是重点</p><p>首先来看一下 js 提供的当地时间（根据浏览器所设地区显示相应时间）方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">toLocaleString</span>()<br><span class="hljs-comment">// &quot;2018/9/4 下午5:04:02&quot;</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">toLocaleDateString</span>()<br><span class="hljs-comment">// &quot;2018/9/4&quot;</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">toLocaleTimeString</span>()<br><span class="hljs-comment">// &quot;下午5:04:21&quot;</span><br></code></pre></td></tr></table></figure><p>这是 js <code>i18n</code>程序提供的时间格式化方法</p><p>Date对象是js原生时间库，以<code>1970年1月1日00:00:00</code>作为起点</p><p>Date对象作为普通函数直接调用会返回代表当前时间的字符串（无论是否传递参数）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Date</span>()<br><span class="hljs-comment">// &quot;Tue Sep 04 2018 17:23:42 GMT+0800 (中国标准时间)&quot;</span><br><span class="hljs-title class_">Date</span>(<span class="hljs-string">&#x27;2018-08-08&#x27;</span>)<br><span class="hljs-comment">// &quot;Tue Sep 04 2018 17:23:55 GMT+0800 (中国标准时间)&quot;</span><br><span class="hljs-title class_">Date</span>(<span class="hljs-number">2018</span>, <span class="hljs-number">08</span>, <span class="hljs-number">08</span>)<br><span class="hljs-comment">// &quot;Tue Sep 04 2018 17:24:05 GMT+0800 (中国标准时间)&quot;</span><br></code></pre></td></tr></table></figure><p>Date作为构造函数时，使用new返回一个Date对象实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()<br><span class="hljs-comment">// Tue Sep 04 2018 17:25:49 GMT+0800 (中国标准时间)</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&#x27;2018-08-08&#x27;</span>)<br><span class="hljs-comment">// Wed Aug 08 2018 08:00:00 GMT+0800 (中国标准时间)</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">2018</span>, <span class="hljs-number">08</span>, <span class="hljs-number">08</span>)<br><span class="hljs-comment">// Sat Sep 08 2018 00:00:00 GMT+0800 (中国标准时间)</span><br></code></pre></td></tr></table></figure><p>*** 特殊地</p><p>普通对象求值，都默认调用其valueOf()方法，而Date实例求值，默认调用toString()方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-string">&#x27;hello&#x27;</span><br>a<br><span class="hljs-comment">// &quot;hello&quot;</span><br>a.<span class="hljs-title function_">valueOf</span>()<br><span class="hljs-comment">// &quot;hello&quot;</span><br>a.<span class="hljs-title function_">toString</span>()<br><span class="hljs-comment">// &quot;hello&quot;</span><br><br><span class="hljs-keyword">var</span> b = <span class="hljs-number">3</span><br>b<br><span class="hljs-comment">// 3</span><br>b.<span class="hljs-title function_">valueOf</span>()<br><span class="hljs-comment">// 3</span><br>b.<span class="hljs-title function_">toString</span>()<br><span class="hljs-comment">// &quot;3&quot;</span><br><br><span class="hljs-keyword">var</span> c = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()<br>c<br><span class="hljs-comment">// Tue Sep 04 2018 17:31:30 GMT+0800 (中国标准时间)</span><br>c.<span class="hljs-title function_">valueOf</span>()<br><span class="hljs-comment">// 1536053490129</span><br>c.<span class="hljs-title function_">toString</span>()<br><span class="hljs-comment">// &quot;Tue Sep 04 2018 17:31:30 GMT+0800 (中国标准时间)&quot;</span><br></code></pre></td></tr></table></figure><p>使用Date构造函数生产日期实例可传递各种类型的参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">valueOf</span>()<br><span class="hljs-comment">// 1536053659322</span><br><br><span class="hljs-comment">// 参数为时间零点开始计算的毫秒数</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">1536053659322</span>)<br><span class="hljs-comment">// Tue Sep 04 2018 17:34:19 GMT+0800 (中国标准时间)</span><br><br><span class="hljs-comment">// 参数为日期字符串</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&#x27;Sep 4, 2018&#x27;</span>)<br><span class="hljs-comment">// Tue Sep 04 2018 00:00:00 GMT+0800 (中国标准时间)</span><br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&#x27;Oct 4, 2018&#x27;</span>)<br><span class="hljs-comment">// Thu Oct 04 2018 00:00:00 GMT+0800 (中国标准时间)</span><br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&#x27;Oct 4, 2018, 08:59:59&#x27;</span>)<br><span class="hljs-comment">// Thu Oct 04 2018 08:59:59 GMT+0800 (中国标准时间)</span><br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&#x27;Oct 4, 2018, 08:61:59&#x27;</span>)<br><span class="hljs-comment">// Invalid Date</span><br><br><span class="hljs-comment">// 参数为多个整数</span><br><span class="hljs-comment">// 代表年、月、日、小时、分钟、秒、毫秒</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">2018</span>, <span class="hljs-number">10</span>, <span class="hljs-number">23</span>, <span class="hljs-number">6</span>, <span class="hljs-number">34</span>, <span class="hljs-number">59</span>, <span class="hljs-number">500</span>)<br><span class="hljs-comment">// Fri Nov 23 2018 06:34:59 GMT+0800 (中国标准时间)</span><br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&#x27;Fri Nov 23 2018 06:34:59&#x27;</span>)<br><span class="hljs-comment">// Fri Nov 23 2018 06:34:59 GMT+0800 (中国标准时间)</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&#x27;Fri Nov 23 2018 06:34:59&#x27;</span>).<span class="hljs-title function_">valueOf</span>()<br><span class="hljs-comment">// 1542926099000</span><br></code></pre></td></tr></table></figure><p>既然这样，那么Date()构造方法的参数都可以是什么格式的呢？</p><p>答：任何可以被Date.parse()方法解析的字符串</p><p>注意点</p><ol><li><p>参数可以是负整数，代表1970年元旦之前的时间</p></li><li><p>参数为多个整数时，至少需要两个参数，即年和月，若只传递一个参数，将按照<em>毫秒数</em>处理</p></li><li><p>参数取值范围</p></li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs">年：使用四位数年份，比如2000。如果写成两位数或个位数，则加上1900，即10代表1910年。如果是负数，表示公元前<br><br>月：0表示一月，依次类推，11表示12月<br><br>日：1到31<br><br>小时：0到23<br><br>分钟：0到59<br><br>秒：0到59<br><br>毫秒：0到999<br></code></pre></td></tr></table></figure><ol start="4"><li><p>参数如果超出了正常范围，会被自动折算</p></li><li><p>参数只有一个时，使用负整数表示<code>1970年元旦之前的时间</code>，参数为多个整数时，使用负整数表示<code>从基准日扣去相应的时间</code></p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(-<span class="hljs-number">1542926099000</span>)<br><span class="hljs-comment">// Wed Feb 09 1921 09:25:01 GMT+0800 (中国标准时间)</span><br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">2018</span>, <span class="hljs-number">09</span>, -<span class="hljs-number">1</span>)<br><span class="hljs-comment">// Sat Sep 29 2018 00:00:00 GMT+0800 (中国标准时间)</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">2018</span>, <span class="hljs-number">0</span>)<br><span class="hljs-title class_">Mon</span> <span class="hljs-title class_">Jan</span> <span class="hljs-number">01</span> <span class="hljs-number">2018</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> <span class="hljs-variable constant_">GMT</span>+<span class="hljs-number">0800</span> (中国标准时间)<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">2018</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>)<br><span class="hljs-title class_">Sat</span> <span class="hljs-title class_">Dec</span> <span class="hljs-number">30</span> <span class="hljs-number">2017</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> <span class="hljs-variable constant_">GMT</span>+<span class="hljs-number">0800</span> (中国标准时间)<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">2018</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>)<br><span class="hljs-title class_">Tue</span> <span class="hljs-title class_">Jan</span> <span class="hljs-number">30</span> <span class="hljs-number">2018</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> <span class="hljs-variable constant_">GMT</span>+<span class="hljs-number">0800</span> (中国标准时间)<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">2018</span>, <span class="hljs-number">1</span>)<br><span class="hljs-title class_">Thu</span> <span class="hljs-title class_">Feb</span> <span class="hljs-number">01</span> <span class="hljs-number">2018</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> <span class="hljs-variable constant_">GMT</span>+<span class="hljs-number">0800</span> (中国标准时间)<br></code></pre></td></tr></table></figure><blockquote><p>留个疑问，如何求<code>明年的昨天</code>，比如，现在是<code>Tue Sep 04 2018 18:04:58 GMT+0800 (中国标准时间)</code>，明年的昨天即是<code>Wed Sep 03 2019 18:04:58 GMT+0800 (中国标准时间)</code>，有好的方法可以提PR，</p></blockquote><p>此处的目标时间如下：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">2018 </span>年 <span class="hljs-number">9</span> 月 <span class="hljs-number">12</span> 日上午 <span class="hljs-number">10</span> 点（北京时间 <span class="hljs-number">9</span> 月 <span class="hljs-number">13</span> 日凌晨 <span class="hljs-number">1</span> 点）<br></code></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>没想到最终呈现出来这么简单的一个页面竟涉及到这么多东西，而且每一个环节都可以细究到很多深层次的东西，这就是web的世界</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>使用vscode+搜狗输入法编辑本md文件上传至github后发现隐藏字符</p><p>查得<a href="https://www.zhihu.com/question/61638859">原因</a>为</p><blockquote><p>在mac版vscode的中文输入法下，按下任意字母，出现中文候选后按删除键，删除完刚才输入的字母再按删除会出现这个控制字符</p></blockquote><p>mac版的vscode中这个隐藏字符默认隐藏，可通过修改如下配置打开，将文档中显示<code>BS</code>的退格符全局搜索并替换为空即可</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//控制编辑器是否应呈现控制字符</span><br><span class="hljs-attr">&quot;editor.renderControlCharacters&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br></code></pre></td></tr></table></figure><p>原理解析：<code>BS</code>为ASCII码中的退格符的Unicode表示法，而所有ASCII<a href="https://en.wikipedia.org/wiki/Control_character">控制字符</a>都有一个图形外观</p><p>参考链接：</p><p><a href="https://www.jianshu.com/p/58b340a037ea">jianshu-【CSS】渐变背景</a></p><p><a href="http://www.runoob.com/css3/css3-gradients.html">runoob-CSS3 渐变</a></p><p><a href="https://www.oschina.net/translate/introducing-the-javascript-internationalization-api">oschina-介绍 JavaScript 国际化 API</a></p><p><a href="http://javascript.ruanyifeng.com/stdlib/date.html#toc4">JavaScript 标准参考教程（alpha）之Date</a></p><p><a href="https://segmentfault.com/a/1190000007581722">segmentfault-JavaScript 时间与日期处理实战:你肯定被坑过</a></p><p><a href="http://www.runoob.com/jquery/jquery-tutorial.html">runoob-jquery</a></p><p><a href="https://segmentfault.com/a/1190000006110417">jianshu-如何优雅的选择字体</a></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML5</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我是如何备份博客的</title>
    <link href="/wilson-blog-hexo/2018/09/03/%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E5%A4%87%E4%BB%BD%E5%8D%9A%E5%AE%A2%E7%9A%84/"/>
    <url>/wilson-blog-hexo/2018/09/03/%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E5%A4%87%E4%BB%BD%E5%8D%9A%E5%AE%A2%E7%9A%84/</url>
    
    <content type="html"><![CDATA[<p>记录如何把博客从离线存储配置成可通过git维护</p><span id="more"></span><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>本博客之前一直处于离线保存方式，因为hexo最终发布后的目录结构和源文件目录结构并不相同，发布后的博客的确是发布到git远程仓库，并通过pages服务提供网页端展示的，但是源博客结构要如何通过git进行维护呢？试想，如果源博客文件夹如果不慎丢失，且没有备份，那么即使下载发布后的博客，也无法使用该目录进行新的博客发布和维护，或者即使有备份，也是过时的备份（总不能每次发布新的博客都手动进行新的备份），那么同样会丢失备份时间之后的博客源文件，所以使用git进行版本管理当务之急。</p><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>另起一个远程git仓库，用于存储博客源文件夹（首先将其初始化一个git仓库）</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>第一次初始化博客文件夹并将其添加进暂存区提交时会提示theme文件夹中存在git子项目，需要对其进行子项目处理，其实只是theme中的项目原本也是git项目，然而此处不需要对其单独维护，而将其作为博客主目录的一个子目录进行维护便可，所以将主题中的.git目录删除，将其脱离子项目的git管理，而作为博客主目录的一个子文件夹存在即可。</p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>尽管现在博客目录在git管理之下，但是仍需每次对博客进行变动后手动提交对其进行维护，由于每次发布博客或修改博客内容后都需要编译发布将其更新到远端，所以这里可以写一个脚本，将git提交与博客发布进行联动处理即可，脚本如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">hexo g -d<br>git <span class="hljs-keyword">add</span> .<br>git <span class="hljs-keyword">commit</span> -m <span class="hljs-string">&#x27;another commit&#x27;</span><br>git push origin master<br></code></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这样便达到既可以每次更新博客，又可以将其纳入git维护，而不用担心博客文件丢失，因为每次对博客的更新都会存储在远端仓库，当想要恢复博客的时候从远端仓库拉下最新的内容即可继续使用</p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>其他</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript高级程序设计第3版笔记（一）</title>
    <link href="/wilson-blog-hexo/2018/09/03/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%AC3%E7%89%88%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89-1/"/>
    <url>/wilson-blog-hexo/2018/09/03/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%AC3%E7%89%88%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89-1/</url>
    
    <content type="html"><![CDATA[<h2 id="第七章-函数表达式"><a href="#第七章-函数表达式" class="headerlink" title="第七章 函数表达式"></a>第七章 函数表达式</h2><span id="more"></span><h3 id="定义函数方式"><a href="#定义函数方式" class="headerlink" title="定义函数方式"></a>定义函数方式</h3><ol><li>函数声明</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fun</span> () &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>函数表达式</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> fun = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h3><h4 id="函数声明提升"><a href="#函数声明提升" class="headerlink" title="函数声明提升"></a>函数声明提升</h4><blockquote><p>执行代码前会先读取函数声明，所以在函数声明前也可以调用函数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">test</span>();<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span> () &#123;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;test&#x27;</span>)<br>&#125;<br><span class="hljs-comment">// ok</span><br></code></pre></td></tr></table></figure><h4 id="匿名函数（lambda函数）"><a href="#匿名函数（lambda函数）" class="headerlink" title="匿名函数（lambda函数）"></a>匿名函数（lambda函数）</h4><blockquote><p>函数表达式同其他表达式，使用前需先声明，否则报错</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">test</span>();<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span> () &#123;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;test&#x27;</span>)<br>&#125;<br><span class="hljs-comment">// 报错</span><br></code></pre></td></tr></table></figure><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><blockquote><p>经典阶乘</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">factorial</span> (num) &#123;<br>  <span class="hljs-keyword">if</span> (num &lt;= <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> num * <span class="hljs-title function_">factorial</span>(num - <span class="hljs-number">1</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>如下会使这个函数报错</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 把factorial()函数保存在another变量中</span><br><span class="hljs-keyword">var</span> another = factorial;<br><span class="hljs-comment">// 把变量factorial置空</span><br>factorial = <span class="hljs-literal">null</span>;<br><span class="hljs-comment">// 调用another()必须执行factorial(),而factorial不再是函数</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-title function_">another</span>(<span class="hljs-number">4</span>));<br></code></pre></td></tr></table></figure><blockquote><p>解决：使用<code>arguments.callee</code>(指向正在执行的函数的指针)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">factorial</span> (num) &#123;<br>  <span class="hljs-keyword">if</span> (num &lt;= <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> num * <span class="hljs-variable language_">arguments</span>.<span class="hljs-title function_">callee</span>(num - <span class="hljs-number">1</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>结论：使用递归函数，通过<code>arguments.callee</code>替代函数名更保险</p></blockquote><blockquote><p>特例：严格模式下无法通过脚本访问<code>arguments.callee</code></p></blockquote><blockquote><p>方案：使用命名表达式（适用于严格和非严格模式）</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> factorial = (<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span> (num) &#123;<br>    <span class="hljs-keyword">if</span> (num &lt;= <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> num * <span class="hljs-title function_">f</span>(num - <span class="hljs-number">1</span>);<br>    &#125;<br>  &#125;<br>);<br></code></pre></td></tr></table></figure><blockquote><p>对比不适用命名表达式的情况</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> factorial = <span class="hljs-keyword">function</span> (<span class="hljs-params">num</span>) &#123;<br>  <span class="hljs-keyword">if</span> (num &lt;= <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> num * <span class="hljs-title function_">factorial</span>(num - <span class="hljs-number">1</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p></p><blockquote><p>创建了名为f()的命名函数表达式，并将其赋值给factorial，这样尽管把函数赋值给其他变量，函数名f仍有效</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>服务器搭建Gitlab</title>
    <link href="/wilson-blog-hexo/2018/08/27/gitlab-use/"/>
    <url>/wilson-blog-hexo/2018/08/27/gitlab-use/</url>
    
    <content type="html"><![CDATA[<h1 id="服务器搭建Gitlab"><a href="#服务器搭建Gitlab" class="headerlink" title="服务器搭建Gitlab"></a>服务器搭建Gitlab</h1><blockquote><p>创作于2018年左右，最初创建时间已丢失</p></blockquote><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>ubuntu16.04</li></ul><h2 id="安装gitlab-ee步骤-无特殊说明，安装过程中采用默认配置项"><a href="#安装gitlab-ee步骤-无特殊说明，安装过程中采用默认配置项" class="headerlink" title="安装gitlab-ee步骤(无特殊说明，安装过程中采用默认配置项)"></a>安装gitlab-ee步骤(无特殊说明，安装过程中采用默认配置项)</h2><ol><li>安装和配置必要依赖</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">sudo apt-<span class="hljs-keyword">get</span> <span class="hljs-keyword">update</span><br>sudo apt-<span class="hljs-keyword">get</span> install -y curl openssh-<span class="hljs-keyword">server</span> ca-certificates<br></code></pre></td></tr></table></figure><ol start="2"><li>安装邮件服务器</li></ol><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">sudo apt-<span class="hljs-built_in">get</span> install -y <span class="hljs-built_in">postfix</span><br></code></pre></td></tr></table></figure><ol start="3"><li>下载gitlab安装包并安装</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl https:<span class="hljs-regexp">//</span>packages.gitlab.com<span class="hljs-regexp">/install/</span>repositories<span class="hljs-regexp">/gitlab/gi</span>tlab-ee/script.deb.sh | sudo bash<br></code></pre></td></tr></table></figure><ol start="4"><li>设置访问路径(此处有坑)</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo <span class="hljs-attribute">EXTERNAL_URL</span>=<span class="hljs-string">&quot;http://gitlab.example.com&quot;</span> apt-<span class="hljs-built_in">get</span> install gitlab-ee<br></code></pre></td></tr></table></figure><p>这里的方式是在安装gitlab企业版的命令上通过参数的方式指定访问地址，官网示例中直接给的是一个域名地址，此操作其实会在gitlab安装后的<code>/etc/gitlab/gitlab.rb</code>文件里有个<code>EXTERNAL_URL</code>的配置项（整个gitlab的所有配置都在此）</p><p>所以当然这里也就可以只进行安装，即</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> install gitlab-ee<br></code></pre></td></tr></table></figure><p>然后再修改默认的配置文件，把<code>EXTERNAL_URL</code>改成gitlab的访问地址</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/gi</span>tlab/gitlab.rb<br></code></pre></td></tr></table></figure><p>重新加载配置文件</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo gitlab-ctl reconfigure</span><br></code></pre></td></tr></table></figure><p>重启gitlab服务</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo gitlab-ctl restart</span><br></code></pre></td></tr></table></figure><p>问题来了，如果你这里<code>EXTERNAL_URL</code>配置为机器的IP，即</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">EXTERNAL_URL</span>=<span class="hljs-string">&quot;http://xx.xx.xx.xx&quot;</span><br></code></pre></td></tr></table></figure><p>那么默认访问的是<code>http://xx.xx.xx.xx</code>的80端口，而80端口可能被占用，或受ECS限制，需要单独配置80端口的访问权限，所以这里可以自定义访问的端口，方法也很简单，就是在IP地址后面加上端口，例如：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">EXTERNAL_URL</span>=<span class="hljs-string">&quot;http://xx.xx.xx.xx:8800&quot;</span><br></code></pre></td></tr></table></figure><p>然后还有关键的一步，就是开放端口对外的访问权限，这里以ubuntu16.04为例</p><p>安装iptables</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> install iptables<br></code></pre></td></tr></table></figure><p>添加规则</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">iptables -<span class="hljs-selector-tag">I</span> <span class="hljs-selector-tag">INPUT</span> -<span class="hljs-selector-tag">p</span> tcp <span class="hljs-attr">--dport</span> <span class="hljs-number">8800</span> -j ACCEPT<br></code></pre></td></tr></table></figure><p>保存规则</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">iptables-save</span><br></code></pre></td></tr></table></figure><p>这样操作后，服务器重启后会失效，需要持久化规则</p><p>安装iptables-persistent</p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gml">sudo apt-get install iptables-<span class="hljs-variable language_">persistent</span><br>sudo netfilter-<span class="hljs-variable language_">persistent</span> save<br>sudo netfilter-<span class="hljs-variable language_">persistent</span> reload<br></code></pre></td></tr></table></figure><ol start="5"><li>初始化账号</li></ol><p>访问配置好的gitlab地址，例如<code>http://xx.xx.xx.xx:8800</code>，会提示设置密码，这里设置的即是管理员root的密码，重设后使用如下账号登录管理员账号</p><p>用户名：root</p><p>密码：重设后的密码</p><ol start="6"><li>初始化组、用户、项目</li></ol><p>创建一个group，点击顶部扳手图标（admin area），添加用户，添加用户后保存，然后再通过Edit修改可设置初始密码（用户使用该账号登录后会提示修改密码）</p><ol start="7"><li><p>将用户添加进组，创建项目</p></li><li><p>用户初始操作</p></li></ol><p>登录gitlab地址，点击Setting，添加本地已有的或生成的SSH-KEY</p><ol start="9"><li>完成</li></ol><h2 id="卸载gitlab-ee"><a href="#卸载gitlab-ee" class="headerlink" title="卸载gitlab-ee"></a>卸载gitlab-ee</h2><p>这才是个大坑，比安装麻烦（卸载干净不容易），官网也没找到官方的卸载步骤</p><p>还好*nix系统秉承一切皆文件，并且提供了一系列强大工具，比如ls、find、grep，可以全局查找进行手动清理</p><ol><li>停服务</li></ol><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">sudo gitlab-ctl stop <br></code></pre></td></tr></table></figure><ol start="2"><li>进程操作（可选）</li></ol><p>查看进程</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ps</span> -ef|<span class="hljs-keyword">grep</span> gitlab<br></code></pre></td></tr></table></figure><p>找到守护进程<code>runsvdir -P /opt/gitlab/service log</code>的PID并停掉</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">kill</span> -<span class="hljs-number">9</span> 端口号<br></code></pre></td></tr></table></figure><ol start="3"><li>删除gitlab相关文件</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> / -name gitlab |xargs rm -rf <br></code></pre></td></tr></table></figure><ol start="4"><li>删除包含gitlab的相关目录和文件</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> / -name *gitlab*|xargs rm -rf<br></code></pre></td></tr></table></figure><ol start="5"><li>删除uninstall时生成的备份文件（可选）</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">ls <span class="hljs-regexp">/root/gi</span>tlab*<br>rm -rf <span class="hljs-regexp">/root/gi</span>tlab*<br></code></pre></td></tr></table></figure><ol start="6"><li>Done</li></ol><h2 id="安装gitlab-ce"><a href="#安装gitlab-ce" class="headerlink" title="安装gitlab-ce"></a>安装gitlab-ce</h2><p>1、2步同企业版(简略如下)</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">sudo apt-<span class="hljs-built_in">get</span> install curl openssh-server ca-certificates <span class="hljs-built_in">postfix</span><br></code></pre></td></tr></table></figure><ol start="3"><li>下载gitlab-ce包</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">curl</span> -O https://downloads-packages.s3.amazonaws.com/ubuntu-<span class="hljs-number">14</span>.<span class="hljs-number">04</span>/gitlab_7.<span class="hljs-number">4</span>.<span class="hljs-number">2</span>-omnibus-<span class="hljs-number">1</span>_amd64.deb<br></code></pre></td></tr></table></figure><ol start="4"><li>或者直接下载安装脚本</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl -sS https:<span class="hljs-regexp">//</span>packages.gitlab.com<span class="hljs-regexp">/install/</span>repositories<span class="hljs-regexp">/gitlab/gi</span>tlab-ce/script.deb.sh | sudo bash<br></code></pre></td></tr></table></figure><ol start="5"><li>上面的脚本执行后会添加gitlab服务器配置到<code>/etc/apt/sources.list.d</code>目录，并且添加配置文件<code>gitlab_gitlab-ce.list</code>到<code>/etc/apt/sources.list.d</code>目录，内容如下</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># this file was generated by packages.gitlab.com for</span><br><span class="hljs-comment"># the repository at https://packages.gitlab.com/gitlab/gitlab-ce</span><br><br>deb https:<span class="hljs-regexp">//</span>packages.gitlab.com<span class="hljs-regexp">/gitlab/gi</span>tlab-ce<span class="hljs-regexp">/ubuntu/</span> xenial main<br>deb-src https:<span class="hljs-regexp">//</span>packages.gitlab.com<span class="hljs-regexp">/gitlab/gi</span>tlab-ce<span class="hljs-regexp">/ubuntu/</span> xenial main<br></code></pre></td></tr></table></figure><p>可通过<code>more /etc/apt/sources.list.d/gitlab_gitlab-ce.list</code>查看</p><blockquote><p>后缀为deb的为包，使用curl -O 下载到本地当前文件夹，名称为deb包的文件名，使用<code>-o</code>参数可以自定义下载到本地的文件名，例如<code>curl -o mygettext.html http://www.gnu.org/software/gettext/manual/gettext.html</code>，后缀为deb.sh的为安装脚本，需要通过管道调用bash来运行安装脚本，例如<code>curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.deb.sh | sudo bash</code></p></blockquote><ol start="6"><li>安装gitlab-ce</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> install gitlab-ce<br></code></pre></td></tr></table></figure><ol start="7"><li>修改配置文件，把<code>EXTERNAL_URL</code>改成gitlab的访问地址</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/gi</span>tlab/gitlab.rb<br></code></pre></td></tr></table></figure><ol start="8"><li>重新加载配置文件</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo gitlab-ctl reconfigure</span><br></code></pre></td></tr></table></figure><ol start="9"><li>重启gitlab服务</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo gitlab-ctl restart</span><br></code></pre></td></tr></table></figure><ol start="10"><li><p>其他操作见企业版安装（比如开放外部访问端口等）</p></li><li><p>访问配置好的地址</p></li><li><p>账号初始化</p></li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://about.gitlab.com/installation/#ubuntu">gitlab官方文档——安装篇</a></li><li><a href="https://www.jianshu.com/p/2ec5d16db02b">ubuntu开放指定端口</a></li><li><a href="https://docs.joyent.com/public-cloud/getting-started/ssh-keys/generating-an-ssh-key-manually/manually-generating-your-ssh-key-in-mac-os-x">使用本地已有ssh-key或生成ssh-key</a></li><li><a href="https://www.cnblogs.com/restran/p/4063880.html">社区版gitlab部署</a></li><li><a href="https://forum.gitlab.com/t/complete-uninstall-gitlab-ce-from-ubuntu-14/6232/2">gitlab论坛关于卸载gitlab社区版</a></li><li><a href="https://blog.csdn.net/huhuhuemail/article/details/80519433">CentOs 7 安装 GitLab、完全卸载GitLab</a></li><li><a href="https://beginor.github.io/2016/05/07/gitlab-ce-installation-record.html">Ubuntu16.04安装gitlab-ce</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>一周时间使用Vue+Koa全栈开发论坛项目</title>
    <link href="/wilson-blog-hexo/2018/08/27/koa-vue-forum/"/>
    <url>/wilson-blog-hexo/2018/08/27/koa-vue-forum/</url>
    
    <content type="html"><![CDATA[<h1 id="一周时间使用Vue-Koa全栈开发论坛项目"><a href="#一周时间使用Vue-Koa全栈开发论坛项目" class="headerlink" title="一周时间使用Vue+Koa全栈开发论坛项目"></a>一周时间使用Vue+Koa全栈开发论坛项目</h1><h2 id="使用vue-cli3脚手架初始化前端项目"><a href="#使用vue-cli3脚手架初始化前端项目" class="headerlink" title="使用vue-cli3脚手架初始化前端项目"></a>使用vue-cli3脚手架初始化前端项目</h2><h3 id="1-安装vue-cli3"><a href="#1-安装vue-cli3" class="headerlink" title="1. 安装vue-cli3"></a>1. 安装vue-cli3</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> install -g @vue/cli<br></code></pre></td></tr></table></figure><h3 id="2-创建项目"><a href="#2-创建项目" class="headerlink" title="2. 创建项目"></a>2. 创建项目</h3><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">vue <span class="hljs-keyword">create</span> <span class="hljs-built_in">code</span>-monkeys-fe-vue<br></code></pre></td></tr></table></figure><h3 id="3-核心配置文件"><a href="#3-核心配置文件" class="headerlink" title="3. 核心配置文件"></a>3. 核心配置文件</h3><blockquote><p>vue-cli3采用<code>约定优于配置</code>的思想，去除了很多配置项，转而都由项目根目录下的<code>vue.config.js</code>中既定的格式进行配置</p></blockquote><h3 id="4-示例配置"><a href="#4-示例配置" class="headerlink" title="4. 示例配置"></a>4. 示例配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><br><span class="hljs-keyword">var</span> apiRoutes = express.<span class="hljs-title class_">Router</span>();<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;/mock&#x27;</span>,apiRoutes)<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">responseFunction</span> = (<span class="hljs-params">req, res</span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> fileName = req.<span class="hljs-property">params</span>.<span class="hljs-property">fileName</span>;<br>  <span class="hljs-keyword">let</span> obj = <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// require 有缓存问题</span><br>    <span class="hljs-keyword">let</span> objStr = fs.<span class="hljs-title function_">readFileSync</span>(path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;/mock/data/&#x27;</span> + fileName)).<span class="hljs-title function_">toString</span>();<br>    <span class="hljs-keyword">if</span> (objStr) &#123;<br>      obj = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(objStr);<br>    &#125;<br>  &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>    <span class="hljs-comment">// console.log(&#x27;无法打开 =&gt; &#x27; + fileName + &#x27; 文件&#x27;);</span><br>  &#125;<br>  <span class="hljs-keyword">if</span> (!obj || obj == <span class="hljs-literal">undefined</span>) &#123;<br>    res.<span class="hljs-title function_">json</span>(&#123;<br>      <span class="hljs-attr">err</span>: <span class="hljs-string">&#x27;json文件无数据&#x27;</span><br>    &#125;);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    res.<span class="hljs-title function_">json</span>(obj);<br>  &#125;<br>&#125;;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-comment">// 中间加一道代理，根据识别到的路由规则拦截请求（此函数相当于拦截器）</span><br>    <span class="hljs-title function_">before</span>(<span class="hljs-params">app</span>) &#123;<br>      app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/mock/data/:fileName&#x27;</span>, responseFunction);<br>      app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/mock/data/:fileName&#x27;</span>, responseFunction);<br>    &#125;,<br>    <span class="hljs-comment">// 解决跨域问题，对`/api`请求代理跨域</span><br>    <span class="hljs-attr">proxy</span>: &#123;<br>      <span class="hljs-string">&#x27;/api&#x27;</span>: &#123;<br>        <span class="hljs-comment">// target: &#x27;http://127.0.0.1:3000/&#x27;,//设置你调用的接口域名和端口号 </span><br>        <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://xx.xx.xx.xx:3000/&#x27;</span>,<span class="hljs-comment">//设置你调用的接口域名和端口号 </span><br>        <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,     <span class="hljs-comment">//跨域</span><br>        <span class="hljs-comment">// pathRewrite: &#123;</span><br>        <span class="hljs-comment">//   &#x27;^/api&#x27;: &#x27;/&#x27;          //这里理解成用‘/api’代替target里面的地址，后面组件中我们掉接口时直接用api代替 比如我要调用&#x27;http://10.1.5.11:8080/xxx/duty?time=2017-07-07 14:57:22&#x27;，直接写‘/api/xxx/duty?time=2017-07-07 14:57:22’即可</span><br>        <span class="hljs-comment">// &#125;</span><br>      &#125;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">configureWebpack</span>: &#123;<br>    <span class="hljs-attr">devtool</span>: <span class="hljs-string">&#x27;source-map&#x27;</span><br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-package-json"><a href="#5-package-json" class="headerlink" title="5. package.json"></a>5. package.json</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;code-monkeys-fe-vue&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.1.0&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;private&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;dev&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cross-env NODE_ENV=dev vue-cli-service serve --inspect --open&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cross-env NODE_ENV=prod vue-cli-service build&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;lint&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vue-cli-service lint&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;dependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;axios&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^0.18.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;vue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^2.5.17&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;vue-router&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^3.0.1&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;devDependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;@vue/cli-plugin-babel&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^3.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;@vue/cli-plugin-eslint&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^3.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;@vue/cli-service&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^3.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;cross-env&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^5.2.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;vue-template-compiler&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^2.5.17&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;eslintConfig&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;root&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;env&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;node&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;extends&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-string">&quot;plugin:vue/essential&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;eslint:recommended&quot;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;rules&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;parserOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;parser&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;babel-eslint&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;postcss&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;plugins&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;autoprefixer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;browserslist&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;&gt; 1%&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;last 2 versions&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;not ie &lt;= 8&quot;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><h3 id="6-加入router"><a href="#6-加入router" class="headerlink" title="6. 加入router"></a>6. 加入router</h3><blockquote><p>修改入口文件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./utils/global&#x27;</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span><br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  router,<br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>)<br>&#125;).$mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br><br>router.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;/&#x27;</span>);<br><br><span class="hljs-comment">// 相当于以下完整写法，见：https://segmentfault.com/a/1190000014254740</span><br><span class="hljs-comment">// const app=new Vue(&#123;</span><br><span class="hljs-comment">//   el:&#x27;#app&#x27;,</span><br><span class="hljs-comment">//   router,</span><br><span class="hljs-comment">//   compoments:&#123;</span><br><span class="hljs-comment">//       App</span><br><span class="hljs-comment">//   &#125;,</span><br><span class="hljs-comment">//   template:&quot;&lt;App/&gt;&quot;</span><br><span class="hljs-comment">// &#125;);</span><br></code></pre></td></tr></table></figure><blockquote><p>增加路由配置</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Router</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">HomeContent</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/views/HomeContent&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">SinglePostContent</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/ForumPost/SinglePostContent.vue&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Router</span>)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Router</span>(&#123;<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;history&#x27;</span>,<br>  <span class="hljs-attr">routes</span>: [<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;homeContent&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-title class_">HomeContent</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/single-post/:id&#x27;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;single-post-content&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-title class_">SinglePostContent</span><br>    &#125;,<br>  ]<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="7-开发主页面"><a href="#7-开发主页面" class="headerlink" title="7. 开发主页面"></a>7. 开发主页面</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;template&gt;<br>  &lt;<span class="hljs-selector-tag">div</span> id=&quot;app&quot;&gt;<br>    &lt;ForumHome /&gt;<br>  &lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import ForumHome <span class="hljs-selector-tag">from</span> &#x27;./components/ForumHome<span class="hljs-selector-class">.vue</span>&#x27;<br><br>export default &#123;<br>  name: <span class="hljs-string">&#x27;app&#x27;</span>,<br>  components: &#123;<br>    ForumHome<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br><span class="hljs-selector-id">#app</span> &#123;<br>  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;Avenir&#x27;</span>, Helvetica, Arial, sans-serif;<br>  -webkit-<span class="hljs-attribute">font-smoothing</span>: antialiased;<br>  -moz-osx-<span class="hljs-attribute">font-smoothing</span>: grayscale;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#2c3e50</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-comment">/* margin-top: 60px; */</span><br>&#125;<br><span class="hljs-selector-tag">html</span>, <span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>&#125;<br><span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">text-decoration</span>: none;<br>  <span class="hljs-attribute">cursor</span>: pointer;<br>&#125;<br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><h3 id="8-封装ajax请求对象"><a href="#8-封装ajax请求对象" class="headerlink" title="8. 封装ajax请求对象"></a>8. 封装ajax请求对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// export 时使用default，则import时不需要加大括号，否则需要加大括号引入export导出的变量</span><br><span class="hljs-keyword">import</span> apiConfig <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./apiConfig&#x27;</span>;<br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span>;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用立即执行函数表达式（IIFE）声明一些全局性（window对象的）方法或属性</span><br><span class="hljs-comment"> */</span><br>(<span class="hljs-keyword">function</span>(<span class="hljs-params">win</span>) &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 为 String 添加 endsWith 方法，此方法在ES6中实现，以下为向下兼容处理（Polyfill）</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title class_">String</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">endsWith</span>) &#123;<br>        <span class="hljs-title class_">String</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">endsWith</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">search, this_len</span>) &#123;<br>            <span class="hljs-keyword">if</span> (this_len === <span class="hljs-literal">undefined</span> || this_len &gt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span>) &#123;<br>                this_len = <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">substring</span>(this_len - search.<span class="hljs-property">length</span>, this_len) === search;<br>        &#125;;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断是否是字符串</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; obj </span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">isStr</span>(<span class="hljs-params">obj</span>) &#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-keyword">typeof</span> obj === <span class="hljs-string">&#x27;string&#x27;</span>)<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ajax请求</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; obj </span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">const</span> ajax = <span class="hljs-keyword">function</span> (<span class="hljs-params">obj</span>) &#123;<br>        <span class="hljs-comment">// 最终ajax请求的地址</span><br>        <span class="hljs-keyword">let</span> url;<br>        <span class="hljs-keyword">const</span> ajaxUrl = obj.<span class="hljs-property">url</span>;<br>        <span class="hljs-comment">// 如果地址以Api结尾</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isStr</span>(ajaxUrl) &amp;&amp; ajaxUrl.<span class="hljs-title function_">endsWith</span>(<span class="hljs-string">&#x27;Api&#x27;</span>)) &#123;<br>            <span class="hljs-comment">// 判断环境是否为开发环境</span><br>            <span class="hljs-keyword">const</span> env = process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span>;<br>            <span class="hljs-comment">// 存在环境变量设置并且在枚举范围内</span><br>            <span class="hljs-keyword">if</span> (env &amp;&amp; apiConfig[ajaxUrl] &amp;&amp; apiConfig[ajaxUrl][env]) &#123;<br>                url = apiConfig[ajaxUrl][env];<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            url = ajaxUrl;<br>        &#125;<br>        <span class="hljs-comment">/* eslint-disable */</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(url);<br>        <span class="hljs-keyword">if</span> (obj.<span class="hljs-property">type</span> == <span class="hljs-string">&#x27;get&#x27;</span>) &#123;<br>            axios.<span class="hljs-title function_">get</span>(url)<br>            .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>                obj.<span class="hljs-title function_">callback</span>(response);<br>            &#125;)<br>            .<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>                obj.<span class="hljs-title function_">err</span>(error);<br>            &#125;);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(url, obj.<span class="hljs-property">params</span>)<br>            axios.<span class="hljs-title function_">post</span>(url, obj.<span class="hljs-property">params</span>)<br>            .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>                obj.<span class="hljs-title function_">callback</span>(response);<br>            &#125;)<br>            .<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>                obj.<span class="hljs-title function_">err</span>(error);<br>            &#125;);<br>        &#125;<br>    &#125;<br>    win.<span class="hljs-property">ajax</span> = ajax;<br>    win.<span class="hljs-property">isStr</span> = isStr;<br>&#125;)(<span class="hljs-variable language_">window</span>)<br></code></pre></td></tr></table></figure><h3 id="9-路由使用"><a href="#9-路由使用" class="headerlink" title="9. 路由使用"></a>9. 路由使用</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;template&gt;<br>  &lt;<span class="hljs-selector-tag">div</span> class=&quot;home-center&quot;&gt;<br>    &lt;<span class="hljs-selector-tag">div</span> class=&quot;home-center-<span class="hljs-selector-tag">nav</span>&quot;&gt;<br>      &lt;router-link class=&quot;home-router&quot; <span class="hljs-selector-tag">to</span>=&quot;/&quot;&gt;<br>        &#123;&#123; page_title &#125;&#125;<br>      &lt;/router-link&gt;<br>    &lt;/<span class="hljs-selector-tag">div</span>&gt;<br>    &lt;!-- 以下为路由所决定显示的部分 --&gt;<br>    &lt;router-view&gt;&lt;/router-view&gt;<br>  &lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  name: <span class="hljs-string">&#x27;HomeCenter&#x27;</span>,<br>  <span class="hljs-built_in">data</span>() &#123;<br>    return &#123;<br>      page_title: <span class="hljs-string">&#x27;Home&#x27;</span>,<br>    &#125;<br>  &#125;,<br>  components: &#123;<br>  &#125;,<br>  props: &#123;<br>    msg: String<br>  &#125;,<br>  methods: &#123;<br>  &#125;,<br>  created() &#123;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;!-- Add &quot;scoped&quot; attribute <span class="hljs-selector-tag">to</span> limit CSS <span class="hljs-selector-tag">to</span> this component only --&gt;<br>&lt;style scoped&gt;<br><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>&#125;<br><span class="hljs-selector-class">.home-router</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">119</span>, <span class="hljs-number">119</span>, <span class="hljs-number">119</span>);<br>&#125;<br><span class="hljs-selector-class">.home-center</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: column;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#EEEEEE</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">143px</span>;<br>&#125;<br><span class="hljs-selector-class">.home-center-nav</span> &#123;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">15px</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.home-center-content</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">justify-content</span>: flex-start;<br>&#125;<br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><h3 id="10-jenkins自动化打包发布"><a href="#10-jenkins自动化打包发布" class="headerlink" title="10. jenkins自动化打包发布"></a>10. jenkins自动化打包发布</h3><blockquote><p>拉取指定git仓库指定分支或指定tag代码并执行以下脚本完成编译打包</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm config <span class="hljs-built_in">set</span> registry http://registry.npm.taobao.org/ &amp;&amp;<br>npm install &amp;&amp;<br>npm run build &amp;&amp;<br><span class="hljs-built_in">cd</span> dist &amp;&amp;<br>tar -zcvf dist.tar.gz *<br></code></pre></td></tr></table></figure><blockquote><p>指定服务器地址，通过ssh方式发送项目包并解压到指定目录</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /opt/www/codemonkeys-fe<br>tar -zxvf dist.tar.gz<br><span class="hljs-built_in">rm</span> -rf dist.tar.gz<br></code></pre></td></tr></table></figure><h3 id="11-配置Nginx"><a href="#11-配置Nginx" class="headerlink" title="11. 配置Nginx"></a>11. 配置Nginx</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs awk">server &#123;<br>    listen       <span class="hljs-number">80</span>;<br>    server_name  xxx.com;<br><br>    <span class="hljs-comment">#charset koi8-r;</span><br>    access_log  <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/nginx/</span>xxx.com.access.log  main;<br><br>    location / &#123;<br>        root    <span class="hljs-regexp">/opt/</span>www/xxx;<br>        index   index.html index.htm;<br>    &#125;<br><br>    <span class="hljs-comment"># redirect server error pages to the static page /50x.html</span><br>    <span class="hljs-comment">#</span><br>    error_page   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /<span class="hljs-number">50</span>x.html;<br>    location = /<span class="hljs-number">50</span>x.html &#123;<br>        root   <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/nginx/</span>html;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="12-使用Koa开发后端服务器提供接口"><a href="#12-使用Koa开发后端服务器提供接口" class="headerlink" title="12. 使用Koa开发后端服务器提供接口"></a>12. 使用Koa开发后端服务器提供接口</h3><blockquote><p>初始化package.json</p></blockquote><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> init<br></code></pre></td></tr></table></figure><blockquote><p>配置package.json</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;code-monkeys-fe-node&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.0.0&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#### 项目介绍 前段项目node代理服务&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;main&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;index.js&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;dev&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;export NODE_ENV=development &amp;&amp; nodemon --harmony ./app.js&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;test&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;deploy_setup&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pm2 deploy ecosystem.config.js production setup&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;deploy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pm2 deploy ecosystem.config.js production&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;start&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;export NODE_ENV=production &amp;&amp; pm2 start ./app.js --max-memory-restart 300M -n codemonkeys-node --watch&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;stop&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;export NODE_ENV=production &amp;&amp; pm2 stop ./app.js -n codemonkeys-node&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;repository&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;git&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;git@xxx.git&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;author&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;codemonkeys@wangxin&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;license&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ISC&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;dependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;babel-preset-es2015&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^6.24.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;babel-preset-stage-0&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^6.24.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;koa&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^2.5.3&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;koa-bodyparser&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^4.2.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;koa-logger&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^3.2.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;koa-mysql-session&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.0.2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;koa-redis&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^3.1.2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;koa-router&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^7.4.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;koa-session-minimal&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^3.0.4&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;koa2-cors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^2.0.6&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;mysql&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^2.16.0&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;devDependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;nodemon&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^1.18.4&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;pm2&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^3.2.2&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><blockquote><p>入口主文件<code>app.js</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Koa</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;koa&#x27;</span>);<br><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Koa</span>();<br><span class="hljs-keyword">const</span> routers = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./router/index&#x27;</span>);<br><span class="hljs-keyword">const</span> koaLogger = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;koa-logger&#x27;</span>);<br><span class="hljs-keyword">const</span> session = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;koa-session-minimal&#x27;</span>);<br><span class="hljs-keyword">const</span> redisStore = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;koa-redis&#x27;</span>);<br><span class="hljs-keyword">const</span> cors = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;koa2-cors&#x27;</span>);<br><span class="hljs-keyword">const</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;koa-bodyparser&#x27;</span>);<br><br><span class="hljs-keyword">const</span> &#123; <span class="hljs-variable constant_">HOST</span>, <span class="hljs-variable constant_">PORT</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./config/server-info&#x27;</span>);<br><br><span class="hljs-keyword">const</span> env = process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span>;<br><br><span class="hljs-comment">// cookie</span><br><span class="hljs-comment">// 存放sessionId的cookie配置</span><br><span class="hljs-comment">/* session cookie */</span><br><span class="hljs-keyword">let</span> cookieConfig = &#123;<br>  <span class="hljs-attr">maxAge</span>: <span class="hljs-number">86400000</span>,      <span class="hljs-comment">// cookie有效时长</span><br>  <span class="hljs-attr">expires</span>: <span class="hljs-string">&#x27;&#x27;</span>,        <span class="hljs-comment">// cookie失效时间</span><br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;&#x27;</span>,          <span class="hljs-comment">// 写cookie所在的路径</span><br>  <span class="hljs-attr">domain</span>: <span class="hljs-variable constant_">HOST</span>,        <span class="hljs-comment">// 写cookie所在的域名</span><br>  <span class="hljs-attr">httpOnly</span>: <span class="hljs-literal">true</span>,        <span class="hljs-comment">// 是否只用于http请求中获取</span><br>  <span class="hljs-attr">overwrite</span>: <span class="hljs-literal">true</span>,      <span class="hljs-comment">// 是否允许重写</span><br>  <span class="hljs-attr">secure</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>  <span class="hljs-attr">sameSite</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>  <span class="hljs-attr">signed</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>&#125;;<br><br><span class="hljs-comment">// 使用koa2-cors中间件解决跨域请求</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">cors</span>());<br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">bodyParser</span>());<br><br><span class="hljs-comment">// 配置session中间件</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">session</span>(&#123;<br>  <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;USER_SID&#x27;</span>,<br>  <span class="hljs-attr">store</span>: <span class="hljs-title function_">redisStore</span>(),<br>  <span class="hljs-attr">cookie</span>: cookieConfig<br>&#125;));<br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">koaLogger</span>());<br><br><span class="hljs-comment">// 初始化路由中间件</span><br>app.<span class="hljs-title function_">use</span>(routers.<span class="hljs-title function_">routes</span>()).<span class="hljs-title function_">use</span>(routers.<span class="hljs-title function_">allowedMethods</span>());<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">async</span> ctx =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (ctx.<span class="hljs-property">status</span> === <span class="hljs-number">404</span>) &#123;<br>    ctx.<span class="hljs-title function_">redirect</span>(<span class="hljs-string">&#x27;/not-found&#x27;</span>);<br>  &#125;<br>&#125;);<br><br><span class="hljs-comment">// 监听启动端口</span><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-variable constant_">PORT</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`the server is start at port <span class="hljs-subst">$&#123;PORT&#125;</span>`</span>);<br></code></pre></td></tr></table></figure><h3 id="13-使用pm2部署启动后端项目，核心配置文件"><a href="#13-使用pm2部署启动后端项目，核心配置文件" class="headerlink" title="13. 使用pm2部署启动后端项目，核心配置文件"></a>13. 使用pm2部署启动后端项目，核心配置文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  apps : [&#123;<br>    <span class="hljs-attr">script</span>: <span class="hljs-string">&#x27;app.js&#x27;</span>,<br>    interpreter : <span class="hljs-string">&#x27;node@10.0.0&#x27;</span>,<br>    <span class="hljs-comment">// Options reference: https://pm2.io/doc/en/runtime/reference/ecosystem-file/</span><br>    <span class="hljs-comment">// args: &#x27;one two&#x27;,</span><br>    <span class="hljs-attr">instances</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">autorestart</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">watch</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">max_memory_restart</span>: <span class="hljs-string">&#x27;300M&#x27;</span>,<br>    <span class="hljs-attr">env</span>: &#123;<br>      <span class="hljs-attr">NODE_ENV</span>: <span class="hljs-string">&#x27;development&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">env_production</span>: &#123;<br>      <span class="hljs-attr">NODE_ENV</span>: <span class="hljs-string">&#x27;production&#x27;</span><br>    &#125;<br>  &#125;],<br><br>  deploy : &#123;<br>    production : &#123;<br>      user : <span class="hljs-string">&#x27;root&#x27;</span>,<br>      host : <span class="hljs-string">&#x27;xx.xx.xx.xx&#x27;</span>,<br>      ref  : <span class="hljs-string">&#x27;origin/master&#x27;</span>,<br>      repo : <span class="hljs-string">&#x27;git@xx.git&#x27;</span>,<br>      path : <span class="hljs-string">&#x27;/opt/www/xxx&#x27;</span>,<br>      <span class="hljs-string">&quot;ssh_options&quot;</span>:<span class="hljs-string">&quot;StrictHostKeyChecking=no&quot;</span>,<br>      <span class="hljs-string">&#x27;post-deploy&#x27;</span> : <span class="hljs-string">&#x27;npm install &amp;&amp; pm2 reload ecosystem.config.js --env production&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h3 id="14-增加后端请求路由配置"><a href="#14-增加后端请求路由配置" class="headerlink" title="14. 增加后端请求路由配置"></a>14. 增加后端请求路由配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;koa-router&#x27;</span>)();<br><span class="hljs-keyword">const</span> api = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../controller/api&#x27;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = router<br>  .<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, api.<span class="hljs-property">homepage</span>)<br>  .<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/api/forum-post/list&#x27;</span>, api.<span class="hljs-property">getPosts</span>)<br>  .<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/api/forum-post/getById&#x27;</span>, api.<span class="hljs-property">getPostById</span>);<br></code></pre></td></tr></table></figure><h3 id="15-接收请求并处理"><a href="#15-接收请求并处理" class="headerlink" title="15. 接收请求并处理"></a>15. 接收请求并处理</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> forumPost = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../models/forum-post&#x27;</span>);<br><span class="hljs-keyword">const</span> timeFormat = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../utils/time-format&#x27;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">homepage</span>(<span class="hljs-params">ctx</span>) &#123;<br>    <span class="hljs-keyword">return</span> ctx.<span class="hljs-property">body</span> = <span class="hljs-string">&#x27;server running&#x27;</span><br>  &#125;,<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 分页查询列表</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; ctx </span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">getPosts</span>(<span class="hljs-params">ctx</span>) &#123;<br>    <span class="hljs-keyword">const</span> currentPage = ctx.<span class="hljs-property">request</span>.<span class="hljs-property">query</span>.<span class="hljs-property">currentPage</span> || <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">let</span> pageSize = ctx.<span class="hljs-property">request</span>.<span class="hljs-property">query</span>.<span class="hljs-property">pageSize</span> || <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">const</span> page = &#123;<br>      <span class="hljs-attr">currentPage</span>: currentPage,<br>      <span class="hljs-attr">pageSize</span>: pageSize<br>    &#125;;<br>    <span class="hljs-keyword">let</span> result = <span class="hljs-keyword">await</span> forumPost.<span class="hljs-title function_">getPostList</span>(page);<br>    result = result.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>      item.<span class="hljs-property">create_time</span> = <span class="hljs-title function_">timeFormat</span>(item.<span class="hljs-property">create_time</span>);<br>      <span class="hljs-keyword">return</span> item;<br>    &#125;);<br>    <span class="hljs-keyword">return</span> ctx.<span class="hljs-property">body</span> = &#123;<br>      <span class="hljs-attr">status</span>: <span class="hljs-number">200</span>,<br>      <span class="hljs-attr">data</span>: &#123;<br>        result<br>      &#125;<br>    &#125;;<br>  &#125;,<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 根据ID查询</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; ctx </span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">getPostById</span>(<span class="hljs-params">ctx</span>) &#123;<br>    <span class="hljs-keyword">const</span> postId = ctx.<span class="hljs-property">request</span>.<span class="hljs-property">body</span>.<span class="hljs-property">postId</span>;<br>    <span class="hljs-keyword">let</span> result = <span class="hljs-keyword">await</span> forumPost.<span class="hljs-title function_">getPostById</span>(postId);<br>    <span class="hljs-keyword">return</span> ctx.<span class="hljs-property">body</span> = &#123;<br>      <span class="hljs-attr">status</span>: <span class="hljs-number">200</span>,<br>      <span class="hljs-attr">data</span>: &#123;<br>        result<br>      &#125;<br>    &#125;;<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="16-操纵数据库做数据获取"><a href="#16-操纵数据库做数据获取" class="headerlink" title="16. 操纵数据库做数据获取"></a>16. 操纵数据库做数据获取</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> dbUtils = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../utils/db-utils&#x27;</span>);<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">ForumPost</span> = &#123;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 分页查询文章列表</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; page </span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">getPostList</span>(<span class="hljs-params">page</span>) &#123;<br>    <span class="hljs-keyword">const</span> _sql = <span class="hljs-string">`</span><br><span class="hljs-string">      SELECT * FROM forum_post</span><br><span class="hljs-string">      WHERE is_delete = 0 AND is_publish = 1</span><br><span class="hljs-string">      ORDER BY forum_post.create_time DESC</span><br><span class="hljs-string">      LIMIT <span class="hljs-subst">$&#123;page.pageSize&#125;</span> OFFSET <span class="hljs-subst">$&#123;page.currentPage - <span class="hljs-number">1</span>&#125;</span>`</span>;<br>    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> dbUtils.<span class="hljs-title function_">query</span>(_sql);<br>    <span class="hljs-keyword">return</span> result;<br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获取指定文章</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; id 文章id</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">getPostById</span>(<span class="hljs-params">id</span>) &#123;<br>    <span class="hljs-keyword">const</span> _sql = <span class="hljs-string">`</span><br><span class="hljs-string">      SELECT forum_post.*</span><br><span class="hljs-string">      FROM forum_post</span><br><span class="hljs-string">      WHERE forum_post.id = <span class="hljs-subst">$&#123;id&#125;</span>`</span>;<br>    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> dbUtils.<span class="hljs-title function_">query</span>(_sql);<br><br>    <span class="hljs-keyword">if</span> (result.<span class="hljs-property">length</span>) &#123;<br>      <span class="hljs-keyword">return</span> result[<span class="hljs-number">0</span>];<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  &#125;,<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">ForumPost</span>;<br></code></pre></td></tr></table></figure><h3 id="17-新建数据库"><a href="#17-新建数据库" class="headerlink" title="17. 新建数据库"></a>17. 新建数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br><span class="hljs-comment">/** 建库 **/</span><br><span class="hljs-keyword">CREATE</span> DATABASE IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> `codemonkeys<span class="hljs-operator">-</span>node` <span class="hljs-keyword">DEFAULT</span> CHARSET utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci;<br><br><span class="hljs-comment">/** 建帖子表 **/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> `forum_post`(<br>   `id` <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>   `avatar` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NULL</span>,<br>   `title` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">40</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>   `author` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">40</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>   `<span class="hljs-type">date</span>` datetime,<br>   `create_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span>,<br>   `category` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">40</span>) <span class="hljs-keyword">NULL</span>,<br>   `content` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20000</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>   `commentNum` <span class="hljs-type">INT</span> <span class="hljs-keyword">NULL</span>,<br>   `is_delete` <span class="hljs-type">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span>,<br>   `is_publish` <span class="hljs-type">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">1</span>,<br>   <span class="hljs-keyword">PRIMARY</span> KEY ( `id` )<br>)ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-comment">/** 原始数据 **/</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> forum_post <br>(avatar, title, author, <span class="hljs-type">date</span>, category, content, commentNum) <br><span class="hljs-keyword">VALUES</span> <br>(<span class="hljs-string">&#x27;http://ourcia6f4.bkt.clouddn.com/avatar3.jpg&#x27;</span>,<span class="hljs-string">&#x27;基于Spring Cloud的微服务设计&#x27;</span>,<span class="hljs-string">&#x27;wangzhenzhong&#x27;</span>,<span class="hljs-string">&#x27;2018-08-27&#x27;</span>,<span class="hljs-string">&#x27;微服务&#x27;</span>,<span class="hljs-string">&#x27;微服务这个词大家应该都不陌生，是最近几年技术发展的热门词汇之一。在当前系统需求越来越复杂，实现和维护成本越来越高的背景下，微服务确实是未来的发展趋势之一。由于工作的需要，最近花了半个月左右的时间研究了基于Spring Cloud的微服务设计与实现，颇有收获，本文就来对这半个月的成果进行一个总结，并聊一聊在我对微服务的一些思考。&#x27;</span>,<span class="hljs-string">&#x27;64&#x27;</span><br>),<br>(<span class="hljs-string">&#x27;http://ourcia6f4.bkt.clouddn.com/avatar4.jpg&#x27;</span>,<span class="hljs-string">&#x27;再品Git, 深度解读&#x27;</span>,<span class="hljs-string">&#x27;Taikoo&#x27;</span>,<span class="hljs-string">&#x27;2018-08-23&#x27;</span>,<span class="hljs-string">&#x27;git&#x27;</span>,<span class="hljs-string">&#x27;和一个长期使用IDE(eclipse)集成git进行代码版本管理的人交流项目，博文内容将采用类似《大话设计模式》的对话体进行，场景真实，有代入感，正文部门前面是对方参照我写的readme搭建基于vue-cli的demo项目，安装node并通过npm安装项目依赖并本地启动项目等等，由于对方为后端Java开发，对新前端技术栈了解比较少，在搭建环境和启动项目过程中滋生一些趣事，比如使用npm启动项目后如何在浏览器访问项目，我为了让其醒目意识到我们的项目首页就是未经改动的Vue-cli首页，于是我将首页改动并推到远程master分支，后面便是我们的搞笑对话。&#x27;</span>,<span class="hljs-string">&#x27;60&#x27;</span><br>);<br><br></code></pre></td></tr></table></figure><h3 id="18-后端接口服务nginx配置"><a href="#18-后端接口服务nginx配置" class="headerlink" title="18. 后端接口服务nginx配置"></a>18. 后端接口服务nginx配置</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><br><span class="hljs-section">server</span> &#123;<br>     <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>     <span class="hljs-attribute">server_name</span> xxx.com;<br>     <span class="hljs-attribute">access_log</span> /var/log/nginx/xxx.com-access.log;<br>     <span class="hljs-attribute">error_log</span>  /var/log/nginx/xxx.com-<span class="hljs-literal">error</span>.log;<br><br>     <span class="hljs-section">location</span> / &#123;<br>             <span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>             <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>             <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$http_host</span>;<br>             <span class="hljs-attribute">proxy_set_header</span> X-NginX-Proxy <span class="hljs-literal">true</span>;<br>             <span class="hljs-attribute">proxy_pass</span> http://xx.xx.xx.xx:3000/;<br>             <span class="hljs-attribute">proxy_redirect</span> <span class="hljs-literal">off</span>;<br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="19-发布后端服务到服务器指定目录"><a href="#19-发布后端服务到服务器指定目录" class="headerlink" title="19. 发布后端服务到服务器指定目录"></a>19. 发布后端服务到服务器指定目录</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm <span class="hljs-built_in">run</span> deploy_setup<br></code></pre></td></tr></table></figure><blockquote><p>会在指定目录生成三个目录</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm <span class="hljs-built_in">run</span> deploy<br></code></pre></td></tr></table></figure><blockquote><p>会将后端项目部署到指定目录</p></blockquote><h3 id="20-启动后端项目在服务器后端运行"><a href="#20-启动后端项目在服务器后端运行" class="headerlink" title="20. 启动后端项目在服务器后端运行"></a>20. 启动后端项目在服务器后端运行</h3><blockquote><p>进入服务器，在后端项目目录执行</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm <span class="hljs-built_in">run</span> start<br></code></pre></td></tr></table></figure><h3 id="21-即可通过浏览器访问前端项目，调用后端接口返回数据进行显示"><a href="#21-即可通过浏览器访问前端项目，调用后端接口返回数据进行显示" class="headerlink" title="21. 即可通过浏览器访问前端项目，调用后端接口返回数据进行显示"></a>21. 即可通过浏览器访问前端项目，调用后端接口返回数据进行显示</h3>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>在Ubuntu 16.04安装禅道</title>
    <link href="/wilson-blog-hexo/2018/08/27/zendao/"/>
    <url>/wilson-blog-hexo/2018/08/27/zendao/</url>
    
    <content type="html"><![CDATA[<blockquote><p>创作于2018年左右，最初创建时间已丢失</p></blockquote><h1 id="在Ubuntu-16-04安装禅道"><a href="#在Ubuntu-16-04安装禅道" class="headerlink" title="在Ubuntu 16.04安装禅道"></a>在Ubuntu 16.04安装禅道</h1><h2 id="1-在任意目录下载解压版压缩包"><a href="#1-在任意目录下载解压版压缩包" class="headerlink" title="1. 在任意目录下载解压版压缩包"></a>1. 在任意目录下载解压版压缩包</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> http://dl.cnezsoft.com/zentao/<span class="hljs-number">10</span>.<span class="hljs-number">4</span>/ZenTaoPMS.<span class="hljs-number">10</span>.<span class="hljs-number">4</span>.stable.zbox_64.tar.gz<br></code></pre></td></tr></table></figure><p><a href="https://www.zentao.net/download/80090.html">下载地址</a></p><h2 id="2-将压缩包解压到指定目录-opt（必须）"><a href="#2-将压缩包解压到指定目录-opt（必须）" class="headerlink" title="2. 将压缩包解压到指定目录/opt（必须）"></a>2. 将压缩包解压到指定目录<code>/opt</code>（必须）</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">sudo tar -zxvf ZenTaoPMS.<span class="hljs-number">10.4</span><span class="hljs-selector-class">.stable</span><span class="hljs-selector-class">.zbox_64</span><span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.gz</span> -C /opt<br></code></pre></td></tr></table></figure><h2 id="3-指定apache和mysql端口启动"><a href="#3-指定apache和mysql端口启动" class="headerlink" title="3. 指定apache和mysql端口启动"></a>3. 指定apache和mysql端口启动</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/opt/</span>zbox/zbox -ap <span class="hljs-number">8080</span> -mp <span class="hljs-number">3306</span> start<br></code></pre></td></tr></table></figure><p>查看是否提示</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-literal">Start</span> Apache success<br><span class="hljs-literal">Start</span> Mysql success<br></code></pre></td></tr></table></figure><h2 id="4-登录使用"><a href="#4-登录使用" class="headerlink" title="4. 登录使用"></a>4. 登录使用</h2><p>初始账号</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">admin</span><br><span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><h2 id="5-机器开机自启配置"><a href="#5-机器开机自启配置" class="headerlink" title="5. 机器开机自启配置"></a>5. 机器开机自启配置</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>在<code>/etc/init.d/rc.local</code>中添加要运行的脚本（不建议使用）</p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><ol><li>新建一个脚本zentao.sh</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">### BEGIN INIT INFO</span><br><span class="hljs-comment"># Provides:          codemonkeys</span><br><span class="hljs-comment"># Required-Start:    $local_fs $network</span><br><span class="hljs-comment"># Required-Stop:     $local_fs</span><br><span class="hljs-comment"># Default-Start:     2 3 4 5</span><br><span class="hljs-comment"># Default-Stop:      0 1 6</span><br><span class="hljs-comment"># Short-Description: zentao service</span><br><span class="hljs-comment"># Description:       zentao service daemon</span><br><span class="hljs-comment">### END INIT INFO</span><br>/opt/zbox/zbox -ap 8090 -mp 3390 start<br></code></pre></td></tr></table></figure><p>需要添加中间的一段注释内容，否则会在<code>sudo update-rc.d zentao.sh defaults 99</code>时提示</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">insserv: </span>warning: <span class="hljs-keyword">script </span><span class="hljs-string">&#x27;zentao.sh&#x27;</span> missing LSB tags <span class="hljs-keyword">and </span>overrides<br></code></pre></td></tr></table></figure><p>或者一劳永逸（不推荐）</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">apt-<span class="hljs-built_in">get</span> <span class="hljs-built_in">remove</span> insserv<br></code></pre></td></tr></table></figure><ol start="2"><li>设置脚本执行权限</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo chmod <span class="hljs-number">755</span> <span class="hljs-regexp">/etc/i</span>nit.d/zentao.sh<br></code></pre></td></tr></table></figure><ol start="3"><li>将脚本加入启动脚本中</li></ol><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">sudo <span class="hljs-keyword">update</span>-rc.<span class="hljs-keyword">d</span> zentao.<span class="hljs-keyword">sh</span> defaults 99<br></code></pre></td></tr></table></figure><p>最后的数字为<code>脚本启动顺序号</code>，取值范围是0-99</p><ol start="4"><li>验证是否已成功添加</li></ol><p>在上面脚本中配置的rc等级<code>Default-Start:     2 3 4 5</code>中的任意一个rc目录中查看是否增加了<code>zentao.sh</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /etc/rc2.d<br><span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p>查看是否有<code>zentao.sh</code>后缀的脚本</p><ol start="5"><li>移出执行脚本方法</li></ol><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">sudo <span class="hljs-keyword">update</span>-rc.d -<span class="hljs-keyword">f</span> zentao.<span class="hljs-keyword">sh</span> <span class="hljs-built_in">remove</span><br></code></pre></td></tr></table></figure><h2 id="6-停止和重启"><a href="#6-停止和重启" class="headerlink" title="6. 停止和重启"></a>6. 停止和重启</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/opt/</span>zbox/zbox stop<br><span class="hljs-regexp">/opt/</span>zbox/zbox restart<br></code></pre></td></tr></table></figure><h2 id="7-其他-查看命令"><a href="#7-其他-查看命令" class="headerlink" title="7. 其他(查看命令)"></a>7. 其他(查看命令)</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/opt/</span>zbox/zbox -h<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>再品Git, 深度解读</title>
    <link href="/wilson-blog-hexo/2018/08/23/git-use/"/>
    <url>/wilson-blog-hexo/2018/08/23/git-use/</url>
    
    <content type="html"><![CDATA[<h1 id="再品Git-深度解读"><a href="#再品Git-深度解读" class="headerlink" title="再品Git, 深度解读"></a>再品Git, 深度解读</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>和一个长期使用IDE(eclipse)集成git进行代码版本管理的人交流项目，博文内容将采用类似《大话设计模式》的对话体进行，场景真实，有代入感，正文部门前面是对方参照我写的readme搭建基于vue-cli的demo项目，安装node并通过npm安装项目依赖并本地启动项目等等，由于对方为后端Java开发，对<code>新前端</code>技术栈了解比较少，在搭建环境和启动项目过程中滋生一些趣事，比如使用npm启动项目后如何在浏览器访问项目，我为了让其醒目意识到我们的项目首页就是未经改动的Vue-cli首页，于是我将首页改动并推到远程master分支，后面便是我们的搞笑对话。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>暂定对方昵称为<code>lzz</code></p><p>Begin</p><p>我：“你再从master拉一下最新的代码，然后重跑一下”</p><p>lzz：“速度教一波拉代码，我没操作过命令行”</p><p>我：“git pull origin master”</p><p>lzz：“我天天在eclipse操作”</p><p>lzz：“要在项目目录下吗”</p><p>我：“嗯”</p><p>lzz：“这是pull下来吧，接下来的呢，ok了？”</p><p>我：“pull会自动合并进当前分支，fetch只拉，还需要手动merge”</p><blockquote><p>此处涉及git pull和git fetch &amp; git merge的区别</p></blockquote><p>lzz：“怎么上传分支”</p><p>我：“你新建分支了吗，我瞅瞅”</p><p>lzz：“如何瞅，命令行在哪看”</p><p>我：“截图，git checkout -b 新建的分支名”</p><p>我：“git branch 看现在在哪个分支”</p><p>lzz：“你的分支”</p><p>lzz：“我拉你的分支还是从主分支上拉比较好”</p><p>我：“当然主分支，你为啥在我的分支”</p><p>lzz：“我看看怎么拉主分支”</p><p>我：“git checkout master”（我因得知他在我的分支上，所以让他先切到主分支上去）</p><p>lzz：“我又没上传这个分支”</p><p>我：“切换到主分支，你为啥会到我的分支”</p><p>lzz：“不知道”</p><p>我：“骚操作”</p><p>lzz：“昨晚zz教我拉的时候拉的吧”</p><p>我：“不学好”</p><p>lzz：”fxxk，还要提交，我直接把这个分支删了吧“（我内心os：”… 为啥要删我分支 …”）</p><p>我：”你改啥了，你改动后删不掉的，git status“</p><blockquote><p>这里涉及使用<code>git status</code>查看本地仓库文件状态</p></blockquote><p>lzz：”fxxk you“</p><p>我：”fxxk you too“</p><p>我：”git status, 看看改啥了“</p><p>lzz：”嗯“</p><p>我：”git checkout .“</p><p>我：”git checkout master“</p><p>我：”git checkout -b lzz“</p><p>我：”git push origin lzz“</p><p>lzz：”我还原了，这是依赖吧“</p><p>然后我看到他的控制台还有package.json和package-lock.json文件为已修改状态，于是提示他撤销全部</p><p>我：”git checkout .“</p><p>lzz：”npm clean？“</p><p>我：”no“</p><p>lzz：”你这是重放个位置了“</p><p>我：”你执行就是了“</p><p>lzz：”没鸟用，是..&#x2F;吧“</p><p>我：”git status“</p><p>他了一张截图，提示他所在目录不是一个git目录，因为他已经通过..到了项目上一级目录，自然不是git目录</p><p>我：”回到项目目录“</p><p>lzz：”git init?“</p><p>我：”你乱跑啥“</p><p>我：”cd .&#x2F;项目目录名“</p><p>我：”init你妹“</p><p>此时他已回到项目目录再次git status，提示工作树干净(working tree clean)</p><p>我：”git checkout master“</p><p>我：”git checkout -b lzz“</p><p>我：”git push origin lzz“</p><p>我：”赶紧，让我看到你的分支，刷个存在感“</p><p>经过操作，他在远端仓库推送了新的分支lzz到项目</p><p>我：”不容易“</p><p>lzz：”这个主分支和你的分支就index.html不一样吗“(因为他看到的是旧的master，他并没有按照我的要求使用git pull origin master拉取我新提交的master)</p><p>我：”你就没改东西，一毛一样，现在三个分支内容一样“</p><p>lzz：”页面不一样“</p><p>我：”一样的，master我改了，你刚才看到的就是master的“</p><p>lzz：”嗯，提交就是，git push origin lzz？“</p><blockquote><p>严谨来说这里并不一定，因为origin只是git约定俗成的远程主机名，其实这个参数可以自定义，比如你需要推到多个远程仓库时，需要在origin之外自定义远程主机名</p></blockquote><p>我：”不是“</p><p>lzz：”还是直接git push“</p><p>我：”这是把本地分支推到远程“</p><p>lzz：”嗯“</p><p>我：”提交是git commit“</p><p>lzz：”1，想起来了“</p><p>我：”直接git push需要把本地同名分支和远程同名分支绑定“</p><blockquote><p>这里有待考究，我说的这是否是必要条件，但git的确是提供了-u参数用于绑定本地分支与一个默认远程分支，这样仅使用git pull和git push便可将该远程分支与本地分支进行互动</p></blockquote><p>lzz：”git checkout . 放弃文件的修改吧？“</p><p>我：”是，其实是把远端的覆盖本地的“</p><blockquote><p>关于git checkout的使用，理解为放弃修改，从效果上看的确是这样的，也是我一开始学习和使用git的理解，但从本质上git checkout实际还是在执行其本质行为，就是检出远程文件，只不过这样做的确就会将本地的覆盖，达到放弃本地文件的修改的效果</p></blockquote><p>lzz：”我每次重新切换分支，要npm install吗？“</p><p>我：”新分支需要，已经install过的分支不需要“(此处涉及npm项目的知识，与本文关系不大)</p><p>lzz：”我push的时候不会将这些包带着吧“</p><p>我：”不会，.gitignore忽略node_modules目录“(这当然是我配置的，不过这个问题问的很好，说明其意识到的git对于项目文件的管理细节)</p><p>lzz：”貌似没有忽略啊“(他看到package.json和package-lock.json文件被提示尚未加进暂存区)</p><p>我：”这两个文件可以提交，也可以手动忽略，我加一下“(所谓手动忽略当然就是使用git checkout检出远程同名文件覆盖本地的修改，我加一下是指其实package-lock.json的确不需要提交，而package.json随着项目的迭代可能有包的更新，所以项目团队间需要互通，不过如果使用相同的node环境，这样的更新每个人在本地都会有及时的感知，所以这两个文件是否要纳入版本管理不重要)</p><p>lzz：”上面的.json文件我并未改动，应该就像maven的pom文件一样，为什么会变动呢“(此处涉及npm对于依赖包的管理)</p><p>我：”因为你又npm install了，会更新版本“</p><p>lzz：”拉下新的版本，拉下我的“</p><p>我：”干啥“(其实我已经在远端仓库客户端，我们会使用的gitee，看见他的修改，一个小小的恶作剧)</p><p>lzz：”你瞅瞅我的master piece“</p><p>我：”你发pull request“</p><blockquote><p>此处涉及gitee、github这类用于公共开源，不同于gitlab的merge request，而是通过发起pull request将分支合入master</p></blockquote><p>他给我发了一张他提交记录的截图，标识他已经将自己本地的分支提交到远端仓库</p><p>我：”你不提交pull request，你就只是在自己的分支玩，你看看你能merge进master吗“</p><p>lzz：”你拉我的分支不行吗，你把我的分支拉下来啊“</p><p>我：”我干嘛要拉你的分支“</p><p>我给他发一张我对于其提交的评论截图(基于gitee)</p><p>lzz：”你这个页面在哪，github还是码云上“</p><p>我：”gitee“</p><p>lzz：”什么鬼？？？“(因为码云这个对于代码评论的功能的确做的看上去和github很像)</p><p>我：”码云，就是gitee“</p><p>我：”洗洗睡吧“</p><p>lzz：”这样？“</p><p>他发了一张在操作pull request操作的截图，但填写是错误的，源分支为远程lzz，目标分支为远程lzz，其实pull request是要发起申请将你提交到远程仓库的分支merge进远程的master分支，经过操作，他最终成功发起了正确的pull request</p><p>lzz：”知道PR啥作用了“</p><p>我：”目标分支填master啊“</p><p>lzz：”嗯，知道了，睡觉“</p><p>END</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>整个过程其实就是一个经典的新手入手git并结合第三方远程仓库管理个人项目的各种操作，对话看上去愚蠢，但其实基本覆盖了团队基于git进行协作的基本操作和重要核心的git flow</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>在此过程中虽然我使用git有一些经验，但还是觉得仍有部分环节的细节有待深入研究，不过经验就是：使用git一定要随时保持清醒，知道自己所处位置（git仓库、暂存区、本地仓库、远程仓库），对分支的分分合合要有着清醒的头脑，否则很有可能在使用git这个管理代码和版本的强大工具之下也会搞的一团糟，它就像一把双刃剑，用好的话可以事倍功半，用不好也可能对代码项目带来严重的灾难</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>js异步编程</title>
    <link href="/wilson-blog-hexo/2018/03/06/js%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
    <url>/wilson-blog-hexo/2018/03/06/js%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>js异步编程的<strong>4</strong>种方式</p><span id="more"></span><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>js语言执行环境——单线程（Single Thread）</p><h2 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h2><p>一次只能执行一个任务，超过一个的就只能<strong>排队</strong></p><h3 id="单线程优势"><a href="#单线程优势" class="headerlink" title="单线程优势"></a>单线程优势</h3><ul><li><p>实现简单</p></li><li><p>执行环境单纯</p></li></ul><h3 id="单线程劣势"><a href="#单线程劣势" class="headerlink" title="单线程劣势"></a>单线程劣势</h3><p>存在<strong>耗时很长</strong>的任务会拖慢<strong>整个程序</strong>的运行</p><h3 id="单线程带来的问题"><a href="#单线程带来的问题" class="headerlink" title="单线程带来的问题"></a>单线程带来的问题</h3><p>浏览器无响应（假死）</p><h4 id="浏览器假死原因分析"><a href="#浏览器假死原因分析" class="headerlink" title="浏览器假死原因分析"></a>浏览器假死原因分析</h4><p>某段js代码（某个任务）长时间运行（比如死循环）</p><h4 id="js对于单线程劣势的解决方案"><a href="#js对于单线程劣势的解决方案" class="headerlink" title="js对于单线程劣势的解决方案"></a>js对于单线程劣势的解决方案</h4><p>执行模式分为：同步（Synchronous）和异步（Asynchronus）</p><h5 id="同步模式"><a href="#同步模式" class="headerlink" title="同步模式"></a>同步模式</h5><ul><li><p>后一个任务等待前一个任务结束</p></li><li><p>程序执行顺序同任务排列顺序</p></li></ul><h5 id="异步模式"><a href="#异步模式" class="headerlink" title="异步模式"></a>异步模式</h5><ul><li><p>每个任务有1个或多个回调函数（callback）</p></li><li><p>前一个任务结束，不是继续执行后一个任务，而是执行回调</p></li><li><p>后一个任务不等前一个任务结束就执行</p></li><li><p>程序的执行顺序和任务排列顺序不一致</p></li></ul><h4 id="异步模式使用"><a href="#异步模式使用" class="headerlink" title="异步模式使用"></a>异步模式使用</h4><p>浏览器端<strong>耗时长</strong>的任务都应该<strong>异步执行</strong></p><p>避免浏览器失去效应</p><h4 id="异步模式实践"><a href="#异步模式实践" class="headerlink" title="异步模式实践"></a>异步模式实践</h4><p>Ajax</p><h2 id="异步编程的4种方式（实践）"><a href="#异步编程的4种方式（实践）" class="headerlink" title="异步编程的4种方式（实践）"></a>异步编程的4种方式（实践）</h2><h3 id="1-回调函数（最基本）"><a href="#1-回调函数（最基本）" class="headerlink" title="1.回调函数（最基本）"></a>1.回调函数（最基本）</h3><h4 id="实际场景"><a href="#实际场景" class="headerlink" title="实际场景"></a>实际场景</h4><p>两个函数f1()、f2()，f1()耗时长</p><h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><p>把f2()函数写成f1()函数的回调函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params">callback</span>) &#123;<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// code of f1</span><br><span class="hljs-title function_">callback</span>();<br>&#125;, <span class="hljs-number">1000</span>);<br>&#125;<br><br><span class="hljs-title function_">f1</span>(f2);<br></code></pre></td></tr></table></figure><ul><li><p>f1不会阻塞程序执行</p></li><li><p>先执行程序主逻辑，耗时操作推迟执行</p></li></ul><h6 id="回调函数存在的问题"><a href="#回调函数存在的问题" class="headerlink" title="回调函数存在的问题"></a>回调函数存在的问题</h6><ul><li><p>不利于代码阅读和维护</p></li><li><p>各部分间耦合高（Coupling）</p></li><li><p>流程变乱</p></li><li><p>每个任务仅支持一个回调函数</p></li></ul><h3 id="2-事件监听（信号）"><a href="#2-事件监听（信号）" class="headerlink" title="2.事件监听（信号）"></a>2.事件监听（信号）</h3><p>使用<strong>事件驱动</strong>模式——任务的执行不取决于代码顺序，而是事件的发生</p><p>为f1绑定一个事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">f1.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;done&#x27;</span>, f2);<br></code></pre></td></tr></table></figure><p>解释：当f1发生done事件时执行f2</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>f1.<span class="hljs-title function_">trigger</span>(<span class="hljs-string">&#x27;done&#x27;</span>);<br>&#125;, <span class="hljs-number">1000</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>f1.trigger(‘done’)表示当执行完其上的内容，立即触发done事件（即执行f2）</p><h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><ul><li><p>容易理解</p></li><li><p>每个事件可指定多个回调函数</p></li><li><p>可以去耦合（decoupling）</p></li><li><p>有利于实现模块化</p></li></ul><h4 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h4><ul><li><p>整个程序变成<strong>事件驱动</strong>的</p></li><li><p>运行流程不清晰</p></li></ul><h3 id="3-发布-订阅模式-或-观察者模式（publish-subscribe-pattern-or-observer-pattern）"><a href="#3-发布-订阅模式-或-观察者模式（publish-subscribe-pattern-or-observer-pattern）" class="headerlink" title="3.发布&#x2F;订阅模式 或 观察者模式（publish&#x2F;subscribe pattern or observer pattern）"></a>3.发布&#x2F;订阅模式 或 观察者模式（publish&#x2F;subscribe pattern or observer pattern）</h3><p>制造一个信号中心，某任务完成后向信号中心<strong>发布（publish）</strong>一个信号，其他任务可向信号中心<strong>订阅（subscribe）</strong>这个信号，从而得知自己什么时候执行</p><h4 id="该模式的多种实现"><a href="#该模式的多种实现" class="headerlink" title="该模式的多种实现"></a>该模式的多种实现</h4><ul><li>Ben Alman’s gist <a href="https://gist.github.com/661855">https://gist.github.com/661855</a> (recommended)</li><li>Rick Waldron’s jQuery-core style take on the above <a href="https://gist.github.com/705311">https://gist.github.com/705311</a></li><li>Peter Higgins’ plugin (<a href="http://github.com/phiggins42/bloody-jquery-plugins/blob/master/pubsub.js">http://github.com/phiggins42/bloody-jquery-plugins/blob/master/pubsub.js</a>).</li><li>Ben Truyman’s gist <a href="https://gist.github.com/826794">https://gist.github.com/826794</a></li></ul><p>参考：<a href="https://msdn.microsoft.com/en-us/magazine/hh201955.aspx">https://msdn.microsoft.com/en-us/magazine/hh201955.aspx</a></p><p>这里举例第一种，是jQuery的一个插件</p><ol><li>f2向jQuery（信号中心）订阅done信号</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">jQuery.<span class="hljs-title function_">subscribe</span>(<span class="hljs-string">&quot;done&quot;</span>, f2);<br></code></pre></td></tr></table></figure><ol start="2"><li>f1向jQuery（信号中心）发布done信号</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>jQuery.<span class="hljs-title function_">publish</span>(<span class="hljs-string">&quot;done&quot;</span>);<br>&#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>如果f2只要执行一次，可以在执行后取消订阅</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">jQuery.<span class="hljs-title function_">unsubscribe</span>(<span class="hljs-string">&quot;done&quot;</span>, f2);<br></code></pre></td></tr></table></figure><h4 id="发布订阅模式优劣分析"><a href="#发布订阅模式优劣分析" class="headerlink" title="发布订阅模式优劣分析"></a>发布订阅模式优劣分析</h4><p>与事件监听类似，但可通过信号中心清晰了解到存在多少信号（发布者发布了多少信号）、每个信号有多少订阅者，从而监控程序的执行</p><h3 id="4-Promises对象"><a href="#4-Promises对象" class="headerlink" title="4.Promises对象"></a>4.Promises对象</h3><p>Promises对象是CommonJS工作组提出的一种规范，目的旨在为<strong>异步编程</strong>提供统一的接口</p><h4 id="Promises实现异步编程的思想"><a href="#Promises实现异步编程的思想" class="headerlink" title="Promises实现异步编程的思想"></a>Promises实现异步编程的思想</h4><ul><li><p>每一个异步任务<strong>返回</strong>一个Promise对象</p></li><li><p>该对象有一个<strong>then</strong>方法，允许指定回调函数</p></li></ul><h5 id="实例操作"><a href="#实例操作" class="headerlink" title="实例操作"></a>实例操作</h5><p>为f1指定回调函数为f2</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">f1</span>().<span class="hljs-title function_">then</span>(f2);<br></code></pre></td></tr></table></figure><p>jQuery的实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">var</span> dfd = $.<span class="hljs-title class_">Deferred</span>();<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>dfd.<span class="hljs-title function_">resolve</span>();<br>&#125;, <span class="hljs-number">1000</span>);<br><span class="hljs-keyword">return</span> dfd.<span class="hljs-property">promise</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="优点分析"><a href="#优点分析" class="headerlink" title="优点分析"></a>优点分析</h5><ul><li><p>回调函数变成了<strong>链式</strong>写法，程序流程清晰</p></li><li><p>有配套的<a href="http://api.jquery.com/category/deferred-object/">整套方法</a>，可实现强大的功能</p></li></ul><h5 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h5><h6 id="指定多个回调函数"><a href="#指定多个回调函数" class="headerlink" title="指定多个回调函数"></a>指定多个回调函数</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">f1</span>().<span class="hljs-title function_">then</span>(f2).<span class="hljs-title function_">then</span>(f3);<br></code></pre></td></tr></table></figure><h6 id="指定发生错误时的回调函数"><a href="#指定发生错误时的回调函数" class="headerlink" title="指定发生错误时的回调函数"></a>指定发生错误时的回调函数</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">f1</span>().<span class="hljs-title function_">then</span>(f2).<span class="hljs-title function_">fail</span>(f3);<br></code></pre></td></tr></table></figure><h5 id="Promises使用的优缺点"><a href="#Promises使用的优缺点" class="headerlink" title="Promises使用的优缺点"></a>Promises使用的优缺点</h5><h6 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h6><ul><li><p>一个任务已完成，再添加回调函数，该回调函数会立刻执行</p></li><li><p>不用担心是否错过某个<strong>事件</strong>或<strong>信号</strong></p></li></ul><h6 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h6><ul><li>难以理解和编写</li></ul><p>参考链接：</p><ul><li><a href="http://www.ruanyifeng.com/blog/2012/12/asynchronous%EF%BC%BFjavascript.html">http://www.ruanyifeng.com/blog/2012/12/asynchronous%EF%BC%BFjavascript.html</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次关于运行redux示例启动错误的分析</title>
    <link href="/wilson-blog-hexo/2018/02/25/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%85%B3%E4%BA%8E%E8%BF%90%E8%A1%8Credux%E7%A4%BA%E4%BE%8B%E5%90%AF%E5%8A%A8%E9%94%99%E8%AF%AF%E7%9A%84%E5%88%86%E6%9E%90/"/>
    <url>/wilson-blog-hexo/2018/02/25/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%85%B3%E4%BA%8E%E8%BF%90%E8%A1%8Credux%E7%A4%BA%E4%BE%8B%E5%90%AF%E5%8A%A8%E9%94%99%E8%AF%AF%E7%9A%84%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>记录在运行redux官方文档中给出的基础实例运行时报错的解决思路</p><span id="more"></span><h2 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h2><p><strong>进程占用</strong></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在阅读redux文档<a href="http://cn.redux.js.org/%E6%97%B6%EF%BC%8C%E9%81%87%E5%88%B0%E6%8E%A8%E8%8D%90%E7%A4%BA%E4%BE%8B">http://cn.redux.js.org/时，遇到推荐示例</a><a href="http://cn.redux.js.org/">simple-redux-example</a></p><p>于是便按照readme说明实操一把</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span><br></code></pre></td></tr></table></figure><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> start<br></code></pre></td></tr></table></figure><p>一切顺理成章，然而boom!</p><p>一脸懵逼</p><p>什么原因呢？先是仔细看了报错信息，里面讲的还算清楚，告诉我不是npm的问题，于是按照推荐，打开具体的日志文件</p><p>也没看出什么明显的问题</p><p>于是在error附近的日志信息里找几个关键字拉近google搜索一下</p><p>在stackoverflow的<a href="https://stackoverflow.com/questions/30744964/what-does-the-elifecycle-node-js-error-mean">一篇帖子</a>中的找到灵感</p><p>没错，进程占用！经过上面几个人说的情况都不匹配后，这个原因我是感觉特别可能的</p><p>于是赶紧检查8000端口是不是已经被占用</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">netstat -ano <span class="hljs-string">| findstr 8000</span><br></code></pre></td></tr></table></figure><p>(进程ID之前是3260，这是后来写本文时补的)</p><p>果然被占用了，看一下哪个进程的PID是3260</p><p>之前这里有一个进程PID是3260，发现是一个应用程序，没什么用，kill掉</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">taskkill</span> /PID <span class="hljs-number">3260</span> <br></code></pre></td></tr></table></figure><p>再次启动</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> start<br></code></pre></td></tr></table></figure><p>Nice!搞定</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>解决问题的能力很重要，程序的世界不可能一帆风顺，耐心看日志，多借助<code>有效</code>途径（google not baidu, stackoverflow not zhidao），带上自己分析问题的思路和经验，问题总是能解决的。</p><p>写此篇博客的目的在于加深此类问题的印象，对于一些常用操作做一个记录，避免下次遇到类似问题时把时间花在查阅搜索和问题定位上</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端基础知识整理——jQuery选择器</title>
    <link href="/wilson-blog-hexo/2018/02/23/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/"/>
    <url>/wilson-blog-hexo/2018/02/23/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>关于jQuery选择器的整理</p><span id="more"></span><h2 id="jQuery选择器"><a href="#jQuery选择器" class="headerlink" title="jQuery选择器"></a>jQuery选择器</h2><h3 id="第一种分类规则"><a href="#第一种分类规则" class="headerlink" title="第一种分类规则"></a>第一种分类规则</h3><h4 id="第一类——基本"><a href="#第一类——基本" class="headerlink" title="第一类——基本"></a>第一类——基本</h4><ol><li><p>通配：$(“*”)——所有元素</p></li><li><p>id唯一选择：$(“#name”)——匹配id为name的元素</p></li><li><p>class匹配：$(“.name”)——匹配所有class&#x3D;”name”的元素</p></li><li><p>标签元素：$(“p”)——所有<p>元素</p></li><li><p>且关系匹配：$(“.a.b”)——所有class&#x3D;”a”且class&#x3D;”b”的元素</p></li></ol><h4 id="第二类——首尾、奇偶"><a href="#第二类——首尾、奇偶" class="headerlink" title="第二类——首尾、奇偶"></a>第二类——首尾、奇偶</h4><ol><li><p>某种标签的第一个：$(“p:first”)——第一个<p>元素</p></li><li><p>某种标签的最后一个：$(“p:last”)——最后一个<p>元素</p></li><li><p>某种标签的偶数元素：$(“tr:even”)——所有偶数<tr>元素</p></li><li><p>某种标签的奇数元素：$(“tr:odd”)——所有奇数<tr>元素</p></li></ol><h4 id="第三类"><a href="#第三类" class="headerlink" title="第三类"></a>第三类</h4><ol><li><p>第n个元素：$(“ul li:eq(3)”)——列表中的第四个元素（索引从0起）</p></li><li><p>大于某个索引值的元素：$(“ul li:gt(3)”)——索引大于3的元素</p></li><li><p>小于某个索引值的元素：$(“ul li:lt(3)”)——索引小于3的元素</p></li><li><p>非某个条件的元素：$(“input:not(:empty)”)——所有不为空的input元素</p></li></ol><h4 id="第四类——指定标签"><a href="#第四类——指定标签" class="headerlink" title="第四类——指定标签"></a>第四类——指定标签</h4><ol><li><p>标题元素：$(“:header”)——所有标题元素（h1-h6）</p></li><li><p>动画元素：$(“:animated”)——所有动画元素</p></li></ol><h4 id="第五类"><a href="#第五类" class="headerlink" title="第五类"></a>第五类</h4><ol><li><p>包含特定字符串的元素：$(“:contains(‘someString’)”)——包含字符串someString的元素</p></li><li><p>无子节点的所有元素：$(“:empty”)——没有子元素节点的所有元素</p></li><li><p>隐藏元素：$(“p:hidden”)——所有隐藏的<p>元素</p></li><li><p>可见元素：$(“table:visible”)——所有可见的表格</p></li></ol><h4 id="第六类——或关系多匹配"><a href="#第六类——或关系多匹配" class="headerlink" title="第六类——或关系多匹配"></a>第六类——或关系多匹配</h4><p>逗号分隔的多匹配元素：$(“th, td, .intro”)——所有th、td和class&#x3D;”intro”的元素</p><h4 id="第七类——元素属性"><a href="#第七类——元素属性" class="headerlink" title="第七类——元素属性"></a>第七类——元素属性</h4><ol><li><p>含有某个属性的元素：$(“[href]”)——所有包含href属性的元素</p></li><li><p>属性为特定值的元素：$(“[href&#x3D;’#’]”)——所有href属性为#的元素</p></li><li><p>属性不为特定值的元素：$(“[href!&#x3D;’#’]”)——所有href属性不为#的元素</p></li><li><p>符合属性值通配的元素：$(“[href$&#x3D;’.jpg’]”)——所有href属性以.jpg结尾的元素</p></li></ol><h4 id="第八类——不同type的input元素"><a href="#第八类——不同type的input元素" class="headerlink" title="第八类——不同type的input元素"></a>第八类——不同type的input元素</h4><p>text、password、radio、checkbox、submit、reset、button、image、file</p><p><img src="http://trigolds.com/jq0.jpg"></p><h4 id="第九类——input不同元素状态"><a href="#第九类——input不同元素状态" class="headerlink" title="第九类——input不同元素状态"></a>第九类——input不同元素状态</h4><ol><li><p>可用元素：$(“:enabled”)——所有可用的input元素</p></li><li><p>不可用元素：$(“:disabled”)——所有不可用的input元素</p></li><li><p>选取的元素：$(“selected”)</p></li><li><p>多选被选中的：$(“checked”)</p></li></ol><h3 id="第二种分类规则"><a href="#第二种分类规则" class="headerlink" title="第二种分类规则"></a>第二种分类规则</h3><ol><li><p>基本选择器</p><ol><li><p>id（指定元素）</p></li><li><p>class（css类）</p></li><li><p>element（遍历html元素）</p></li><li><p>*（所有元素）</p></li><li><p>,（并列）</p></li></ol></li><li><p>层次选择器</p><ol><li><p>parent &gt; child（直系子元素）</p></li><li><p>prev + next（下一个兄弟，等同于next()方法）</p></li></ol> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&#x27;.item + div&#x27;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;color&#x27;</span>, <span class="hljs-string">&#x27;#FF0000&#x27;</span>);<br></code></pre></td></tr></table></figure><p> 等价于</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&#x27;.item&#x27;</span>).<span class="hljs-title function_">next</span>(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;color&#x27;</span>, <span class="hljs-string">&#x27;#FF0000&#x27;</span>);<br></code></pre></td></tr></table></figure><ol start="3"><li>prev ~ siblings（所有兄弟，等同于nextAll()方法）</li></ol> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&#x27;.inside ~ div&#x27;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;color&#x27;</span>, <span class="hljs-string">&#x27;#FF0000&#x27;</span>);<br></code></pre></td></tr></table></figure><p> 等价于</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&#x27;.inside&#x27;</span>).<span class="hljs-title function_">nextAll</span>(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;color&#x27;</span>, <span class="hljs-string">&#x27;#FF0000&#x27;</span>);<br></code></pre></td></tr></table></figure></li><li><p>过滤选择器</p><ol><li><p>基本过滤</p><ol><li><p>首尾元素</p><ul><li><p>:first</p></li><li><p>:last</p></li></ul></li><li><p>取非</p></li></ol> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&#x27;div:not(.wrap)&#x27;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;color&#x27;</span>, <span class="hljs-string">&#x27;#FF0000&#x27;</span>);<br></code></pre></td></tr></table></figure> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>a<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrap&quot;</span>&gt;</span>b<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p> a着色，b不着色</p><p> 特别地，当非wrap元素包含子元素时，即是其子元素class为wrap，仍会被选择到（因为父影响子）</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>a<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrap&quot;</span>&gt;</span>b<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p> a、b都着色</p><ol start="3"><li><p>奇偶（索引从0开始）</p><ul><li><p>:even</p></li><li><p>:odd</p></li></ul></li><li><p>取指定元素（:eq(index)）</p></li><li><p>大于或小于某个索引值</p></li></ol><ul><li><p>:gt(index)</p></li><li><p>:lt(index)</p></li></ul><ol start="6"><li>标题(:header)</li></ol></li><li><p>内容过滤</p><ol><li><p>包含（:contains(text)）</p></li><li><p>不包含子元素或文本内容为空（:empty）</p></li><li><p>取选择器匹配的元素（:has(selector)）</p></li></ol> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&#x27;div:has(span)&#x27;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;border&#x27;</span>, <span class="hljs-string">&#x27;1px solid #000&#x27;</span>);<br></code></pre></td></tr></table></figure> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span><br>A<br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>B<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p> 因为此处的div子元素中的确含有span，所以此处的div被选中，其子元素也会同样生效，所以A和B都会被加边框</p><ol start="4"><li>包含子元素或文本的元素（:parent）</li></ol><p> 某个元素因包含子元素或文本，而成为父元素，即被选中</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&#x27;ol li:parent&#x27;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;border&#x27;</span>, <span class="hljs-string">&#x27;1px solid #000&#x27;</span>);<br></code></pre></td></tr></table></figure> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>D<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure><p> A和D因为包含文本而晋升为父元素，所以被加上边框</p></li><li><p>可见性过滤</p><ol><li><p>隐藏元素（不占空间）——:hidden</p><p> 1.3.2版本后:hidden仅匹配<strong>隐藏</strong>且<strong>不占空间</strong>的元素（display:none、<input type="hidden">），对于visibility:hidden、opacity:0这样隐藏但占据空间的元素无效</p></li><li><p>可见元素——:visible（凡不可见的元素均不选中）</p></li></ol></li><li><p>属性过滤</p><ol><li><p>[attribute]（选择拥有attrbute属性的元素）</p></li><li><p>[attribute &#x3D; value]、[attribute !&#x3D; value]（属性等于或不等于某值的元素）</p></li><li><p>[attribute ^&#x3D; value]、[attribute $&#x3D; value]、[attribute *&#x3D; value]（attribute以value开头、以value结束、包含value的元素）</p></li><li><p>[selector1][selector2]（复合型属性过滤，同时满足多个条件）</p></li></ol> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&#x27;a[title^=jQuery][class=item]&#x27;</span>).<span class="hljs-title function_">hide</span>();<br></code></pre></td></tr></table></figure><p> title属性以jQuery开头并且class&#x3D;’item’的a元素选中并隐藏</p><ol start="5"><li><p>子元素过滤</p><ol><li>:first-child、:last-child</li></ol><p> :first和:last返回单个元素</p><p> :first-child和:last-child返回集合元素</p><ol start="2"><li><p>:only-child（有且只有一个子元素的元素）</p></li><li><p>:nth-child（第n个元素，n从1开始）</p></li></ol></li><li><p>表单对象属性过滤</p><ol><li><p>可用或不可用元素（:enabled、:disabled）</p></li><li><p>选中的单选框或多选框（:checked）</p></li><li><p>下拉框中选中的元素（:selected）</p></li></ol></li></ol></li></ol></li><li><p>表单选择器</p></li></ol><p>总结：</p><ol><li><p>基本选择器</p></li><li><p>层次选择器</p></li><li><p>过滤选择器</p></li><li><p>表单选择器</p></li></ol><p>参考链接：</p><ul><li><p><a href="http://www.w3school.com.cn/jquery/jquery_ref_selectors.asp">http://www.w3school.com.cn/jquery/jquery_ref_selectors.asp</a></p></li><li><p><a href="http://www.cnblogs.com/keepfool/archive/2012/06/02/2532203.html">http://www.cnblogs.com/keepfool/archive/2012/06/02/2532203.html</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jQuery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Angular学习笔记</title>
    <link href="/wilson-blog-hexo/2018/02/22/Angular4%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/wilson-blog-hexo/2018/02/22/Angular4%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>关于Angular学习整理</p><span id="more"></span><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Angular是谷歌开发和维护的一个开发<strong>跨平台</strong>应用程序的框架，适用于手机和PC</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li><p>跨平台：Web、移动、PC</p></li><li><p>渲染快：Web Worker+SSR</p></li><li><p>可伸缩：基于RxJS、Immutable.js及其他推送模型，可适应海量数据需求</p></li></ul><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li><p>DHTML</p></li><li><p>表单系统（模型驱动）</p></li><li><p>试图引擎</p></li><li><p>事件处理</p></li><li><p>快速渲染</p></li><li><p>灵活路由</p></li><li><p>HTTP服务</p></li><li><p>视图封装</p></li><li><p>AOT、Tree Shaking</p></li></ul><h3 id="Angular与AngularJS区别"><a href="#Angular与AngularJS区别" class="headerlink" title="Angular与AngularJS区别"></a>Angular与AngularJS区别</h3><ul><li><p>不再有Controller和Scope</p></li><li><p>更好的<strong>组件化</strong>及<strong>代码复用</strong></p></li><li><p>更好的移动端支持</p></li><li><p>引入RxJS和Observable</p></li><li><p>引入Zone.js，提供更智能的<strong>变化检测</strong></p></li></ul><h3 id="开发配置"><a href="#开发配置" class="headerlink" title="开发配置"></a>开发配置</h3><ul><li>基于QuickStart</li></ul><p>拷贝quickstart项目</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/angular/</span>quickstart<br></code></pre></td></tr></table></figure><p>安装所需依赖</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i<br></code></pre></td></tr></table></figure><p>启动</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> start<br></code></pre></td></tr></table></figure><ul><li>基于Angular CLI</li></ul><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> install -g @angular/cli<br></code></pre></td></tr></table></figure><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> install --save-dev @angular/cli@latest<br></code></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">ng <span class="hljs-comment">--version</span><br></code></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">ng <span class="hljs-keyword">new</span> projectname<br></code></pre></td></tr></table></figure><p>切换到刚创建的工程目录</p><p>浏览器访问localhost:4200</p><p>参考链接：</p><ul><li><a href="https://segmentfault.com/a/1190000009733649">https://segmentfault.com/a/1190000009733649</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>angular</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue.js技术回顾之实例</title>
    <link href="/wilson-blog-hexo/2018/02/22/Vue-js%E6%8A%80%E6%9C%AF%E5%9B%9E%E9%A1%BE-%E5%AE%9E%E4%BE%8B/"/>
    <url>/wilson-blog-hexo/2018/02/22/Vue-js%E6%8A%80%E6%9C%AF%E5%9B%9E%E9%A1%BE-%E5%AE%9E%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<p>Vue.js教程之Vue实例</p><span id="more"></span><h3 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h3><p>每个Vue应用都是通过用<code>Vue</code>函数创建一个新的<strong>Vue实例</strong>开始</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br><span class="hljs-comment">// options</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>虽然没有遵守<a href="https://zh.wikipedia.org/wiki/MVVM">MVVM</a>模型，但Vue的设计也受MVVM启发，故示例中常使用vm(viewmodel缩写)表示Vue实例</p><p>一个Vue应用的组成：</p><ul><li><p>一个通过new Vue创建的根Vue实例</p></li><li><p>可选的嵌套的、可复用的组件树</p></li></ul><p>所有的Vue组件都是Vue实例，并且接受相同的选项对象（一些根实例特有的选项除外）</p><h4 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h4><h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><p>MVVM（model-view-viewmodel）是一种<strong>软件架构</strong>，有助于将<strong>图形用户界面开发</strong>与<strong>业务逻辑</strong>或<strong>后端逻辑</strong>开发分离开来，通过置标语言或GUI代码实现</p><p>MVVM的viewmodel是一个值转换器，意味着负责从模型中暴露（转换）数据对象，以便轻松管理和呈现对象。在这方面viewmodel比view做的更多，且处理<strong>大部分视图</strong>的<strong>显示逻辑</strong>。</p><p>viewmodel可实现中介者模式，组织对view所支持的用例集的后端逻辑的访问</p><h4 id="标记语言"><a href="#标记语言" class="headerlink" title="标记语言"></a>标记语言</h4><h5 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h5><p>置标语言也称标记语言、标志语言、标识语言、markup language，是一种将<strong>文本</strong>以及<strong>文本相关</strong>的<strong>其他信息</strong>结合起来，展现出关于<strong>文档结构</strong>和<strong>数据处理细节</strong>的<strong>计算机文字编码</strong>。</p><p>与文本相关的其他信息（文本结构和表示信息等）与原文本结合在一起，但使用标记进行标识</p><h5 id="现状及历史"><a href="#现状及历史" class="headerlink" title="现状及历史"></a>现状及历史</h5><p>如今广泛使用的标记语言是HTML和XML，广泛用于网页和网络应用程序，最早用于出版业，是作者、编辑及出版商之间用于描述出版作品的排版格式所使用的</p><h5 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h5><p>标记语言通常分为三种：表示性、过程性、描述性</p><ol><li>表示性：编码过程中标记文档的<strong>结构</strong>信息</li></ol><p>例如文本文件中，文件标题可能需要特定格式（居中、放大等），则需要标记文件的标题。</p><p>字处理及桌面出版产品有时能自动推断出这类<strong>结构信息</strong>，但绝大多数，像Wiki这样的纯文本编辑器还不能解决这个问题</p><ol start="2"><li>过程性：一般专门于文字表达，但通常对于文本编辑者可见，且能够被软件依其出现顺序依次解读</li></ol><p>为格式化一个标题，在标题文本之前，会紧接着插入一系列格式标识符，以指示计算机转到居中的<strong>显示模式</strong>，同时加大及加粗字体。在标题文本后，会紧接缀上<strong>格式中止标识</strong></p><p>对于更高级的<strong>系统宏命令</strong>或者<strong>堆栈模式</strong>会让这一过程的实现方式更加丰富</p><p>大多数情况下，过程性标志能力包含有一个图灵完备编程语言</p><blockquote><p>图灵完备：当一组数据操作的规则（一组指令集、编程语言、元胞自动机）满足任意数据按照一定的顺序可以计算出果，称为图灵完备</p></blockquote><p>过程性标志语言范例：nroff、troff、TeX、Lout、PostScript</p><p>过程性标志语言广泛用于<strong>专业出版领域</strong>，专业的出版商会根据要求使用不同的标志语言达到出版要求</p><ol start="3"><li>描述性</li></ol><p>又称通用标识，描述文件的<strong>内容或结构</strong>，而非文件的显示<strong>外观或样式</strong></p><p>指定SGML的基本思想就是把文档的内容与样式分开，XML、SGML都是典型的通用标识语言</p><h6 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h6><ul><li><p>GenCode</p></li><li><p>TeX：功能强大的排版软件</p></li><li><p>SGML：被用作编写《牛津英语词典》电子版本，由于复杂而难以普及</p></li><li><p>HTML</p></li><li><p>XML</p></li><li><p>XHTML：（eXtensible HyperText Markup Language），表现方式与HTML类似，语法上更严格</p></li><li><p>基于XML的应用：RDF、XForms、DocBook、SOAP、Web Ontology Language(WOL)</p></li></ul><h3 id="数据与方法"><a href="#数据与方法" class="headerlink" title="数据与方法"></a>数据与方法</h3><p>当一个Vue实例被创建时，即向Vue的<strong>响应式系统</strong>中假如其data对象中能找到的所有的属性</p><p>当这些属性改变时，试图将随之响应，即匹配更新的新值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 我们的数据对象</span><br><span class="hljs-keyword">var</span> data = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;<br><br><span class="hljs-comment">// 该对象被加入到一个 Vue 实例中</span><br><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">data</span>: data<br>&#125;)<br><br><span class="hljs-comment">// 它们引用相同的对象！</span><br>vm.<span class="hljs-property">a</span> === data.<span class="hljs-property">a</span> <span class="hljs-comment">// =&gt; true</span><br><br><span class="hljs-comment">// 设置属性也会影响到原始数据</span><br>vm.<span class="hljs-property">a</span> = <span class="hljs-number">2</span><br>data.<span class="hljs-property">a</span> <span class="hljs-comment">// =&gt; 2</span><br><br><span class="hljs-comment">// ……反之亦然</span><br>data.<span class="hljs-property">a</span> = <span class="hljs-number">3</span><br>vm.<span class="hljs-property">a</span> <span class="hljs-comment">// =&gt; 3</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：只有当<strong>实例被创建时</strong>data中存在的属性才是响应式的，如果再添加一个属性，那么对其改变不会触发试图更新，若想解决此问题，可在起初设置一些属性，初始化为空</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">data</span>: &#123;<br>  <span class="hljs-attr">newTodoText</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>  <span class="hljs-attr">visitCount</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-attr">hideCompletedTodos</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">todos</span>: [],<br>  <span class="hljs-attr">error</span>: <span class="hljs-literal">null</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>特殊: 使用Object.freeze()会阻止修改现有属性，即响应系统无法再追踪变化</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-attr">foo</span>: <span class="hljs-string">&#x27;bar&#x27;</span><br>&#125;<br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">freeze</span>(obj)<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>  data () &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      obj<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; obj.foo &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 这里的 `obj.foo` 不会更新！ --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;obj.foo = &#x27;baz&#x27;&quot;</span>&gt;</span>Change it<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>除<strong>数据属性</strong>外，Vue实例还暴露了一些有用的<strong>实例属性</strong>和<strong>方法</strong>，都有前缀<code>$</code>，以便用户定义的属性区分开</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> data = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;<br><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#example&#x27;</span>,<br>  <span class="hljs-attr">data</span>: data<br>&#125;)<br><br>vm.<span class="hljs-property">$data</span> === data <span class="hljs-comment">// =&gt; true</span><br>vm.<span class="hljs-property">$el</span> === <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;example&#x27;</span>) <span class="hljs-comment">// =&gt; true</span><br><br><span class="hljs-comment">// $watch 是一个实例方法</span><br>vm.$watch(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">newValue, oldValue</span>) &#123;<br>  <span class="hljs-comment">// 这个回调将在 `vm.a` 改变后调用</span><br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="实例生命周期钩子"><a href="#实例生命周期钩子" class="headerlink" title="实例生命周期钩子"></a>实例生命周期钩子</h3><p>每个Vue实例创建时都将经历一系列<strong>初始化过程</strong>，例如设置数据监听、编译模板、将实例挂载到DOM并在数据变化时更新DOM等</p><p>这个过程中也会运行一些叫做的<strong>生命周期钩子</strong>的函数，给用户在<strong>不同阶段</strong>添加自己代码的机会</p><p>例如：created钩子可用来在一个实例创建后执行代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">a</span>: <span class="hljs-number">1</span><br>  &#125;,<br>  <span class="hljs-attr">created</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// `this` 指向 vm 实例</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;a is: &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>)<br>  &#125;<br>&#125;)<br><span class="hljs-comment">// =&gt; &quot;a is: 1&quot;</span><br></code></pre></td></tr></table></figure><p>还有一些钩子，在实例生命周期<strong>不同阶段</strong>被调用，如mounted、updated、destroyed</p><p>生命周期钩子的this上下文指向调用它的Vue实例</p><blockquote><p>注意！不要在<strong>选项属性</strong>或<strong>回调</strong>上使用箭头函数，比如created: () &#x3D;&gt; console.log(this.a)或vm.$watch(‘a’, newValue &#x3D;&gt; this.myMethod())，因为箭头函数和<strong>父级</strong>上下文绑定在一起，this不会是所预期的Vue实例，会导致Uncaught TypeError: Cannot read property of undefined或Uncaught TypeError: this.myMethod is not a function之类错误</p></blockquote><h3 id="生命周期图"><a href="#生命周期图" class="headerlink" title="生命周期图"></a>生命周期图</h3><p><img src="/wilson-blog-hexo/img/post/vue_lifecycle.png" alt="vue lifecycle"></p><p>参考链接：</p><ul><li><a href="https://cn.vuejs.org/v2/guide/instance.html">https://cn.vuejs.org/v2/guide/instance.html</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue.js技术回顾——概述</title>
    <link href="/wilson-blog-hexo/2018/02/22/Vue-js%E6%8A%80%E6%9C%AF%E5%9B%9E%E9%A1%BE/"/>
    <url>/wilson-blog-hexo/2018/02/22/Vue-js%E6%8A%80%E6%9C%AF%E5%9B%9E%E9%A1%BE/</url>
    
    <content type="html"><![CDATA[<p>初探Vue.js</p><span id="more"></span><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Vue是一套用于构建用户界面的<strong>渐进式</strong>框架，与其他大型框架不同在于，Vue被设计为可以<strong>自底向上</strong>逐层应用。</p><p>Vue的核心只关注<strong>视图层</strong>，即View。不仅易于上手，还便于与<strong>第三方库</strong>或<strong>既有项目</strong>整合</p><p>与<strong>现代化工具链</strong>及各种**<a href="https://github.com/vuejs/awesome-vue#libraries--plugins">支持类库</a><strong>结合使用时，能够为复杂的</strong>单页应用**提供驱动</p><h3 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h3><p><a href="https://jsfiddle.net/chrisvfritz/50wL7mdz/">JSFiddle在线演示</a></p><p>或按照上例在本地引入Vue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script src=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="声明式渲染"><a href="#声明式渲染" class="headerlink" title="声明式渲染"></a>声明式渲染</h3><p>vue.js核心是一个允许采用简洁的<strong>模板语法</strong>来<strong>声明式地</strong>将数据渲染进DOM的系统</p><blockquote><p>解读：vue是这样一个系统：允许你使用<strong>简洁</strong>的<strong>模板语法</strong>来<strong>声明式</strong>地将<strong>数据</strong>渲染进<strong>DOM</strong></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>&#123;&#123; message &#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这是一个DOM结构，div有唯一标识(id)——app</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br><span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br><span class="hljs-attr">data</span>: &#123;<br><span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Hello Vue!&#x27;</span><br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>声明一个VUE对象，来给id为app的这个元素声明式地将’Hello Vue!’（字符串数据）渲染进其DOM</p><p>这样就已经创建了一个Vue应用，并且<strong>数据</strong>和<strong>DOM</strong>建立起<strong>关联</strong>，所有东西都是<strong>响应式</strong>的</p><p>测试：在浏览器控制台中修改app.message的值，会看到相应更新</p><p>本地实例操作如下：</p><p><img src="http://trigolds.com/vue1-1.jpg"></p><p><img src="http://trigolds.com/vue0.jpg"></p><p><img src="http://trigolds.com/vue1.jpg"></p><p>除了上面的<strong>文本插值</strong>，还可以如下这样绑定元素特性：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app-2&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-bind:title</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><br>鼠标悬停几秒钟查看此处动态绑定的提示信息！<br><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> app2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br><span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app-2&#x27;</span>,<br><span class="hljs-attr">data</span>: &#123;<br><span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;页面加载于 &#x27;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">toLocaleString</span>()<br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p><code>v-bind</code>称为<strong>指令</strong>，vue的指令都以<code>v-</code>为前缀，它们会在渲染的DOM上应用特殊的<strong>响应式行为</strong></p><p>此处指令v-bind:title&#x3D;”message”意指“将这个元素节点的title属性和Vue实例（new Vue()）的message属性保持一致”</p><p>同样，在Vue中数据和DOM存在响应式关联，即修改app2.message &#x3D; ‘其他消息’会看到绑定了title特性的HTML发生更新</p><p>That is really interesting!</p><h3 id="条件与循环"><a href="#条件与循环" class="headerlink" title="条件与循环"></a>条件与循环</h3><p>控制一个元素是否显示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app-3&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;seen&quot;</span>&gt;</span>现在你看到我了<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> app3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br><span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app-3&#x27;</span>,<br><span class="hljs-attr">data</span>: &#123;<br><span class="hljs-attr">seen</span>: <span class="hljs-literal">true</span><br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p><img src="http://trigolds.com/vue3.jpg"></p><p>在控制台修改app3.seen为false</p><p><img src="http://trigolds.com/vue3-2.jpg"></p><p>本例证明不仅可以把数据绑定到DOM文本（例1）或特性（例2），还可以绑定到DOM结构（例3）</p><p>此外，Vue还提供强大的<strong>过渡效果</strong>系统，可以在Vue<strong>插入&#x2F;更新&#x2F;移除</strong>元素时自动应用<strong>过渡效果</strong></p><p>每个Vue指令都有特殊的功能，例如v-for指令可以绑定<strong>数组的数据</strong>来渲染一个<strong>项目列表</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app-4&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;todo in todos&quot;</span>&gt;</span><br>&#123;&#123; todo.text &#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> app4 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br><span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app-4&#x27;</span>,<br><span class="hljs-attr">data</span>: &#123;<br><span class="hljs-attr">todos</span>: [<br>&#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;元素1&#x27;</span> &#125;,<br>&#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;元素2&#x27;</span> &#125;,<br>&#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;元素3&#x27;</span> &#125;<br>]<br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>在控制台内向app4这个Vue实例中的数组再添加一个对象</p><h3 id="处理用户输入"><a href="#处理用户输入" class="headerlink" title="处理用户输入"></a>处理用户输入</h3><p>v-on指令可添加一个<strong>事件监听器</strong>，通过其<strong>调用</strong>Vue实例中定义的<strong>方法</strong>，可与用户进行交互</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app-5&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;reverseMessage&quot;</span>&gt;</span>反转消息<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> app5 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br><span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app-5&#x27;</span>,<br><span class="hljs-attr">data</span>: &#123;<br><span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Hello Vue!&#x27;</span><br>&#125;,<br><span class="hljs-attr">methods</span>: &#123;<br><span class="hljs-attr">reverseMessage</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">reverse</span>().<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>&#125;<br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>注意点：</p><ol><li><p>选择器是#app-5而非app-5</p></li><li><p>中英文符号{}</p></li><li><p>methods而非method</p></li></ol><p><img src="http://trigolds.com/vue5.jpg"></p><p>本例中更新应用状态却没有触碰DOM，DOM操作都有Vue处理，只需关注逻辑层面</p><p>Vue还有v-model指令用于实现<strong>表单输入</strong>和<strong>应用状态</strong>之间的<strong>双向绑定</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app-6&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> app6 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br><span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app-6&#x27;</span>,<br><span class="hljs-attr">data</span>: &#123;<br><span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Hello Vue!&#x27;</span><br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>该双向绑定对比Angular最简示例更加轻便</p><h3 id="组件化应用构建"><a href="#组件化应用构建" class="headerlink" title="组件化应用构建"></a>组件化应用构建</h3><p><strong>组件系统</strong>是Vue另一重要概念（区别于前面过渡系统）</p><p>因为组件系统是一种<strong>抽象</strong>，允许使用<strong>小型（tiny）</strong>、<strong>独立（independent）</strong>和可复用（reusable）的组件构建大型应用（类似React）</p><p>一个组件的本质是一个拥有<strong>预定义选项</strong>的一个Vue实例</p><p>在Vue中注册组件：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Vue.component(<span class="hljs-string">&#x27;todo-item&#x27;</span>, &#123;<br><span class="hljs-keyword">template</span>: <span class="hljs-string">&#x27;&lt;li&gt;待办项&lt;/li&gt;&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>现在可以有用它构建另一个组件模板</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;ol&gt;</span><br><span class="hljs-section">&lt;todo-item&gt;</span><span class="hljs-section">&lt;/todo-item&gt;</span><br><span class="hljs-section">&lt;/ol&gt;</span><br></code></pre></td></tr></table></figure><p>但这样为每个待办项渲染同样的文本很差劲</p><p>应能从<strong>父作用域</strong>将<strong>数据</strong>传到<strong>子组件</strong></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">Vue.component(&#x27;todo-item&#x27;, &#123;</span><br><span class="language-xml">props: [&#x27;todo&#x27;].</span><br><span class="language-xml">template: &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">todo.text</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>&#x27;</span><br><span class="language-xml">&#125;)</span><br></code></pre></td></tr></table></figure><p>使用v-bind指令将待办项传到循环输出的每个组件中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app-7&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">todo-item</span></span><br><span class="hljs-tag"><span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in groceryList&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">v-bind:todo</span>=<span class="hljs-string">&quot;item&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">v-bind:key</span>=<span class="hljs-string">&quot;item.id&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">todo-item</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;todo-item&#x27;</span>, &#123;<br><span class="hljs-attr">props</span>: [<span class="hljs-string">&#x27;todo&#x27;</span>],<br><span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;li&gt;&#123;&#123; todo.text &#125;&#125;&lt;/li&gt;&#x27;</span><br>&#125;)<br><br><span class="hljs-keyword">var</span> app7 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br><span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app-7&#x27;</span>,<br><span class="hljs-attr">data</span>: &#123;<br><span class="hljs-attr">groceryList</span>: [<br>&#123; <span class="hljs-attr">id</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;待办1&#x27;</span> &#125;,<br>&#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;待办2&#x27;</span> &#125;,<br>&#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;待办3&#x27;</span> &#125;<br>]<br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>这就像是在前端使用面向对象思想声明了了类，并实例化一个实例来处理数组</p><p>这个例子将应用分割成两个更小的单元。</p><p>子单元通过prop接口与父单元进行了良好的解耦</p><p>可进一步改进<todo-item>组件，提供更为复杂的模板和逻辑，而不影响父单元</p><p>在一个<strong>大型应用</strong>中有必要将整个应用<strong>划分</strong>为<strong>组件</strong>，以使开发更易管理</p><p>如下例展示了使用了<strong>组件</strong>的应用模板是什么样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">app-nav</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">app-nav</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">app-view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">app-siderbar</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">app-sidebar</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">app-content</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">app-content</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">app-view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="与自定义元素的关系"><a href="#与自定义元素的关系" class="headerlink" title="与自定义元素的关系"></a>与自定义元素的关系</h3><p>Vue的组件非常类似于<strong>自定义元素</strong>——它是Web组件规范的一部分，因为Vue的组件语法部分参考了该规范，如Vue组件实现了<a href="https://github.com/w3c/webcomponents/blob/gh-pages/proposals/Slots-Proposal.md">Slot API</a>与is特性</p><p>但是，有几个关键差别：</p><ol><li><p>Web组件规范仍处于草案阶段，并未被所有浏览器原生实现。而Vue组件不需要任何polyfill，且在所有支持的浏览器（IE9及以上）中表现一致。必要时Vue组件也可包装于<strong>原生自定义元素</strong>之内</p></li><li><p>Vue组件提供了纯自定义元素所不具备的一些重要功能，最突出的是<strong>跨组件数据流</strong>、<strong>自定义事件通信</strong>和<strong>构建工具集成</strong></p></li></ol><p>参考链接：</p><ul><li><a href="https://cn.vuejs.org/v2/guide/">https://cn.vuejs.org/v2/guide/</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML5语义提升篇</title>
    <link href="/wilson-blog-hexo/2018/02/16/HTML5%E8%AF%AD%E4%B9%89%E6%8F%90%E5%8D%87%E7%AF%87/"/>
    <url>/wilson-blog-hexo/2018/02/16/HTML5%E8%AF%AD%E4%B9%89%E6%8F%90%E5%8D%87%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<p>关于HTML5中语义方面的改变</p><span id="more"></span><h2 id="使用HTML的section和outline"><a href="#使用HTML的section和outline" class="headerlink" title="使用HTML的section和outline"></a>使用HTML的section和outline</h2><blockquote><p>重要点：现在不再有在图形浏览器或辅助技术用户代理的已知的提纲算法，虽然这个算法在其他软件，比如一致性检验器中被实现。所以<a href="https://www.w3.org/TR/html5/sections.html#outline">提纲</a>算法不能再被依赖于传递文档结构给用户。作者被建议去使用标题头<a href="https://www.w3.org/TR/html5/sections.html#rank">秩</a>(h1-h6)去传递文档结构</p></blockquote><p>HTML5特征带来了许多新元素给web开发者，允许他们去描述一个web文档的结构以一种标准的语义。这个文档描述了这些元素和如何使用它们去定义所想要的任何文档内容的轮廓。</p><h3 id="HTML4中的文档结构"><a href="#HTML4中的文档结构" class="headerlink" title="HTML4中的文档结构"></a>HTML4中的文档结构</h3><p>一个文档的结构，比如，&lt;body&gt;和&lt;&#x2F;body&gt;之间的语义结构，是呈现网页给用户的最基本。HTML4使用一个文档的部分概念（notion of section）和子部分来描述它的结构。一个部分被一个&lt;div&gt;元素定义，伴随着其内的标题元素（&lt;h1&gt;,&lt;h2&gt;,&lt;h3&gt;,&lt;h4&gt;,&lt;h5&gt;或者&lt;h6&gt;）定义了它的标题。这些元素的关系引领了文档的结构和它的轮廓</p><p>所以如下的标记：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;section&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;forest-elephants&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Forest elephants<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>In this section, we discuss the lesser known forest elephants.<br>...this section continues...<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;subsection&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;forest-habitat&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Habitat<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Forest elephants do not live in trees but among them.<br>...this subsection continues...<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>d<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>引导如下的轮廓：（不含隐式等级号展示）</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>. Forest elephants<br>   <span class="hljs-attribute">1</span>.<span class="hljs-number">1</span> Habitat<br></code></pre></td></tr></table></figure><p>并非一定需要&lt;div&gt;元素去定义一个新的部分块。仅需存在一个标题元素就足以意味着一个新的部分块。所以：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html5">&lt;h1&gt;Forest elephants&lt;h1&gt;<br>&lt;p&gt;In this section, we discuss the lesser known forest elephants.<br>...this section continues...<br>&lt;h2&gt;Habitat&lt;/h2&gt;<br>&lt;p&gt;Forest elephants do not live in trees but among them.<br>...this subsection continues...<br>&lt;h2&gt;Diet&lt;/h2&gt;<br>&lt;h1&gt;Mongolian gerbils&lt;/h1&gt;<br></code></pre></td></tr></table></figure><p>引领出如下的轮廓：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>. Forest elephants<br>   <span class="hljs-attribute">1</span>.<span class="hljs-number">1</span> Habitat<br>   <span class="hljs-attribute">1</span>.<span class="hljs-number">2</span> Diet<br><span class="hljs-attribute">2</span>. Mongolian gerbils<br></code></pre></td></tr></table></figure><h3 id="HTML5所解决的问题"><a href="#HTML5所解决的问题" class="headerlink" title="HTML5所解决的问题"></a>HTML5所解决的问题</h3><p>HTML4定义了文档的结构与其暗示轮廓算法非常粗糙并带来了大量的问题：</p><ol><li><p>对于定义语义块的&lt;div&gt;用法，未给class参数定义特定的值使轮廓算法自动化变得不可能（那个&lt;div&gt;部分究竟是页的轮廓，定义了一个块还是一个块？或是它只是呈现了一个&lt;div&gt;，仅用来编辑样式）。在其他方面，HTML4规格在<strong>什么是一个部分块</strong>和它的<strong>域是如何定义</strong>上非常不准确。轮廓的自动生成是重要的，尤其对于<a href="https://en.wikipedia.org/wiki/Assistive_technology">辅助技术</a>，可能会适应这种根据文档结构呈现信息给用户的方式。HTML5移除了来自轮廓算法的&lt;div&gt;元素的需要，通过引入一个新的元素&lt;section&gt;。HTML Section Element</p></li><li><p>合并多个文档是困难的：包含一个子文档进一个主文档意味着改变HTML头元素的等级，所以轮廓会保持。这在HTML5中被解决，以其新介绍的块元素(&lt;article&gt;,&lt;section&gt;,&lt;nav&gt;和&lt;aside&gt;)，总会是其相邻最近祖先块的子块，不管通过内部的头元素定义了什么块</p></li><li><p>在HTML4中，每一个块都是文档轮廓的一部分。但文档通常不是那么线性。一个文档可以有特殊的部分，包含着不属于其一部分的信息，虽然和主线关联，比如一个广告块或者一个解释说明盒子。HTML5介绍了&lt;aside&gt;元素允许这样的块元素不成为主轮廓的部分</p></li><li><p>再一次的，在HTML4中，因为每一个部分都是文档轮廓的一部分，没可能会有块包含与文档无关的信息，除了对于整个站点的元素，比如图标、菜单、内容表格或是版权信息和合法通知。为了这个目的，HTML5引入了三个新元素：&lt;nav&gt;用来表示链接集合，比如一个内容表格，&lt;footer&gt;和&lt;header&gt;用来表示站点相关信息。注意&lt;header&gt;和&lt;footer&gt;不是像&lt;section&gt;一样在为内容划分块，而是它们存在用来语义地标记块的部分（头部分和尾部分）</p></li></ol><p>更通常的，HTML5带来了块和头部的<strong>预测</strong>特征，允许文档轮廓被预测，并被浏览器用来提高<strong>用户体验</strong></p><h3 id="HTML5轮廓算法"><a href="#HTML5轮廓算法" class="headerlink" title="HTML5轮廓算法"></a>HTML5轮廓算法</h3><p>让我们考虑下潜藏在HTML处理部分和轮廓的方式下的算法</p><h4 id="定义部分"><a href="#定义部分" class="headerlink" title="定义部分"></a>定义部分</h4><p>所有的内容都躺在&lt;body&gt;元素中的内容都是一个块部分。HTML5中的块可以嵌套。除了主块，被&lt;body&gt;所定义的元素，块限定被定义地或明确或含蓄。明确定义的块部分是&lt;body&gt;,&lt;section&gt;,&lt;article&gt;,&lt;aside&gt;和&lt;nav&gt;标签内的内容</p><blockquote><p>每个部分可以有其自己的头层级。所以，甚至一个嵌套的部分也可以有一个&lt;h1&gt;，见后续实例</p></blockquote><p>让我们看一个例子——这里我们有一个拥有一个顶层部分和一个尾部定义的文档。在顶级部分我们有三个子块，以两个&lt;section&gt;和一个&lt;aside&gt;元素定义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html5">&lt;section&gt;<br><br>&lt;h1&gt;Forest elephants&lt;/h1&gt;<br><br>&lt;section&gt;<br>&lt;h1&gt;Introduction&lt;/h1&gt;<br>&lt;p&gt;In this section, we discuss the lesser known forest elephants.&lt;/p&gt;<br>&lt;/section&gt;<br><br>&lt;section&gt;<br>&lt;h1&gt;Habitat&lt;/h1&gt;<br>&lt;p&gt;Forest elephants do not live in trees but among them.&lt;/p&gt;<br>&lt;/section&gt;<br><br>&lt;aside&gt;<br>&lt;p&gt;advertising block&lt;/p&gt;<br>&lt;/aide&gt;<br><br>&lt;/section&gt;<br><br>&lt;footer&gt;<br>&lt;p&gt;(c) 2010 The Example company&lt;/p&gt;<br>&lt;/footer&gt;<br></code></pre></td></tr></table></figure><p>这导致了如下的轮廓：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>. Forest elephants<br>   <span class="hljs-attribute">1</span>.<span class="hljs-number">1</span> Introduction<br>   <span class="hljs-attribute">1</span>.<span class="hljs-number">2</span> Habitat<br></code></pre></td></tr></table></figure><h4 id="定义头部"><a href="#定义头部" class="headerlink" title="定义头部"></a>定义头部</h4><h4 id="明确的定义块"><a href="#明确的定义块" class="headerlink" title="明确的定义块"></a>明确的定义块</h4><h4 id="块根"><a href="#块根" class="headerlink" title="块根"></a>块根</h4><h4 id="轮廓外的块"><a href="#轮廓外的块" class="headerlink" title="轮廓外的块"></a>轮廓外的块</h4><h4 id="头部和尾部"><a href="#头部和尾部" class="headerlink" title="头部和尾部"></a>头部和尾部</h4><h3 id="部分块元素中的地址"><a href="#部分块元素中的地址" class="headerlink" title="部分块元素中的地址"></a>部分块元素中的地址</h3><h3 id="在不支持HTML5的浏览器中使用HTML5元素"><a href="#在不支持HTML5的浏览器中使用HTML5元素" class="headerlink" title="在不支持HTML5的浏览器中使用HTML5元素"></a>在不支持HTML5的浏览器中使用HTML5元素</h3><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML5</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML5基础回顾</title>
    <link href="/wilson-blog-hexo/2018/02/16/HTML5%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE/"/>
    <url>/wilson-blog-hexo/2018/02/16/HTML5%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE/</url>
    
    <content type="html"><![CDATA[<p>HTML5作为如今前端必备“新”技术，理应成为前端基础的必备技能之一</p><span id="more"></span><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>HTML5是HTML的最新标准定义。这个术语展示了两个概念。它是HTML语言的最新版本，拥有着新的元素、参数和行为，还有一个大的集合，使得可以构建更加多样化和强大的Web网站和应用。这个集合有时候称作HTML5&amp;friends，常简写为HTML5。</p><ol><li><p>语义上：允许描述你的内容更加精确</p></li><li><p>连通性上：允许你和服务端的交流以革新的方式</p></li><li><p>离线和存储：允许网页在本地客户端存储数据并更加高效地离线操作</p></li><li><p>多媒体：使视频和音频在Web世界成为第一公民</p></li><li><p>2D&#x2F;3D图形和效果：允许更加多样化范围的呈现选项</p></li><li><p>性能和集成：提供更快的优化和更好的计算机硬件用法</p></li><li><p>设备访问：允许多种输入输出设备的用法</p></li><li><p>样式：让用户写更加复杂的主题</p></li></ol><h2 id="提纲"><a href="#提纲" class="headerlink" title="提纲"></a>提纲</h2><ul><li><p>语义</p></li><li><p>连通性</p></li><li><p>离线和存储</p></li><li><p>多媒体</p></li><li><p>3D图形和效果</p></li><li><p>性能和集成</p></li><li><p>设备访问</p></li><li><p>样式</p></li></ul><h3 id="语义"><a href="#语义" class="headerlink" title="语义"></a>语义</h3><h4 id="HTML5部分和概要"><a href="#HTML5部分和概要" class="headerlink" title="HTML5部分和概要"></a>HTML5部分和概要</h4><h4 id="使用HTML5音频和视频"><a href="#使用HTML5音频和视频" class="headerlink" title="使用HTML5音频和视频"></a>使用HTML5音频和视频</h4><h4 id="表格提升"><a href="#表格提升" class="headerlink" title="表格提升"></a>表格提升</h4><h4 id="新的语义元素"><a href="#新的语义元素" class="headerlink" title="新的语义元素"></a>新的语义元素</h4><h4 id="iframe提高"><a href="#iframe提高" class="headerlink" title="iframe提高"></a>iframe提高</h4><h4 id="MathML"><a href="#MathML" class="headerlink" title="MathML"></a>MathML</h4><h4 id="HTML5介绍"><a href="#HTML5介绍" class="headerlink" title="HTML5介绍"></a>HTML5介绍</h4><h4 id="HTML5速查手册"><a href="#HTML5速查手册" class="headerlink" title="HTML5速查手册"></a>HTML5速查手册</h4><h4 id="HTML5编译解析器"><a href="#HTML5编译解析器" class="headerlink" title="HTML5编译解析器"></a>HTML5编译解析器</h4><h3 id="连通性"><a href="#连通性" class="headerlink" title="连通性"></a>连通性</h3><h4 id="Web-Sockets"><a href="#Web-Sockets" class="headerlink" title="Web Sockets"></a>Web Sockets</h4><h4 id="服务端发送事件"><a href="#服务端发送事件" class="headerlink" title="服务端发送事件"></a>服务端发送事件</h4><h4 id="WebRTC"><a href="#WebRTC" class="headerlink" title="WebRTC"></a>WebRTC</h4><h3 id="离线和存储"><a href="#离线和存储" class="headerlink" title="离线和存储"></a>离线和存储</h3><h4 id="离线资源：应用缓存"><a href="#离线资源：应用缓存" class="headerlink" title="离线资源：应用缓存"></a>离线资源：应用缓存</h4><h4 id="在线和离线事件"><a href="#在线和离线事件" class="headerlink" title="在线和离线事件"></a>在线和离线事件</h4><h4 id="WHATWG客户端会话和持久化存储（aka-DOM存储）"><a href="#WHATWG客户端会话和持久化存储（aka-DOM存储）" class="headerlink" title="WHATWG客户端会话和持久化存储（aka DOM存储）"></a>WHATWG客户端会话和持久化存储（aka DOM存储）</h4><h4 id="IndexedDB"><a href="#IndexedDB" class="headerlink" title="IndexedDB"></a>IndexedDB</h4><h4 id="从web应用使用文件"><a href="#从web应用使用文件" class="headerlink" title="从web应用使用文件"></a>从web应用使用文件</h4><h3 id="多媒体"><a href="#多媒体" class="headerlink" title="多媒体"></a>多媒体</h3><h4 id="使用HTML5音频和视频-1"><a href="#使用HTML5音频和视频-1" class="headerlink" title="使用HTML5音频和视频"></a>使用HTML5音频和视频</h4><h4 id="WebRTC-1"><a href="#WebRTC-1" class="headerlink" title="WebRTC"></a>WebRTC</h4><h4 id="使用相机API"><a href="#使用相机API" class="headerlink" title="使用相机API"></a>使用相机API</h4><h4 id="Track和WebVTT"><a href="#Track和WebVTT" class="headerlink" title="Track和WebVTT"></a>Track和WebVTT</h4><h3 id="3D图形和效果"><a href="#3D图形和效果" class="headerlink" title="3D图形和效果"></a>3D图形和效果</h3><h4 id="Canvas教程"><a href="#Canvas教程" class="headerlink" title="Canvas教程"></a>Canvas教程</h4><h4 id="用于canvas元素的HTML5文本API"><a href="#用于canvas元素的HTML5文本API" class="headerlink" title="用于canvas元素的HTML5文本API"></a>用于canvas元素的HTML5文本API</h4><h4 id="WebGL"><a href="#WebGL" class="headerlink" title="WebGL"></a>WebGL</h4><h4 id="SVG"><a href="#SVG" class="headerlink" title="SVG"></a>SVG</h4><h3 id="性能和集成"><a href="#性能和集成" class="headerlink" title="性能和集成"></a>性能和集成</h3><h4 id="Web-Workers"><a href="#Web-Workers" class="headerlink" title="Web Workers"></a>Web Workers</h4><h4 id="XMLHttpRequest等级2"><a href="#XMLHttpRequest等级2" class="headerlink" title="XMLHttpRequest等级2"></a>XMLHttpRequest等级2</h4><h4 id="即时编译javascript引擎"><a href="#即时编译javascript引擎" class="headerlink" title="即时编译javascript引擎"></a>即时编译javascript引擎</h4><h4 id="历史API"><a href="#历史API" class="headerlink" title="历史API"></a>历史API</h4><h4 id="可编辑内容的参数：将你的网站转变成wiki"><a href="#可编辑内容的参数：将你的网站转变成wiki" class="headerlink" title="可编辑内容的参数：将你的网站转变成wiki"></a>可编辑内容的参数：将你的网站转变成wiki</h4><h4 id="拖放"><a href="#拖放" class="headerlink" title="拖放"></a>拖放</h4><h4 id="HTML中的聚焦管理"><a href="#HTML中的聚焦管理" class="headerlink" title="HTML中的聚焦管理"></a>HTML中的聚焦管理</h4><h4 id="基于Web协议的处理器"><a href="#基于Web协议的处理器" class="headerlink" title="基于Web协议的处理器"></a>基于Web协议的处理器</h4><h4 id="requestAnimationFrame"><a href="#requestAnimationFrame" class="headerlink" title="requestAnimationFrame"></a>requestAnimationFrame</h4><h4 id="全屏API"><a href="#全屏API" class="headerlink" title="全屏API"></a>全屏API</h4><h4 id="指针锁API"><a href="#指针锁API" class="headerlink" title="指针锁API"></a>指针锁API</h4><h4 id="线上和离线事件"><a href="#线上和离线事件" class="headerlink" title="线上和离线事件"></a>线上和离线事件</h4><h3 id="事件访问"><a href="#事件访问" class="headerlink" title="事件访问"></a>事件访问</h3><h4 id="使用相机API-1"><a href="#使用相机API-1" class="headerlink" title="使用相机API"></a>使用相机API</h4><h4 id="触摸事件"><a href="#触摸事件" class="headerlink" title="触摸事件"></a>触摸事件</h4><h4 id="使用地图定位"><a href="#使用地图定位" class="headerlink" title="使用地图定位"></a>使用地图定位</h4><h4 id="检测设备方向"><a href="#检测设备方向" class="headerlink" title="检测设备方向"></a>检测设备方向</h4><h4 id="指针锁API-1"><a href="#指针锁API-1" class="headerlink" title="指针锁API"></a>指针锁API</h4><h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3><p>CSS企图渲染元素以一种更加复杂的方式。这通常指的是CSS3，尽管CSS不再是一个单一的规范并且不同的模块不是都在CSS3：有一些在CSS1和CSS4，伴随着所有的中间水平。</p><h4 id="新的背景样式特征"><a href="#新的背景样式特征" class="headerlink" title="新的背景样式特征"></a>新的背景样式特征</h4><h4 id="更多奇特的边框"><a href="#更多奇特的边框" class="headerlink" title="更多奇特的边框"></a>更多奇特的边框</h4><h4 id="动画样式"><a href="#动画样式" class="headerlink" title="动画样式"></a>动画样式</h4><h4 id="排版提高"><a href="#排版提高" class="headerlink" title="排版提高"></a>排版提高</h4><h4 id="新的呈现布局"><a href="#新的呈现布局" class="headerlink" title="新的呈现布局"></a>新的呈现布局</h4><hr><p>后面将对该提纲各部分内容逐一深入探析</p><p>参考链接：</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5">https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML5</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>javascript常见问题整理</title>
    <link href="/wilson-blog-hexo/2018/02/15/javascript%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86/"/>
    <url>/wilson-blog-hexo/2018/02/15/javascript%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>25个最基本的javascript问题整理</p><span id="more"></span><ol><li>使用typeof bar &#x3D;&#x3D;&#x3D; “object”判定bar是否是对象的<strong>潜在</strong>陷阱是什么？<strong>如何避免</strong>该陷阱？</li></ol><blockquote><p>虽然typeof bar &#x3D;&#x3D;&#x3D; “object”是检查bar是否为对象的可靠方法，但是javascript中<strong>null</strong>也被认为是<strong>对象</strong></p></blockquote><p>要注意类似以下的typeof使用场景</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> bar2;<br><span class="hljs-keyword">typeof</span> bar2;<br><span class="hljs-string">&quot;undefined&quot;</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">undefined</span><br><span class="hljs-string">&quot;undefined&quot;</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-string">&quot;undefined&quot;</span><br><span class="hljs-string">&quot;string&quot;</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">null</span><br><span class="hljs-string">&quot;object&quot;</span><br></code></pre></td></tr></table></figure><p>要避免此类问题，可以同时检查bar是否为null，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> bar = <span class="hljs-literal">null</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>((bar !== <span class="hljs-literal">null</span>) &amp;&amp; (<span class="hljs-keyword">typeof</span> bar === <span class="hljs-string">&quot;object&quot;</span>));<br><span class="hljs-title class_">VM489</span>:<span class="hljs-number">2</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>当bar为函数时，大多数情况上述值返回false是期望行为（因为函数不同于对象），但如果想要对函数返回true的话，可以修改为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">bar</span>(<span class="hljs-params"></span>) &#123;&#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>((<span class="hljs-keyword">typeof</span> bar !== <span class="hljs-literal">null</span>) &amp;&amp; (<span class="hljs-keyword">typeof</span> bar === <span class="hljs-string">&quot;object&quot;</span>) || (<span class="hljs-keyword">typeof</span> bar === <span class="hljs-string">&quot;function&quot;</span>));<br><span class="hljs-title class_">VM757</span>:<span class="hljs-number">2</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>当bar为一个数组时，返回值为true为期望行为（因为数组也是对象）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> bar = [];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>((<span class="hljs-keyword">typeof</span> bar !== <span class="hljs-literal">null</span>) &amp;&amp; (<span class="hljs-keyword">typeof</span> bar === <span class="hljs-string">&quot;object&quot;</span>) || (<span class="hljs-keyword">typeof</span> bar === <span class="hljs-string">&quot;function&quot;</span>));<br><span class="hljs-title class_">VM926</span>:<span class="hljs-number">2</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>但如果想让数组返回false，可修改为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> bar = [];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>((<span class="hljs-keyword">typeof</span> bar !== <span class="hljs-literal">null</span>) &amp;&amp; (<span class="hljs-keyword">typeof</span> bar === <span class="hljs-string">&quot;object&quot;</span>) &amp;&amp; (toString.<span class="hljs-title function_">call</span>(bar) !== <span class="hljs-string">&quot;[object Array]&quot;</span>));<br><span class="hljs-title class_">VM1133</span>:<span class="hljs-number">2</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>如果使用jQuery可为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> bar = [];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>((<span class="hljs-keyword">typeof</span> bar !== <span class="hljs-literal">null</span>) &amp;&amp; (<span class="hljs-keyword">typeof</span> bar === <span class="hljs-string">&quot;object&quot;</span>) &amp;&amp; (! $.<span class="hljs-title function_">isArray</span>(bar)));<br></code></pre></td></tr></table></figure><p>拓展：call方法</p><ol start="2"><li>以下输出什么？为什么？</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">var</span> a = b = <span class="hljs-number">3</span>;<br>&#125;)();<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;a defined? &quot;</span> + (<span class="hljs-keyword">typeof</span> a !== <span class="hljs-string">&#x27;undefined&#x27;</span>));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;b defined? &quot;</span> + (<span class="hljs-keyword">typeof</span> b !== <span class="hljs-string">&#x27;undefined&#x27;</span>));<br></code></pre></td></tr></table></figure><blockquote><p>由于a和b都定义在函数的封闭范围内，并且都始于var关键字，大多数情况期望上面结果都是undefined，大多数情况上述的var a &#x3D; b &#x3D; 3；等同于var b &#x3D; 3; var a &#x3D; b；但<strong>实际上</strong>是b &#x3D; 3; var a &#x3D; b；所以如果不使用严格模式，会输出如下：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">var</span> a = b = <span class="hljs-number">3</span>;<br>&#125;)();<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;a defined? &quot;</span> + (<span class="hljs-keyword">typeof</span> a !== <span class="hljs-string">&#x27;undefined&#x27;</span>));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;b defined? &quot;</span> + (<span class="hljs-keyword">typeof</span> b !== <span class="hljs-string">&#x27;undefined&#x27;</span>));<br><span class="hljs-title class_">VM1296</span>:<span class="hljs-number">6</span> a defined? <span class="hljs-literal">false</span><br><span class="hljs-title class_">VM1296</span>:<span class="hljs-number">7</span> b defined? <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><blockquote><p>因为var a &#x3D; b &#x3D; 3;相当于b &#x3D; 3; var a &#x3D; b，b没有使用var声明，所以变成全局变量</p></blockquote><ol start="3"><li>以下输出什么？为什么</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> myObject = &#123;<br><span class="hljs-attr">foo</span>: <span class="hljs-string">&quot;bar&quot;</span>,<br><span class="hljs-attr">func</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">var</span> self = <span class="hljs-variable language_">this</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;outer func: this.foo = &quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">foo</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;outer func: self.foo = &quot;</span> + self.<span class="hljs-property">foo</span>);<br>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;inner func: this.foo = &quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">foo</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;inner func: self.foo = &quot;</span> + self.<span class="hljs-property">foo</span>);<br>&#125;());<br>&#125;<br>&#125;;<br>myObject.<span class="hljs-title function_">func</span>();<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">outer <span class="hljs-attr">func</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">foo</span> = bar<br><span class="hljs-title class_">VM1353</span>:<span class="hljs-number">6</span> outer <span class="hljs-attr">func</span>: self.<span class="hljs-property">foo</span> = bar<br><span class="hljs-title class_">VM1353</span>:<span class="hljs-number">8</span> inner <span class="hljs-attr">func</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">foo</span> = <span class="hljs-literal">undefined</span><br><span class="hljs-title class_">VM1353</span>:<span class="hljs-number">9</span> inner <span class="hljs-attr">func</span>: self.<span class="hljs-property">foo</span> = bar<br></code></pre></td></tr></table></figure><blockquote><p>在外部函数中，this和self都指向了myObject，所以两者都能正确地引用和访问foo；内部函数中，this不再指向myObject，所以此时this.foo未在内部函数中定义，相反指向到本地的变量self保持在范围内，且可以访问（<strong>ES5以前</strong>，内部函数中的this将指向全局的<strong>window</strong>对象，<strong>ES5</strong>内部函数中的<strong>this</strong>是<strong>未定义</strong>的）</p></blockquote><ol start="4"><li>封装javascript源文件的全部内容到一个函数块有什么意义及理由？</li></ol><blockquote><p>这是越来越普遍的做法，被许多流行js库所采用（例如jQuery、Node.js）。这种技术创建了一个围绕<strong>文件全部内容</strong>的闭包，并且很重要的是创建了一个<strong>私有</strong>的<strong>命名空间</strong>，从而避免不同javascript模块和库之间潜在的<strong>名称冲突</strong>。</p></blockquote><blockquote><p>这种技术的另一个特点是允许一个<strong>易于引用</strong>的<strong>别名</strong>用于<strong>全局变量</strong></p></blockquote><blockquote><p>例如jQuery插件中允许使用jQuery.noConflict()来禁用$引用到jQuery命名空间，在此之后仍可使用$利用这种闭包技术，如下：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-keyword">function</span>(<span class="hljs-params">$</span>) &#123; <span class="hljs-comment">/* jQuery plugin code referencing $ */</span> &#125;)(jQuery);<br></code></pre></td></tr></table></figure><ol start="5"><li>javascript源文件开头包含use strict有什么意义和好处？</li></ol><p>严格模式的一些优点：</p><ul><li><p>使调试更加容易——那些被忽略或默默失败的代码错误会产生错误或抛出异常</p></li><li><p>防止意外的全局变量——非严格模式下将值分配一个未声明的变量会自动创建该名称的全局变量，但严格模式下会报错</p></li><li><p>消除this强制——非严格模式下，引用<strong>null</strong>或<strong>未定义的值</strong>到<strong>this值</strong>会<strong>自动强制</strong>到<strong>全局变量</strong></p></li><li><p>不允许重复的属性名称或参数值——当检测到<strong>对象</strong>中<strong>重复命名属性</strong>（var object &#x3D; {foo: ‘bar’, foo: ‘baz’};）或函数中重复命名参数（function foo(val1, val2, val1) {}）会报错，因此可捕获代码中的bug以避免大量的跟踪时间</p></li><li><p>使用eval()更安全——严格模式下，<strong>变量</strong>和<strong>声明在eval()语句内部的函数</strong>不会在<strong>包含范围内</strong>创建，而会在非严格模式下创建</p></li><li><p>在delete使用无效时报错——delete不能用在对象不可配置的属性上，非严格模式时会静默失败，严格模式下会报错</p></li></ul><ol start="6"><li>以下两个函数会返回相同的东西吗？为什么相同或不同？</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo1</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-keyword">return</span> &#123;<br><span class="hljs-attr">bar</span>: <span class="hljs-string">&quot;hello&quot;</span><br>&#125;;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo2</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-keyword">return</span><br>&#123;<br><span class="hljs-attr">bar</span>: <span class="hljs-string">&quot;hello&quot;</span><br>&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo1</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-keyword">return</span> &#123;<br><span class="hljs-attr">bar</span>: <span class="hljs-string">&quot;hello&quot;</span><br>&#125;;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">foo1</span>());<br><span class="hljs-title class_">VM1405</span>:<span class="hljs-number">5</span> &#123;<span class="hljs-attr">bar</span>: <span class="hljs-string">&quot;hello&quot;</span>&#125;<br><span class="hljs-literal">undefined</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo2</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-keyword">return</span><br>&#123;<br><span class="hljs-attr">bar</span>: <span class="hljs-string">&quot;hello&quot;</span><br>&#125;;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">foo2</span>());<br><span class="hljs-title class_">VM1441</span>:<span class="hljs-number">6</span> <span class="hljs-literal">undefined</span><br></code></pre></td></tr></table></figure><blockquote><p>原因在于javascript中的分号是一个可选项，但省略其将会是非常糟糕的形式。当碰到foo2()中包含return语句的代码行（代码行上没有任何代码），分号会立即<strong>自动插入</strong>到<strong>返回语句</strong>后。但不会报错，因为后面的代码是有效的，相当于是一个未使用的代码块，定义了等同于字符串”hello”的属性bar</p></blockquote><ol start="7"><li>NaN是什么？它的类型是什么？如何可靠地测试一个值是否等于NaN？</li></ol><blockquote><p>NaN表示一个“不是数字”的值，因为运算不能执行而得。运算不能执行的原因有：其中的运算对象之一不是数字或运算结果不是数字。</p></blockquote><blockquote><p>虽然NaN表示“不是数字”，但是其类型是Number</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">typeof</span> <span class="hljs-title class_">NaN</span><br><span class="hljs-string">&quot;number&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>NaN和<strong>任何东西</strong>（包括其自身）都是false</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">NaN</span> == <span class="hljs-title class_">NaN</span><br><span class="hljs-literal">false</span><br><span class="hljs-title class_">NaN</span> === <span class="hljs-title class_">NaN</span><br><span class="hljs-literal">false</span><br><span class="hljs-title class_">NaN</span> === <span class="hljs-string">&quot;hello&quot;</span><br><span class="hljs-literal">false</span><br><span class="hljs-title class_">NaN</span> == <span class="hljs-string">&quot;hello&quot;</span><br><span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>一种比较好的测试一个数字是否等于NaN的方式是使用内建函数isNaN()，但不是最好的方案</p><p>更好的解决方案是使用value !&#x3D;&#x3D; value</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">4</span> !== <span class="hljs-number">4</span><br><span class="hljs-literal">false</span><br><span class="hljs-number">4</span> !== <span class="hljs-string">&quot;4&quot;</span><br><span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>但如果value就是NaN，那么仍然遵守“NaN和任何东西比较都是false”</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">1</span> / <span class="hljs-string">&quot;s&quot;</span> !== <span class="hljs-number">1</span> / <span class="hljs-string">&quot;s&quot;</span><br><span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>ES6提供一个新的Number.isNaN()函数，比isNaN()更可靠</p><ol start="8"><li>下列输出什么？为什么？</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span> == <span class="hljs-number">0.3</span>);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span> == <span class="hljs-number">0.3</span>);<br><span class="hljs-title class_">VM1624</span>:<span class="hljs-number">1</span> <span class="hljs-number">0.30000000000000004</span><br><span class="hljs-title class_">VM1624</span>:<span class="hljs-number">2</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>JavaScript中的数字和浮点精度的处理相同，因此可能不会总是产生预期的结果</p><ol start="9"><li>讨论写函数isInteger(x)的可能方法，用于确定x是否是整数</li></ol><p>ES6中提供了解决方案：Number.isInteger()</p><p>但ES规格说明中，整数只是概念上存在，即：数字值<strong>总是</strong>存储为<strong>浮点值</strong></p><p>ES6之前的做法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">isInteger</span>(<span class="hljs-params">x</span>) &#123;<br><span class="hljs-keyword">return</span> (x^<span class="hljs-number">0</span>) === x;<br>&#125;<br></code></pre></td></tr></table></figure><p>^为位运算符中的XOR异或运算，二者（二进制形式）不同则为真，二者相同则为假，任何值和0求异或都是其本身，但浮点数例外，浮点数只会求其整数部分</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">0</span>^<span class="hljs-number">0</span><br><span class="hljs-number">0</span><br><span class="hljs-number">12</span>^<span class="hljs-number">0</span><br><span class="hljs-number">12</span><br><span class="hljs-number">0</span>^<span class="hljs-number">12</span><br><span class="hljs-number">12</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">1.1</span>^<span class="hljs-number">0</span><br><span class="hljs-number">1</span><br><span class="hljs-number">1.5</span>^<span class="hljs-number">0</span><br><span class="hljs-number">1</span><br><span class="hljs-number">1.9</span>^<span class="hljs-number">0</span><br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>这种方式可以当输入非数字值，例如null或字符串时稳健地返回false</p><p>或者没有上面方法优雅的方案：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">isInteger</span>(<span class="hljs-params">x</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(x) === x;<br>&#125;<br></code></pre></td></tr></table></figure><p>Math.round()为四舍五入，相当于Math.ceil()进一法，Math.floor()退一法的集合</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(<span class="hljs-number">3.2</span>);<br><span class="hljs-number">3</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(<span class="hljs-number">3.5</span>);<br><span class="hljs-number">4</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(<span class="hljs-number">3.9</span>);<br><span class="hljs-number">4</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(<span class="hljs-number">3.2</span>);<br><span class="hljs-number">4</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-number">3.9</span>);<br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">isInteger</span>(<span class="hljs-params">x</span>) &#123;<br><span class="hljs-keyword">return</span> (<span class="hljs-keyword">typeof</span> x === <span class="hljs-string">&#x27;number&#x27;</span>) &amp;&amp; (x % <span class="hljs-number">1</span> === <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>是数字的同时模1为0</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">3</span> % <span class="hljs-number">1</span><br><span class="hljs-number">0</span><br><span class="hljs-number">3.1</span> % <span class="hljs-number">1</span><br><span class="hljs-number">0.10000000000000009</span><br><span class="hljs-title class_">NaN</span> % <span class="hljs-number">1</span><br><span class="hljs-title class_">NaN</span><br></code></pre></td></tr></table></figure><p>不正确的一个方案是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">isInteger</span>(<span class="hljs-params">x</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">parseInt</span>(x, <span class="hljs-number">10</span>) === x;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>这种方案在大多数情况不暴露问题，但当x相当大的时候无法正常工作，因为parseInt在解析数字之前强制其第一个参数到字符串，所以当数字十分大时，其字符串表达形式为指数形式（1e+21），此时parseInt去解析1e+21，当达到e时则停止，会只返回1</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">String</span>(<span class="hljs-number">10000000000000000000000000</span>)<br><span class="hljs-built_in">parseInt</span>(<span class="hljs-number">10000000000000000000000000</span>)<br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次失眠</title>
    <link href="/wilson-blog-hexo/2018/02/14/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B1%E7%9C%A0/"/>
    <url>/wilson-blog-hexo/2018/02/14/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B1%E7%9C%A0/</url>
    
    <content type="html"><![CDATA[<p>关于一次莫名失眠的研究和总结</p><span id="more"></span><h3 id="失眠定义"><a href="#失眠定义" class="headerlink" title="失眠定义"></a>失眠定义</h3><h3 id="睡眠障碍分类"><a href="#睡眠障碍分类" class="headerlink" title="睡眠障碍分类"></a>睡眠障碍分类</h3><ul><li><p>失眠——该睡的时候睡不着</p></li><li><p>嗜睡——该醒的时候非要睡</p></li><li><p>梦游——睡着了还到处溜达</p></li><li><p>日夜颠倒——白天睡觉晚上嗨</p></li></ul><p>失眠属于睡眠障碍的一种</p><h3 id="失眠人口现状"><a href="#失眠人口现状" class="headerlink" title="失眠人口现状"></a>失眠人口现状</h3><p>10%-30%</p><h3 id="医学定义"><a href="#医学定义" class="headerlink" title="医学定义"></a>医学定义</h3><p>失眠就是睡眠启动和维持障碍，导致睡眠质量不能满足个体需要，并影响日常社会功能的一种状况。</p><h3 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h3><ul><li><p>睡眠启动：进入睡眠状态</p></li><li><p>睡眠维持：持续多久不醒</p></li><li><p>睡眠质量：睡醒后感受如何</p></li><li><p>不能满足个体需求：睡眠时间和质量都不足</p></li><li><p>影响日间社会功能：正常生活受影响</p></li></ul><h3 id="失眠影响"><a href="#失眠影响" class="headerlink" title="失眠影响"></a>失眠影响</h3><ul><li><p>记忆力差</p></li><li><p>免疫力降低</p></li><li><p>性功能减退</p></li><li><p>长期失眠可能导致焦虑、抑郁</p></li><li><p>糖尿病、高血压、冠心病等心血管、代谢类疾病</p></li><li><p>严重可能致中风、猝死</p></li></ul><h3 id="睡眠解析"><a href="#睡眠解析" class="headerlink" title="睡眠解析"></a>睡眠解析</h3><h4 id="睡眠过程"><a href="#睡眠过程" class="headerlink" title="睡眠过程"></a>睡眠过程</h4><ul><li>睡眠启动：一般30分钟完成</li></ul><p>浅睡眠——脑电波不活跃、眼动少——非快动眼睡眠，持续80-120分钟——体力恢复阶段</p><p>深睡眠——大脑活跃、眼睛时不时出现快速转动——快动眼睡眠，持续5-30分钟——精力恢复阶段</p><p>上述二者共2小时左右，整个晚上重复3-5个周期</p><h4 id="睡眠组成"><a href="#睡眠组成" class="headerlink" title="睡眠组成"></a>睡眠组成</h4><p>8小时组成：6小时非快动眼睡眠+2小时快动眼睡眠</p><p>若快动眼睡眠质量差，则影响精力恢复</p><h3 id="什么偷走了睡眠"><a href="#什么偷走了睡眠" class="headerlink" title="什么偷走了睡眠"></a>什么偷走了睡眠</h3><p>生物钟紊乱</p><p>从古至今，日出而作，日落而息的规律被写进基因，就是生物钟</p><h4 id="表现"><a href="#表现" class="headerlink" title="表现"></a>表现</h4><ul><li><p>到吃饭时间会饿</p></li><li><p>到睡眠时间会困</p></li><li><p>到起床时间会醒</p></li></ul><h4 id="生物钟对睡眠影响的核心——褪黑素"><a href="#生物钟对睡眠影响的核心——褪黑素" class="headerlink" title="生物钟对睡眠影响的核心——褪黑素"></a>生物钟对睡眠影响的核心——褪黑素</h4><p>褪黑素由大脑中松果体分泌，当褪黑素增多，人会变困睡觉；该起床时，生物钟提前通知松果体减少褪黑素的分泌，褪黑素减少，人会醒来。</p><p>如果人在夜晚该睡觉的时候做其他事，就会打破生物钟，长此以往，就会导致生物钟紊乱</p><h5 id="生物钟紊乱表现"><a href="#生物钟紊乱表现" class="headerlink" title="生物钟紊乱表现"></a>生物钟紊乱表现</h5><ul><li><p>长痘</p></li><li><p>口腔溃疡</p></li><li><p>上火</p></li></ul><h4 id="大脑皮层过度兴奋"><a href="#大脑皮层过度兴奋" class="headerlink" title="大脑皮层过度兴奋"></a>大脑皮层过度兴奋</h4><p>大脑启动睡眠，先是进入脑电波不活跃的浅睡期，所以大脑皮层的过度兴奋会导致进入睡眠受影响</p><h4 id="腺苷作用被阻断"><a href="#腺苷作用被阻断" class="headerlink" title="腺苷作用被阻断"></a>腺苷作用被阻断</h4><p>细胞代谢、人体运动都需要<strong>能量</strong></p><p>细胞相当于汽车，进入细胞的糖相当于原油</p><p>汽车需要提纯后的汽油，细胞需要糖分解后的ATP</p><p>汽油燃烧后产生排放物，ATP利用后的产物为腺苷，腺苷可以被再次利用合成ATP</p><h5 id="腺苷对睡眠的影响"><a href="#腺苷对睡眠的影响" class="headerlink" title="腺苷对睡眠的影响"></a>腺苷对睡眠的影响</h5><p>腺苷在人体堆积越多，人越想睡觉</p><p>实例：白天运动多、体力活多，腺苷堆积多，晚上容易睡眠</p><h6 id="特殊影响"><a href="#特殊影响" class="headerlink" title="特殊影响"></a>特殊影响</h6><p>咖啡、茶等含有咖啡因的东西能阻断腺苷催眠的作用，使腺苷对睡眠失去意义</p><h3 id="导致失眠因素"><a href="#导致失眠因素" class="headerlink" title="导致失眠因素"></a>导致失眠因素</h3><ul><li><p>疾病因素：感冒、发炎导致身体不适</p></li><li><p>精神因素：挫折、压力、恐惧、无奈、焦虑、愤怒、忧伤等情绪导致大脑皮层活跃</p></li><li><p>不良生活习惯：咖啡因、太饱、太饿、肠胃不适、刺激性活动</p></li><li><p>环境因素：环境嘈杂、房间拥挤、光线过强、床不适、温度不适</p></li></ul><h3 id="失眠治疗"><a href="#失眠治疗" class="headerlink" title="失眠治疗"></a>失眠治疗</h3><p>医学定义的失眠：</p><ol><li><p>每次入睡超过半小时，晚上醒来不止一次，醒后超过30分钟不能接着睡、多梦</p></li><li><p>白天头晕没力气，疲劳想睡觉、注意力不集中、工作能力下降</p></li><li><p>每周失眠3次以上，至少持续一个月</p></li></ol><p>若都符合则需求助医疗治疗</p><h4 id="治疗手段"><a href="#治疗手段" class="headerlink" title="治疗手段"></a>治疗手段</h4><ul><li><p>药物治疗</p><ul><li><p>安眠药</p></li><li><p>褪黑素</p></li></ul></li><li><p>非药物治疗</p><ol><li><p>刺激控制疗法：建立睡觉和床的关联性</p><ol><li><p>只在有睡意时上床</p></li><li><p>不在床上做与睡觉无关的东西</p></li><li><p>无论睡眠如何，固定时间起床</p></li></ol></li><li><p>松弛疗法：放松身心，缓解焦虑、紧张等不良因素</p><ul><li><p>练气功</p></li><li><p>做瑜伽</p></li><li><p>听舒缓音乐</p></li></ul></li><li><p>芳香疗法：</p><ul><li><p>茉莉花</p></li><li><p>薰衣草</p></li><li><p>迷迭香</p></li><li><p>香薰灯、香薰炉、香薰包、薰衣草枕头</p></li></ul></li><li><p>食疗法：</p><ul><li><p>莲子</p></li><li><p>百合</p></li><li><p>红枣</p></li><li><p>桂圆</p></li></ul></li><li><p>中医：养心安神</p><ul><li><p>中药调理</p></li><li><p>针灸</p></li><li><p>推拿</p></li><li><p>穴位贴敷</p></li></ul></li></ol></li></ul>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于hexo阅读次数统计及访问次数插件使用</title>
    <link href="/wilson-blog-hexo/2018/02/13/%E5%85%B3%E4%BA%8Ehexo%E9%98%85%E8%AF%BB%E6%AC%A1%E6%95%B0%E7%BB%9F%E8%AE%A1%E5%8F%8A%E8%AE%BF%E9%97%AE%E6%AC%A1%E6%95%B0%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
    <url>/wilson-blog-hexo/2018/02/13/%E5%85%B3%E4%BA%8Ehexo%E9%98%85%E8%AF%BB%E6%AC%A1%E6%95%B0%E7%BB%9F%E8%AE%A1%E5%8F%8A%E8%AE%BF%E9%97%AE%E6%AC%A1%E6%95%B0%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>前一段时间换域名，发现博客的访问次数不显示了，一开始没时间关注，最近闲了，研究一下到底是怎么回事，发现原来当初这里不是基于本地配置，而是使用leancloud进行统计，查阅到一篇很易懂的教程，顺便整理了一下PV和UV的统计</p><span id="more"></span><h3 id="核心原理"><a href="#核心原理" class="headerlink" title="核心原理"></a>核心原理</h3><p>hexo很多配置基于配置文件和第三方插件，而配置文件的格式又是类似大多数模板语言的格式，比如javaweb中的jsp标签，还有basic中的if和endif，仔细研究其中的一些配置，其实都可以很好的定制化和hackable</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><p><a href="http://www.jeyzhang.com/hexo-next-add-post-views.html">http://www.jeyzhang.com/hexo-next-add-post-views.html</a></p></li><li><p><a href="https://leancloud.cn/">https://leancloud.cn/</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>瞎鼓捣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>其他</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信公众号和小程序开发</title>
    <link href="/wilson-blog-hexo/2018/02/13/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%92%8C%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    <url>/wilson-blog-hexo/2018/02/13/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%92%8C%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<p>关于微信公众号平台使用相关</p><span id="more"></span><h3 id="公众号"><a href="#公众号" class="headerlink" title="公众号"></a>公众号</h3><ul><li><p>个人（订阅号）</p></li><li><p>企业（服务号）</p></li></ul><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><ul><li><p>服务器域名备案</p></li><li><p>官网推荐腾讯云服务器</p></li><li><p>开发者限少于等于15人</p></li></ul><h3 id="流程参考"><a href="#流程参考" class="headerlink" title="流程参考"></a>流程参考</h3><p><a href="https://mp.weixin.qq.com/debug/wxadoc/introduction/index.html">https://mp.weixin.qq.com/debug/wxadoc/introduction/index.html</a></p><h3 id="技术准备"><a href="#技术准备" class="headerlink" title="技术准备"></a>技术准备</h3><ul><li><p>html</p></li><li><p>css</p></li><li><p>javascript</p></li><li><p>python</p></li><li><p>json</p></li><li><p>api</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于javascript的严格模式（use strict）</title>
    <link href="/wilson-blog-hexo/2018/02/12/%E5%85%B3%E4%BA%8Ejavascript%E7%9A%84%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F%EF%BC%88use%20strict%EF%BC%89/"/>
    <url>/wilson-blog-hexo/2018/02/12/%E5%85%B3%E4%BA%8Ejavascript%E7%9A%84%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F%EF%BC%88use%20strict%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>探析javascript中的严格模式</p><span id="more"></span><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>出现于ES5</p><ul><li><p>消除js语言一些<strong>不合理</strong>、<strong>不严谨</strong>的地方，减少一些<strong>怪异</strong>行为</p></li><li><p>消除代码运行<strong>不安全</strong>之处</p></li><li><p>提高<strong>编译</strong>效率，提高<strong>运行</strong>速度</p></li><li><p>未新版本js做铺垫</p></li></ul><h3 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h3><p>第二种运行模式：严格模式</p><h4 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h4><h5 id="转换严格模式"><a href="#转换严格模式" class="headerlink" title="转换严格模式"></a>转换严格模式</h5><p>ES5中引入了严格模式，现已被所有的主流浏览器实现（包括IE10）</p><p>如果想要浏览器按照严格模式解释代码只需要在代码前（代码顶部）加上‘use strict’</p><p>如果想将已存在的代码转换为严格模式需要多做一点工作</p><h5 id="逐步转换"><a href="#逐步转换" class="headerlink" title="逐步转换"></a>逐步转换</h5><p>严格模式被设计来可以逐步转换，可以独立地改变每一个文件，甚至可以逐步地将函数转换为严格模式</p><h5 id="对比严格模式和非严格模式"><a href="#对比严格模式和非严格模式" class="headerlink" title="对比严格模式和非严格模式"></a>对比严格模式和非严格模式</h5><p>实例：</p><p>如下代码在添加了‘use strict’后抛出语言错误</p><ul><li><p>八进制语法：var n &#x3D; 023;</p></li><li><p>with语句</p></li><li><p>在变量名中使用delete：delete myVariable;</p></li><li><p>使用eval或者arguments作为变量或者函数的参数名</p></li><li><p>使用新版本的保留字：implements、interface、let、package、private、protected、public、static和yield</p></li><li><p>在块级域内声明函数：if (a &lt; b) { function f() {} }</p></li><li><p>明显的错误：</p><ul><li><p>在一个对象字内对一个属性声明两次相同的名称：{a: 1. b: 3. a: 7}，这已经不再是ES2015中的情况（<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1041128">bug</a>）</p></li><li><p>使用相同的名称声明两个函数参数：function f(a, b, b) {}</p></li></ul></li></ul><p>这些错误还算好，因为它们能够明显地暴露出错误或者糟糕的实践，它们会在代码运行前发生</p><h5 id="新的运行时错误"><a href="#新的运行时错误" class="headerlink" title="新的运行时错误"></a>新的运行时错误</h5><p>javascript过去常在代码发生错误的地方静默地运行失败，严格模式会在这种情况抛出异常。如果你的代码包含这种情况，测试会变得很有必要以确保没有东西坏掉。然而再一次，会在函数粒度级别再一次发生</p><p>实例：给一个未定义的变量赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">x</span>) &#123;<br><span class="hljs-keyword">var</span> a = <span class="hljs-number">12</span>;<br>b = a + x * <span class="hljs-number">35</span>;<br>&#125;<br><span class="hljs-title function_">f</span>(<span class="hljs-number">42</span>);<br><span class="hljs-literal">undefined</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">x</span>) &#123;<br><span class="hljs-string">&#x27;use strict&#x27;</span>;<br><span class="hljs-keyword">var</span> a = <span class="hljs-number">12</span>;<br>b = a + x * <span class="hljs-number">35</span>;<span class="hljs-comment">// 报错</span><br>&#125;<br><span class="hljs-title function_">f</span>(<span class="hljs-number">42</span>);<br></code></pre></td></tr></table></figure><p>这可能会改变一个全局对象的值，这常常并不是所期望的。如果真的想给一个全局对象设置值，将其作为参数传给它并明确地将其声明为一个属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">x</span>) &#123;<br><span class="hljs-string">&#x27;use strict&#x27;</span>;<br><span class="hljs-keyword">var</span> a = <span class="hljs-number">12</span>;<br>b = a + x * <span class="hljs-number">35</span>;<br>&#125;<br><span class="hljs-title function_">f</span>(<span class="hljs-number">42</span>);<br></code></pre></td></tr></table></figure><p>实例：尝试删除一个非可配置属性</p><p>这种操作会在非严格模式静默地失败，与用户所期望所违背</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">delete</span> <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>;<br><span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-keyword">delete</span> <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>;<br><span class="hljs-title class_">VM361</span>:<span class="hljs-number">2</span> <span class="hljs-title class_">Uncaught</span> <span class="hljs-title class_">TypeError</span>: <span class="hljs-title class_">Cannot</span> <span class="hljs-keyword">delete</span> property <span class="hljs-string">&#x27;prototype&#x27;</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Object</span>(<span class="hljs-params"></span>) &#123; [native code] &#125;<br>    at &lt;anonymous&gt;:<span class="hljs-number">2</span>:<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>实例：有毒害的参数和函数属性</p><p>访问arguments.callee、arguments.caller、anyFunction.caller或者anyFunction.arguments都会在严格模式中抛出异常错误</p><p>唯一合法的用例会是重用一个函数如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> s = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;thing&#x27;</span>).<span class="hljs-property">style</span>;<br>s.<span class="hljs-property">opacity</span> = <span class="hljs-number">1</span>;<br>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">if</span> ((s.<span class="hljs-property">opacity</span>-=<span class="hljs-number">.1</span>) &lt; <span class="hljs-number">0</span>)<br>s.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span>;<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-variable language_">arguments</span>.<span class="hljs-property">callee</span>, <span class="hljs-number">40</span>);<br>&#125;)();<br></code></pre></td></tr></table></figure><p>上述实例见<a href="http://vanilla-js.com/">http://vanilla-js.com/</a></p><p>如果在严格模式中，可以将上述函数重写为如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-keyword">var</span> s = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;thing&#x27;</span>).<span class="hljs-property">style</span>;<br>s.<span class="hljs-property">opacity</span> = <span class="hljs-number">1</span>;<br>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">fadeOut</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">// name the function</span><br>  <span class="hljs-keyword">if</span>((s.<span class="hljs-property">opacity</span>-=<span class="hljs-number">.1</span>) &lt; <span class="hljs-number">0</span>)<br>    s.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span>;<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">setTimeout</span>(fadeOut, <span class="hljs-number">40</span>); <span class="hljs-comment">// use the name of the function</span><br>&#125;)();<br></code></pre></td></tr></table></figure><h5 id="语义上的不同"><a href="#语义上的不同" class="headerlink" title="语义上的不同"></a>语义上的不同</h5><p>这些都是很微妙的不同，可能测试用例不会捕获这种微妙的不同。仔细回看你的代码可能显得必要以确保这些不同不会影响你代码的语义。幸运的是，这种仔细的回看可以变成逐步地应用于函数粒度级别的回看</p><h5 id="函数调用中的this"><a href="#函数调用中的this" class="headerlink" title="函数调用中的this"></a>函数调用中的this</h5><p>在函数调用中，例如f()，this值是全局对象。在严格模式中，现在是undefined。</p><p>当一个函数被使用call或者apply调用时，如果值是原始值，这个值会被装配进一个对象（或者对于undefined或者null的对象）。</p><p>在严格模式中，这个值会被直接传递而不被转换或替换。</p><h5 id="arguments没有被函数参数命名别名"><a href="#arguments没有被函数参数命名别名" class="headerlink" title="arguments没有被函数参数命名别名"></a>arguments没有被函数参数命名别名</h5><p>在非严格模式中，修改arguments对象中的一个值会修改相应的命名参数</p><p>这使得对于javascript引擎的优化变得复杂，同时令代码更难阅读或理解</p><p>在严格模式中，arguments对象被创建并被初始化为同名值而非命名参数，但是对于arguments对象或是命名参数的改变不会彼此影响</p><h5 id="更改为eval"><a href="#更改为eval" class="headerlink" title="更改为eval"></a>更改为eval</h5><p>在严格模式中，eval不会在它被调用的域内创建一个新的变量。当然，在严格模式中，字符串也会被按照严格模式的规则进行评估</p><p>测试需要被彻底地执行以确保一切正常（nothing breaks）</p><p>不要使用eval，除非你真的需要它，这会是一个更务实的解决方案</p><h5 id="严格中立（strictness-neutral）代码"><a href="#严格中立（strictness-neutral）代码" class="headerlink" title="严格中立（strictness-neutral）代码"></a>严格中立（strictness-neutral）代码</h5><p>移动严格代码到严格模式的一个潜在的弊端是可能在那些没有实现严格模式的传统浏览器中语义上存在不同</p><p>在某些稀有场合（比如糟糕的联结或者缩小），你的代码也可能不能运行在你编写和测试的模式中，以下一些规则可以使得你的代码变得严格中立：</p><ol><li><p>以严格模式书写代码并确保没有在严格模式下会抛出的错误</p></li><li><p>原理语义不同</p><ol><li><p>eval：只有在你明白你在做什么的情况下使用它</p></li><li><p>arguments：永远通过名称访问函数的参数或执行一份参数对象的拷贝，比如如下，将这样的声明添加在你函数的第一行</p></li></ol> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> args = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">slice</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">arguments</span>)<br></code></pre></td></tr></table></figure><ol start="3"><li>this：仅在涉及到你创建的对象时使用this</li></ol></li></ol><p>参考链接：</p><ul><li><p><a href="http://www.ruanyifeng.com/blog/2013/01/javascript_strict_mode.html">http://www.ruanyifeng.com/blog/2013/01/javascript_strict_mode.html</a></p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2017年个人技术盘点</title>
    <link href="/wilson-blog-hexo/2018/02/09/2017%E5%B9%B4%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E7%9B%98%E7%82%B9/"/>
    <url>/wilson-blog-hexo/2018/02/09/2017%E5%B9%B4%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E7%9B%98%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<p>关于2017年个人博客点滴的年终总结</p><span id="more"></span><h3 id="提纲"><a href="#提纲" class="headerlink" title="提纲"></a>提纲</h3><p>以下按掌握顺序倒叙整理（即博客浏览顺序），也是博客内容的一个大致归类</p><ul><li><p>React</p></li><li><p>node&amp;npm</p></li><li><p>javascript</p></li><li><p>浏览器缓存</p></li><li><p>mysql</p></li><li><p>网络基础</p></li><li><p>maven</p></li><li><p>linux</p></li><li><p>虚拟机</p></li><li><p>tensorflow</p></li><li><p>设计模式</p></li><li><p>区块链</p></li><li><p>webpack</p></li><li><p>API</p></li><li><p>markdown</p></li><li><p>git</p></li><li><p>负载均衡&amp;反向代理</p></li><li><p>java</p></li><li><p>python</p></li><li><p>es6</p></li></ul><p>以上条目一眼望去有些多，也显得很杂。整体上学习轨迹从后端向前端转移，知识虽杂，但定位于“宽度优先”的学习计划，其实“面儿宽”其实是为了能够对于整个计算机行业技术栈融会贯通，相互影响，以窥全貌。</p><p>接下来将逐一按照上述提纲盘点2017年的58篇博客总结</p><h3 id="详述"><a href="#详述" class="headerlink" title="详述"></a>详述</h3><h4 id="React"><a href="#React" class="headerlink" title="React"></a>React</h4><p>对于React的学习介于前端方面的需求，React目前是前端主流框架之一，因其“小模块组成大应用”的思想，广为大多数公司使用，成为前端开发的必备技能之一。</p><p>关于React的学习共整理两篇——安装篇和快速上手篇，源于学习React官网时的学习总结（基本上是对React官方教程做了一遍个人翻译），初步掌握React主要思想和上手方法，后续将尝试使用React进行项目实际开发，并学习另外主流前端框架以做对比，比如Vue、Angular等。</p><h4 id="node-npm"><a href="#node-npm" class="headerlink" title="node&amp;npm"></a>node&amp;npm</h4><p>npm相比node只能算的上工具，而非技术，但如今介于软件工程的“复用”思想和实际生产的快速迭代要求，“用轮子”的思想是职场必备技能，技术固然可以深入研究，但生产最关注的是产出，在这样的背景下，npm这样的“大社区”为众多前端开发者提供了便利而有力（powerful）的帮助。</p><p>讲到node，便会提到“全栈”这样的字眼，node的诞生意味着javascript这样的脚本语言可以挑战“沉重”的java而成为web开发主要语言成为可能。然而Node的威力却不仅仅如此，关于node生态的学习才刚刚开始，而它的出现及魅力竟足以让我学习java转而投奔node大家族的怀抱。</p><h4 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h4><p>这是一门易懂难精的语言，也是一门未来的语言（因为Node的出现），在学习的过程中，一句MDN的话印象很深刻“它是一门松散的语言，同时也因为其松散而长期被认为是上不了台面的语言，但如今它却有可能因为其松散的特性而变得十分强大”。尤其是伴随着2015发布的ES6的出现，其实是对javascript的“松散”打了“补丁”，简单来说，就是曾经的js的确有很多方面的缺陷而很难成为值得人信赖的web开发语言，但是ES出现的块级域、类概念使得其仅有的缺点从此结束，继而变得优秀。</p><h4 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h4><p>缓存技术是前端性能中的关键技术点，软件的实现是第一步，而从软件使用体验的角度，“性能问题”不可忽视，尤其是如今网络应用的访问流量越来越大，高并发的场景随处可见（微博被鹿晗搞炸）。所以相比十年前，五年前的web仅仅需要完成内容展示即可，如今的web更强调“用户体验”。</p><h4 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h4><p>这是后端技术栈的核心部分，不过前端也需要懂些数据库知识，因为毕竟内容的展示依赖数据的流转，而且如今的chrome浏览器也会有websql、localstorage这样的技术存在，所以互联网行业内几乎没有什么可以单独讨论而与其他技术无关联的技术。</p><h4 id="网络基础"><a href="#网络基础" class="headerlink" title="网络基础"></a>网络基础</h4><p>网络传输相当于web的“硬件”载体，因为web只是软件，说白了就是指令集合，而web被人们所使用，总要基于网络的传输，无论是通过浏览器还是本地客户端，如果没有网络知识的web应用就像是一个没有血肉的骨架</p><h4 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h4><p>这可以算是纯后端的技术，maven相当于前端中的NPM，之所以写maven相关的总结，是因为工作需要。工作中要对父子工程进行重构，涉及到父子工程的包依赖问题，遂整理此文以对其原理有更深入的理解，从而不止是简单地做一枚“搬运工”。</p><h4 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h4><p>这个技术算不上前端，也算不上后端，因为它是系统级的技术，作为一名开发工作者，相比离不开与服务器打交道，从而对于linux的学习以不至于面对服务器操作时显得手忙脚乱，因为长期的Windows用户级系统的使用。</p><h4 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h4><p>对于虚拟机的折腾主要是为了在本地搭建linux环境及熟悉MacOS的使用，都算是工具级别的学习，没什么含量。</p><h4 id="tensorflow"><a href="#tensorflow" class="headerlink" title="tensorflow"></a>tensorflow</h4><p>2017年是人工智能火热的一年，作为技术爱好者，难以仅拘泥于工作所用技术，本着天下技术是一家的想法，新东西也想摸摸，指不定就是未来的主流，对于新技术保持敏锐的嗅觉，总比永远比时代慢一拍要强。</p><h4 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h4><p>这个东西我原本认为属于后端技术栈，但学习以后（阅读《大话设计模式》一书），觉得设计模式其实就是生活，就是生活中总结出的规律，以避免做重复的事情或是低效的事情。设计模式就是编程中的模板，俗话讲的“套路”，编程诞生这么多年，如此之多的优秀coder写了无数代码后整理出的一套经久可用的“代码块”，或说代码结构，对于提高编程效率和编程思想有着很大的帮助。</p><h4 id="区块链"><a href="#区块链" class="headerlink" title="区块链"></a>区块链</h4><p>和tensorflow一样，这也算是一门很潮的“骚”技术，为了不食剩食，永远不被新技术碾压，学习技术之余，对于这门可能改变未来的技术也有所涉猎，翻译了一篇国外关于区块链研究很早（2011年），但今天开来仍旧参考价值相当之大的文章，目前翻译尚未完成，应该完成了近2&#x2F;5的进度。</p><h4 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h4><p>这同样是一项工具技术，相当于后端中的jar，或者Jenkins，我不知道该如何准确地形容它，总之它是一个打包器，但是为什么需要打包器，因为随着前端技术的发展，前端代码的规模量也变得不少于后端代码，而数量大，就需要软件工程式的科学化的整理方式，而将不同的代码块按照特定分类，打成不同的包，即一个个模块，这样一来，整个前端方面的代码的可维护性和可复用性便会得到质的飞跃。</p><h4 id="API"><a href="#API" class="headerlink" title="API"></a>API</h4><p>这是前端和后端的枢纽，优秀的API设计需要丰富的软件整体性思想和远见，良好的API设计可以使得后续开发变得高效可控，所以API设计其实是合理的软件开发的第一步。</p><h4 id="markdown"><a href="#markdown" class="headerlink" title="markdown"></a>markdown</h4><p>这门标记语言，其实也称不上一门语言，因为它并不用来编程，而只是一种用于排版和呈现内容的低门槛HTML，由于建立个人博客而结识这个遍历的工具，作为新一代文本格式，它使得良好可观的排版可以简单快速地生成。</p><h4 id="git"><a href="#git" class="headerlink" title="git"></a>git</h4><p>这既是一门版本管理艺术的技术，又是一项近乎必备的团队协作工具，因其优异于SVN的设计理念，而成为新一代无可匹敌的版本管理工具，同时与其完美配合的最大开源社区github是众多开源爱好开发者思维碰撞的乌托邦</p><h4 id="负载均衡-反向代理"><a href="#负载均衡-反向代理" class="headerlink" title="负载均衡&amp;反向代理"></a>负载均衡&amp;反向代理</h4><p>一开始认为这仅仅属于后端技术，但现在这应该分类于web技术，因为前端开发并不应该“两耳不闻后端事，一心只习前端术”，而应该站在整个web生态的角度，纵观互联网应用的整个生命。尤其是伴随着node的出现，可能带来的一门语言贯穿web，而不分前后端、只有全栈的可能。</p><h4 id="java"><a href="#java" class="headerlink" title="java"></a>java</h4><p>这是我入门编程在学院习得的技术，也是我打开web世界的入口。何况作为如今难逃整个国内仍使用它作为后端基石的现状，毕竟node还尚未撼动其成为主流，鉴于对于web历史的尊重，掌握java也是理解其他语言的前置条件之一。</p><h4 id="python"><a href="#python" class="headerlink" title="python"></a>python</h4><p>这本是我区别于java准备主修的第二门语言，但鉴于javascript的持续火热和前端在国内快速地发展，它便成为我业余编程作为工具的备用语言，我在Coursera完成了python一个学期的学习，并以满分获得在线认证证书，也算是作为python学习的一次考核。</p><h4 id="es6"><a href="#es6" class="headerlink" title="es6"></a>es6</h4><p>这其实应该算是前端开发的核心技术，如果说在2017年，它还算是一门新技术的话，那么站在2018年再看，它其实已经广泛应用于众多前端开发之中，因为有类似Babel这样的东西的存在，es6投入生产的使用变得不再难以接受。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>纵观2017年的学习，不多不少，完成了从后端转为前端的技术栈学习。2018年的计划将是对于某几个前端核心技术进行更加深度地学习，对于前端的技术栈进行更进一步的完善和更多的实践。</p><p>To be learned Items:</p><ul><li><p>Vue</p></li><li><p>angular</p></li><li><p>es6</p></li><li><p>html5&amp;css3</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>盘点</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux常用命令(长期更新)</title>
    <link href="/wilson-blog-hexo/2018/02/07/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0/"/>
    <url>/wilson-blog-hexo/2018/02/07/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0/</url>
    
    <content type="html"><![CDATA[<p>记录一下常用到的linux命令（包含相应Windows中的操作）</p><span id="more"></span><p>wget</p><p>tar</p><p>curl</p><p>yes</p><p>python安装web.py</p><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><p>下载python文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget http:<span class="hljs-regexp">//</span>webpy.org<span class="hljs-regexp">/static/</span>web.py-<span class="hljs-number">0.37</span>.tar.gz<br></code></pre></td></tr></table></figure><p>最新开发版:<a href="https://github.com/webpy/webpy/tarball/master">https://github.com/webpy/webpy/tarball/master</a></p><p>解压</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">tar</span> -zxvf web.py-<span class="hljs-number">0</span>.<span class="hljs-number">37</span>.tar.gz<br></code></pre></td></tr></table></figure><p>安装</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> setup.<span class="hljs-keyword">py</span> install<br></code></pre></td></tr></table></figure><h3 id="windows类似wget的操作"><a href="#windows类似wget的操作" class="headerlink" title="windows类似wget的操作"></a>windows类似wget的操作</h3><p><img src="http://trigolds.com/win1.png"></p><p>参考链接：</p><ul><li><p><a href="http://man.linuxde.net/">http://man.linuxde.net/</a></p></li><li><p><a href="http://www.shouce.ren/api/linux/">http://www.shouce.ren/api/linux/</a></p></li><li><p><a href="https://github.com/jaywcjlove/linux-command">https://github.com/jaywcjlove/linux-command</a></p></li><li><p><a href="https://www.linuxdaxue.com/linux-commands-manual">https://www.linuxdaxue.com/linux-commands-manual</a></p></li></ul><p><a href="http://webpy.org/install.zh-cn">http://webpy.org/install.zh-cn</a></p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React教程——安装篇</title>
    <link href="/wilson-blog-hexo/2018/02/07/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8React/"/>
    <url>/wilson-blog-hexo/2018/02/07/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8React/</url>
    
    <content type="html"><![CDATA[<p>React官网教程系列之前期准备</p><span id="more"></span><h2 id="初尝React"><a href="#初尝React" class="headerlink" title="初尝React"></a>初尝React</h2><p>在线尝试React或在本地开发环境安装React</p><h3 id="在线版"><a href="#在线版" class="headerlink" title="在线版"></a>在线版</h3><p>如果你对React的乐趣在于只是随便玩玩，那你可以使用在线编程环境。在<a href="https://codepen.io/pen?&editors=0010">CodePen</a>或<a href="https://codesandbox.io/s/new">CodeSandbox</a>尝试Hello World模板</p><h3 id="最小HTML模板"><a href="#最小HTML模板" class="headerlink" title="最小HTML模板"></a>最小HTML模板</h3><p>如果你更想使用你自己的文本编辑器，你也可以用下载<a href="https://raw.githubusercontent.com/reactjs/reactjs.org/master/static/html/single-file-example.html">这个</a>HTML文件，编辑它并从你本地浏览器中的文件系统打开它。它会有一个缓慢的代码转换，所以不要在生产中使用它。</p><h3 id="接下来"><a href="#接下来" class="headerlink" title="接下来"></a>接下来</h3><h4 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h4><ul><li><p>前往<a href="https://reactjs.org/docs/hello-world.html">快速上手</a>部分来一步一步按照指引学习React的概念</p></li><li><p>尝试<a href="https://reactjs.org/tutorial/tutorial.html">教程</a>作为一个动手实践机会</p></li></ul><h4 id="完整开发环境"><a href="#完整开发环境" class="headerlink" title="完整开发环境"></a>完整开发环境</h4><p>如果你初次接触React或者仅仅用于实验，上面的轻量解决方案很适合你</p><p>当你准备好使用React去构建你第一个程序时，查阅下面的安装指引。这些安装被设计用来帮助你并获得良好的开发体验，并且可用于生产。它们包括代码检验（linting）、测试和最佳构建（optimizations built-in)；然而它们需要更多的时间和空间来安装</p><ul><li><p>使用React<a href="https://reactjs.org/docs/add-react-to-a-new-app.html">创建一个新的应用</a>：使用一个包含完整特性的开始工具套件创建一个新的应用</p></li><li><p>将React<a href="https://reactjs.org/docs/add-react-to-an-existing-app.html">添加进一个已存在的应用</a>：将React添加进一个构建系统或一个更大的应用</p></li></ul><h5 id="将React添加一个新的应用"><a href="#将React添加一个新的应用" class="headerlink" title="将React添加一个新的应用"></a>将React添加一个新的应用</h5><p>在一个新的应用上使用React启动的最简单方式就是使用一个开始工具套件（strater kit）</p><blockquote><p>这页描述了创建一个你所需要的单页应用，以提供一个舒服的工作流，包含代码检查（linting）、测试和最佳生产以及更多。</p></blockquote><blockquote><p>全特性工具需要一些时间和空间来安装。如果你想要一个轻量环境来用React做实验，查看上面的初尝React方式，一个单一的HTML文件足够开始。</p></blockquote><blockquote><p>最后，如果你不是构建单页应用，你可以将React<a href="https://reactjs.org/docs/add-react-to-an-existing-app.html">添加进已存在的构建管道</a>或者从<a href="https://reactjs.org/docs/cdn-links.html">CDN</a>使用它而<a href="https://reactjs.org/docs/react-without-jsx.html">无需构建</a></p></blockquote><h6 id="创建React应用"><a href="#创建React应用" class="headerlink" title="创建React应用"></a>创建React应用</h6><p><a href="https://github.com/facebook/create-react-app">Create React App</a>是开始构建一个新的React单页应用最好的方式。它建立了你的开发环境，这样你就可以使用到最新的JavaScript特性，提供你一个良好的开发体验，为你最佳化你的生产应用。你将需要机器上安装大于版本6的Node</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">npm</span> <span class="hljs-string">install</span> -<span class="hljs-string">g</span> <span class="hljs-built_in">create-react-app时</span><br><span class="hljs-built_in">create-react-app</span> <span class="hljs-string">my-app</span><br><br><span class="hljs-string">cd</span> <span class="hljs-string">my-app</span><br><span class="hljs-string">npm</span> <span class="hljs-string">start</span><br></code></pre></td></tr></table></figure><p>如果你安装了5.2.0以上版本的npm，你可能使用m<a href="https://www.npmjs.com/package/npx">npx</a>代替</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">npx</span> <span class="hljs-built_in">create-react-app</span> <span class="hljs-string">my-app</span><br><br><span class="hljs-string">cd</span> <span class="hljs-string">my-app</span><br><span class="hljs-string">npm</span> <span class="hljs-string">start</span><br></code></pre></td></tr></table></figure><p>创建React应用不会处理后端逻辑和数据库；它只是创建了一个前端构建管道，所以你可以把它用作任何后端。它底层使用比如<a href="http://babeljs.io/">Babel</a>和<a href="https://webpack.js.org/">Webpack</a>的构建工具，但是只需要零配置就能工作。</p><p>当你准备好部署你的产品，运行npm run build将会在build目录为你的应用创建一个最佳构建。你可以通过它的<a href="https://github.com/facebook/create-react-app#create-react-app-">README</a>和<a href="https://github.com/facebook/create-react-app#create-react-app-">用户手册</a>学习更多关于Create React App</p><h6 id="其他启动工具"><a href="#其他启动工具" class="headerlink" title="其他启动工具"></a>其他启动工具</h6><p>我们创建了一份官方推荐的<a href="https://reactjs.org/community/starter-kits.html">第三方启动工具列表</a></p><p>它们在各自侧重点有些细微不同，但都是生产就绪的、良好维护的并且不需要任何配置就能开始的。</p><p>你也可以查看一个由社区贡献的<a href="https://reactjs.org/community/starter-kits.html#other-starter-kits">其他工具列表</a></p><h6 id="高级使用"><a href="#高级使用" class="headerlink" title="高级使用"></a>高级使用</h6><p>如果你倾向于手动配置一个工程，查阅下一部分的<a href="https://reactjs.org/docs/add-react-to-an-existing-app.html#installing-react">安装React</a></p><h5 id="将React添加进一个已存在的应用"><a href="#将React添加进一个已存在的应用" class="headerlink" title="将React添加进一个已存在的应用"></a>将React添加进一个已存在的应用</h5><p>你无需重写你的应用以开始使用React</p><p>我们推荐添加React进你应用的一块小的部分，比如一个独立的组件，这样你可以在你的用例中看到它是否工作</p><p>虽然React可以被使用于<a href="https://reactjs.org/docs/react-without-es6.html">没有构建管道的情况</a>，但我们推荐建立构建管道，这样你可以提高生产。一个现代的构建管道通常组成：</p><ul><li><p>一个包管理器，比如<a href="https://yarnpkg.com">Yarn</a>或者<a href="https://www.npmjs.com/">npm</a>。这使你能够利用第三方包的浩瀚生态，并轻易地安装或者更新它们</p></li><li><p>一个打包器，比如<a href="https://webpack.js.org/">webpack</a>或者<a href="http://browserify.org/">Browserify</a>。这让你书写模块化的代码并把它们打包到一起成小的包，以使得加载时最优</p></li><li><p>一个编译器，例如<a href="http://babeljs.io/">Babel</a>。它让你书写现代化化JavaScript代码，却仍能工作在旧的浏览器</p></li></ul><h6 id="安装React"><a href="#安装React" class="headerlink" title="安装React"></a>安装React</h6><blockquote><p>一旦安装，我们强烈推荐建立一个<a href="https://reactjs.org/docs/optimizing-performance.html#use-the-production-build">生产构建进程</a>以确保你在生产中使用React的快速版本</p></blockquote><p>我们推荐使用Yarn或者npm来管理前端依赖。如果你初次接触包管理器，<a href="https://yarnpkg.com/en/docs/getting-started">Yarn文档</a>是一个良好开始的地方。</p><p>使用Yarn安装React并运行：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs csharp">yarn <span class="hljs-keyword">init</span><br>yarn <span class="hljs-keyword">add</span> react react-dom<br></code></pre></td></tr></table></figure><p>使用npm安装React并运行：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> init<br><span class="hljs-built_in">npm</span> install --save react react-dom<br></code></pre></td></tr></table></figure><p>Yarn和npm都是从npm注册中心下载</p><blockquote><p>为避免潜在的不兼容问题，所有的react包应该使用相同的版本。（这包括：react、react-dom、react-test-renderer等等）</p></blockquote><h6 id="使ES6和JSX生效"><a href="#使ES6和JSX生效" class="headerlink" title="使ES6和JSX生效"></a>使ES6和JSX生效</h6><p>我们推荐使用伴随Babel的React以使得你使用ES6和JSX在你的JavaScript代码中。ES6是一个现代JavaScript代码的集合，使得开发更简单，JSX是一个使得JavaScript语言和React一起良好工作的拓展</p><p><a href="https://babeljs.io/docs/setup/">Babel安装指引</a>解释了如何配置Babel在许多不同的构建环境。确保你安装<a href="http://babeljs.io/docs/plugins/preset-react/#basic-setup-with-the-cli-">babel-preset-react</a>和<a href="http://babeljs.io/docs/plugins/preset-env/">babel-preset-env</a>并确保它们在你的<a href="http://babeljs.io/docs/usage/babelrc/">.babelrc</a>配置中，你就可以良好工作了。</p><h6 id="使用ES6和JSX的Hello-World"><a href="#使用ES6和JSX的Hello-World" class="headerlink" title="使用ES6和JSX的Hello World"></a>使用ES6和JSX的Hello World</h6><p>我们推荐使用像webpack或Browserify这样的打包器，这样你可以书写模块化代码并它们打包到一起进小的包裹以在加载时最优化</p><p>最小的React例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span>;<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, world!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>,<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>)<br>);<br></code></pre></td></tr></table></figure><p>这份代码将id为root的元素渲染成一个DOM元素，所以你需要在你的HTML文件的某处有<div id="root"></div></p><p>类似的，你可以将你使用任何其他JavaScriptUI库写的已存在的应用中某处的DOM元素内渲染一个React组件</p><p>了解更多关于<a href="https://reactjs.org/docs/integrating-with-other-libraries.html#integrating-with-other-view-libraries">集成React和已存在代码</a></p><h6 id="开发和生产版本"><a href="#开发和生产版本" class="headerlink" title="开发和生产版本"></a>开发和生产版本</h6><p>默认的，React包含许多有帮助的警告。这些警告在开发中非常有用。</p><p>然而，它使得开发版本变得更大更慢，所以你应该当你部署你的应用时使用生产版本。</p><p>学习&lt;a href&#x3D;””<a href="https://reactjs.org/docs/optimizing-performance.html#use-the-production-build%3E%E5%A6%82%E4%BD%95%E8%BE%A8%E5%88%AB%E4%BD%A0%E7%9A%84%E7%BD%91%E7%AB%99%E6%98%AF%E5%90%A6%E6%AD%A3%E5%9C%A8%E6%9C%8D%E5%8A%A1%E6%AD%A3%E7%A1%AE%E7%89%88%E6%9C%AC%E7%9A%84React">https://reactjs.org/docs/optimizing-performance.html#use-the-production-build&gt;如何辨别你的网站是否正在服务正确版本的React</a></a>，还有如何最高效地配置生产构建进程：</p><ul><li><p><a href="https://reactjs.org/docs/optimizing-performance.html#create-react-app">使用Create React App创建一个生产构建</a></p></li><li><p>使用单文件构建创建一个生产构建</p></li><li><p>使用Brunch创建一个生产构建</p></li><li><p>使用Browserify创建一个生产构建</p></li><li><p>使用Rollup创建一个生产构建</p></li><li><p>使用webpack创建一个生产构建</p></li></ul><h6 id="使用CDN"><a href="#使用CDN" class="headerlink" title="使用CDN"></a>使用CDN</h6><p>如果你不想用npm管理客户端包，react和react-dom的npm包也提供了单文件版本在umd目录。详情见<a href="https://reactjs.org/docs/cdn-links.html">CDN页</a></p><h5 id="CDN链接"><a href="#CDN链接" class="headerlink" title="CDN链接"></a>CDN链接</h5><p>React的UMD构建和ReactDOM在CDN之间可用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script crossorigin src=<span class="hljs-string">&quot;https://unpkg.com/react@16/umd/react.development.js&quot;</span>&gt;&lt;/script&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">crossorigin</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>上面的版本仅对开发而言，对于生产不适用。简化和优化生产版本如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script crossorigin src=<span class="hljs-string">&quot;https://unpkg.com/react@16/umd/react.production.min.js&quot;</span>&gt;&lt;/script&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">crossorigin</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/react-dom@16/umd/react-dom.production.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>加载react和react-dom一个特定的版本，用版本号替换16即可</p><h6 id="为什么有crossorigin这个属性"><a href="#为什么有crossorigin这个属性" class="headerlink" title="为什么有crossorigin这个属性"></a>为什么有crossorigin这个属性</h6><p>如果你从CDN提供React服务，我们推荐你保持crossorigin这个属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;script crossorigin src=<span class="hljs-string">&quot;...&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>我们也推荐去确认你正在使用的CDN集的Access-Control-Allow-Origin: *的HTTP头（在HTTP相应头包含）。这使得一个更好的<a href="https://reactjs.org/blog/2017/07/26/error-handling-in-react-16.html">错误处理体验</a>在React16和以后的版本</p><p>参考链接：<a href="https://reactjs.org/docs/try-react.html">https://reactjs.org/docs/try-react.html</a></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工具篇——如何管理node和npm的更新</title>
    <link href="/wilson-blog-hexo/2018/02/07/%E5%A6%82%E4%BD%95%E7%AE%A1%E7%90%86node%E5%92%8Cnpm%E7%9A%84%E6%9B%B4%E6%96%B0/"/>
    <url>/wilson-blog-hexo/2018/02/07/%E5%A6%82%E4%BD%95%E7%AE%A1%E7%90%86node%E5%92%8Cnpm%E7%9A%84%E6%9B%B4%E6%96%B0/</url>
    
    <content type="html"><![CDATA[<p>管理node和npm的更新</p><span id="more"></span><p>今天安装react开发工具，在使用npm安装create-react-app时，被提示更新npm和node的版本以获得更好的体验，瞬间感觉惨遭嫌弃，遂整理一波node和npm管理更新的方式</p><p>先查看node和npm的版本</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span> <span class="hljs-title">--version</span><br></code></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm <span class="hljs-comment">--version</span><br></code></pre></td></tr></table></figure><p>安装nvm</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl -o- https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/creationix/</span>nvm<span class="hljs-regexp">/v0.25.4/i</span>nstall.sh | bash<br></code></pre></td></tr></table></figure><p>这种方式用于类Unix系统</p><p>不过要注意安装后要重新打开终端，否则识别不到nvm，而且其实在安装结束的时候，是有提示文案的（这其实和Windows下在cmd中安装东西后需要重新打开cmd一样）</p><p>nvm主要用于安装node的不同版本，使用如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nvm</span> install <span class="hljs-number">8</span>.<span class="hljs-number">5</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>这样直接安装指定的node版本，还可以</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">nvm <span class="hljs-keyword">install</span> latest<br></code></pre></td></tr></table></figure><p>安装最新版本（但不是最稳定版本，会有新的测试特性），还可以安装稳定版本</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">nvm <span class="hljs-keyword">install</span> stable<br></code></pre></td></tr></table></figure><p>Windows的nvm还可以下载node多个版本并进行选择使用哪个版本（和linux不同，安装新的版本必须替换掉旧的版本，同时只能存在一个版本）</p><p>windows-nvm<a href="https://github.com/coreybutler/nvm-windows/releases">下载地址</a></p><p>同样，下载某个你需要的版本</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nvm</span> install <span class="hljs-number">8</span>.<span class="hljs-number">5</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>结束后会提示你可以通过命来切换刚下载的版本，此时你也可以在nvm的目录下看到不同版本的node文件夹</p><p>如果不切换，仍会是当前安装的node版本</p><p>可查看当前本地有哪些版本</p><p>切换命令如提示：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nvm</span> use <span class="hljs-number">8</span>.<span class="hljs-number">5</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>相应，删除某个版本</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nvm</span> uninstall <span class="hljs-number">4</span>.<span class="hljs-number">4</span>.<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>另外对于Windows下更新npm到最新版本，如下：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> install <span class="hljs-built_in">npm</span>@latest -g<br></code></pre></td></tr></table></figure><p>参考链接：<a href="https://segmentfault.com/a/1190000007612011">https://segmentfault.com/a/1190000007612011</a></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VMware使用macOS如何全屏</title>
    <link href="/wilson-blog-hexo/2018/02/07/VMware%E4%BD%BF%E7%94%A8macOS%E5%A6%82%E4%BD%95%E5%85%A8%E5%B1%8F/"/>
    <url>/wilson-blog-hexo/2018/02/07/VMware%E4%BD%BF%E7%94%A8macOS%E5%A6%82%E4%BD%95%E5%85%A8%E5%B1%8F/</url>
    
    <content type="html"><![CDATA[<p>如何解决VMware安装VMware Tools后仍不能全屏显示的问题</p><span id="more"></span><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>macOS10.11上启动了一个SIP(System Integrity Protection，系统集成保护)</p><p>它防止&#x2F;library&#x2F;perferences&#x2F;systemconfiguration&#x2F;com.apple.Boot.plist文件被修改</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>启动macOS过程中进入recovery console（启动系统时按住command+R，windows系统则按住开始键+R，直至看到苹果标志即可松手）</p><p>选择实用工具，打开终端</p><p>关闭SIP，重启</p><p>Bingo！</p><p>参考链接：<a href="http://trigolds.com/mac0.jpg">http://trigolds.com/mac0.jpg</a></p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>macOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于浏览器缓存</title>
    <link href="/wilson-blog-hexo/2018/02/02/%E5%85%B3%E4%BA%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/"/>
    <url>/wilson-blog-hexo/2018/02/02/%E5%85%B3%E4%BA%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<p>探讨浏览器缓存相关</p><span id="more"></span><h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><ul><li><p>cookie</p></li><li><p>浏览器缓存</p></li><li><p>localStorage</p></li><li><p>sessionStorage</p></li></ul><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>提高前端访问<strong>性能</strong>——优秀的<strong>缓存策略</strong></p><p>好处：</p><ul><li><p>缩短网页请求资源的距离</p></li><li><p>减少延迟</p></li><li><p>缓存文件重复使用</p></li><li><p>减少带宽</p></li><li><p>降低网络负荷</p></li></ul><h3 id="web缓存分类"><a href="#web缓存分类" class="headerlink" title="web缓存分类"></a>web缓存分类</h3><ul><li><p>数据库缓存</p></li><li><p>代理服务器缓存</p></li><li><p>CDN缓存</p></li><li><p>浏览器缓存</p></li></ul><p>实例：</p><p>浏览器向代理服务器发起web请求，代理服务器将请求转发到源服务器，此处使用<strong>共享缓存</strong>，使得多处地方可以使用相同的缓存，节省流量</p><h3 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h3><p>实例：</p><p>浏览器缓存是将文件保存在<strong>客户端</strong>，同一个会话过程中检查缓存副本是否足够新，在<strong>后退</strong>网页时，访问过的资源可从缓存中取。</p><p>性能提升点：通过<strong>减少</strong>服务器<strong>请求</strong>的数量，获得<strong>更快</strong>的访问体验</p><h4 id="缓存决定因素"><a href="#缓存决定因素" class="headerlink" title="缓存决定因素"></a>缓存决定因素</h4><p>页面的缓存状态由header决定，重要参数如下：</p><ol><li><p>Cache-Control</p></li><li><p>Expires</p></li><li><p>Last-modified</p></li><li><p>ETag</p></li></ol><h5 id="1-Cache-Control"><a href="#1-Cache-Control" class="headerlink" title="1.Cache-Control"></a>1.Cache-Control</h5><p>可配置选项如下：</p><ul><li><p>max-age</p></li><li><p>s-maxage</p></li><li><p>public</p></li><li><p>private</p></li><li><p>no-cache</p></li><li><p>no-store</p></li><li><p>must-revalidate</p></li><li><p>…</p></li></ul><h6 id="总体关联"><a href="#总体关联" class="headerlink" title="总体关联"></a>总体关联</h6><ul><li>max-age</li></ul><p>单位：s</p><p>含义：缓存最大有效时间</p><p>特点：会覆盖掉Expires，并且在缓存有效时间内，即使服务器上资源发生变更，浏览器也不会得到通知</p><ul><li>s-maxage</li></ul><p>同max-age，但仅用于共享缓存（例如CDN缓存）</p><p>实例：s-maxage&#x3D;60，则60s内即使CDN内容更新，浏览器也不会再次请求</p><p>对比max-age：</p><p>max-age用于普通缓存，s-maxage用于代理缓存</p><p>特点：s-maxage会覆盖掉max-age和Expires</p><ul><li>public</li></ul><p>响应会被缓存，且在多用户间共享</p><p>若未指定public还是private，默认为public</p><ul><li>private</li></ul><p>相应会被缓存，且不在用户间共享</p><p>实例：要求HTTP认证，相应会自动设置为private</p><ul><li>no-cache</li></ul><p>指定响应资源不进行缓存</p><p>注意：仅设置no-cache不代表浏览器不缓存，而是在缓存前要向服务器确认资源是否变更</p><p>实例：若想防止缓存，可设置no-cache private 过期时间设置为已过去的时间（不会到达）</p><p>-no-store</p><p>绝对禁止缓存，每次请求资源都从服务器重新获取</p><ul><li>must-revalidate</li></ul><p>若页面过期，则需重新去服务器获取</p><h5 id="2-Expires"><a href="#2-Expires" class="headerlink" title="2.Expires"></a>2.Expires</h5><p>缓存过期时间（指定资源到期时间，在此时间前浏览器可从浏览器缓存取资源，而无需再次请求），是<strong>服务器端</strong>具体时间点</p><p>Expires &#x3D; max-age + 请求时间</p><p>需结合Last-modified结合使用</p><p>优先级：Cache-Control &gt; Expires</p><h5 id="3-Last-Modified"><a href="#3-Last-Modified" class="headerlink" title="3.Last-Modified"></a>3.Last-Modified</h5><p><strong>服务器端</strong>文件最后修改时间，需和Cache-Control共同使用</p><p>可检查服务器端资源是否变更</p><p>浏览器再次发出请求时，会向服务器发送If-Modified-Since报头，以询问Last-Modified时间点后该资源是否变更，若未变更，则返回304，使用缓存；若变更，则重新向服务器请求资源，返回200</p><h5 id="4-ETag"><a href="#4-ETag" class="headerlink" title="4.ETag"></a>4.ETag</h5><p>根据资源文件<strong>内容</strong>生成<strong>hash</strong>，用于标识<strong>资源状态</strong>，<strong>服务器端</strong>产生</p><p>浏览器再次访问服务端时会带上ETag，以验证资源是否变更</p><img src="http://trigolds.com/cache2.jpg" width="70%"><p>优势：解决Last-modified存在的问题</p><ol><li><p>某些服务器不能精确得到资源的最后修改时间，因此无法根据最后修改时间判断资源是否变更</p></li><li><p>资源修改频繁，在秒级下的修改，无法被Last-modified识别到（Last-Modified为秒级）</p></li><li><p>资源最后修改时间改变，但内容未变更，ETag识别为资源未变更（实际上资源的最后修改时间发生变更）</p></li></ol><p>参考链接：</p><ul><li><p><a href="https://segmentfault.com/a/1190000008377508">https://segmentfault.com/a/1190000008377508</a></p></li><li><p><a href="http://www.linuxidc.com/Linux/2016-12/138800.htm">HTTP权威指南</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>浏览器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>浏览器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript知识巩固</title>
    <link href="/wilson-blog-hexo/2018/02/01/js%E7%9F%A5%E8%AF%86%E5%B7%A9%E5%9B%BA/"/>
    <url>/wilson-blog-hexo/2018/02/01/js%E7%9F%A5%E8%AF%86%E5%B7%A9%E5%9B%BA/</url>
    
    <content type="html"><![CDATA[<p>Refresh your JavaScript Knowledge</p><span id="more"></span><h3 id="JavaScript知识巩固"><a href="#JavaScript知识巩固" class="headerlink" title="JavaScript知识巩固"></a>JavaScript知识巩固</h3><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><h5 id="诞生"><a href="#诞生" class="headerlink" title="诞生"></a>诞生</h5><p>JavaScript于1995年被网景的一名工程师Brendan Eich所创造</p><p>第一次发布于1996年早期的Netscape 2</p><p>最初叫LiveScript</p><p>但由于不幸的营销决策，为了利用Java的热度，而改名为JavaScript（但与Java毫无联系）</p><h5 id="发展历程"><a href="#发展历程" class="headerlink" title="发展历程"></a>发展历程</h5><p>几个月后，微软在IE 3中发布了JScript</p><p>几个月后，网景向ECMA（欧洲标准组织）国际组织提交了JavaScript</p><p>于是在那一年诞生了ECMAScript标准的第一个版本</p><p>这个标准在1999年收到了一个具有象征意义的更新，定为ECMAScript第三版本，从那以后版本趋于稳定</p><p>由于有关语言复杂性的政治分歧，第四个版本被废弃掉</p><p>随后第四版本的许多部分成为了第五个版本的基础，发版于2009年12月</p><p>第六版发布于2015年6月</p><h5 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h5><p>不像大多数语言，JavaScript没有输入和输出的概念</p><p>它被设计用来在宿主环境作为一种脚本语言运行，并且由宿主环境决定其与外部世界沟通的机制</p><p>最普遍的宿主环境是<strong>浏览器</strong></p><p>但JavaScript解释器还能在以下地方找到：</p><ul><li><p>Adobe Acrobat</p></li><li><p>Adobe Photoshop</p></li><li><p>SVG images（矢量图）</p></li><li><p>Yahoo’s Widget engine（雅虎组件引擎）</p></li><li><p>服务端环境，例如Node.js</p></li><li><p>非关系型数据库，例如开源的Apache CouchDB</p></li><li><p>嵌入式计算机</p></li><li><p>复杂的桌面环境，例如GNOME（GNU&#x2F;Linux操作系统最著名的图形界面系统之一）</p></li><li><p>其他</p></li></ul><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>JavaScript是一种多范式、动态语言，拥有类型、操作符、标准内建对象和方法</p><p>它的语法基于Java和C（许多这二者语言的结构都被应用于JavaScript）</p><p>JavaScript支持面向对象编程通过使用对象原型（object prototypes）取代类（更多见**<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain">原型继承</a><strong>和ES2015</strong><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes">类</a>**概念）</p><p>JavaScript也支持函数式编程——函数是对象，给予函数容纳可执行代码的能力并将像其他对象一样进行传递</p><h5 id="JavaScript类型"><a href="#JavaScript类型" class="headerlink" title="JavaScript类型"></a>JavaScript类型</h5><ol><li><p>Number</p></li><li><p>String</p></li><li><p>Boolean</p></li><li><p>Function</p></li><li><p>Object</p></li><li><p>Symbol（ES2015新加）</p></li></ol><p>技术上更严谨的分类如下：</p><ol><li><p>Number</p></li><li><p>String</p></li><li><p>Boolean</p></li><li><p>Symbol（ES2015新加）</p></li><li><p>Object</p><ul><li><p>Function</p></li><li><p>Array</p></li><li><p>Date</p></li><li><p>RegExp</p></li><li><p>Math</p></li></ul></li><li><p>null</p></li><li><p>undefined</p></li></ol><p>还有一些内建的Error类型</p><h6 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h6><p>JavaScript的Numbers是double-precision 64-bit format IEEE 754 values</p><p>由于这个特点，JavaScript中没有整型，所以在C或Java中使用到的算数运算要在JavaScript中留意</p><p>比如：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0</span>.<span class="hljs-number">1</span>+<span class="hljs-number">0</span>.<span class="hljs-number">2</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">30000000000000004</span><br></code></pre></td></tr></table></figure><p>实践中，整型值会被当做32位整数，并且甚至有些实现以这种方式存储，直到被要求去执行一条在Number上有效但在32位整型上无效的指令，这对于位运算来说很重要</p><blockquote><p>原文：In practice, integer values are treated as 32-bit ints, and some implementations even store it that way until they are asked to perform an instruction that’s valid on a Number but not on a 32-bit integer. This can be important for bit-wise operations.</p></blockquote><p>标准的算数运算符被支持，包括加、减、取模、取余等等</p><p>内建对象Math提供了高级数学运算函数和常量</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">Math.<span class="hljs-built_in">sin</span>(<span class="hljs-number">3.5</span>);<br>-<span class="hljs-number">0.35078322768961984</span><br></code></pre></td></tr></table></figure><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">r</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span><span class="hljs-comment">;</span><br>var circumference <span class="hljs-operator">=</span> <span class="hljs-number">2</span> * Math.PI * r<span class="hljs-comment">;</span><br>console.log(circumference)<br></code></pre></td></tr></table></figure><p>使用内建函数parseInt()可以将一个字符串转换为整型数，但是要注意给该函数指定第二个参数（要转换的进制），如果不填会得到意想不到的结果</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">parseInt</span><span class="hljs-params">(<span class="hljs-string">&#x27;010&#x27;</span>)</span></span><br><span class="hljs-number">10</span><br><span class="hljs-function"><span class="hljs-title">parseInt</span><span class="hljs-params">(<span class="hljs-string">&#x27;0x10&#x27;</span>)</span></span><br><span class="hljs-number">16</span><br><span class="hljs-function"><span class="hljs-title">parseInt</span><span class="hljs-params">(<span class="hljs-string">&#x27;010&#x27;</span>, <span class="hljs-number">8</span>)</span></span><br><span class="hljs-number">8</span><br><span class="hljs-function"><span class="hljs-title">parseInt</span><span class="hljs-params">(<span class="hljs-string">&#x27;0x10&#x27;</span>, <span class="hljs-number">16</span>)</span></span><br><span class="hljs-number">16</span><br><span class="hljs-function"><span class="hljs-title">parseInt</span><span class="hljs-params">(<span class="hljs-string">&#x27;11&#x27;</span>,<span class="hljs-number">2</span>)</span></span><br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>转换为八进制省略第二个参数的方式在2013年后被废除，但十六进制忽略第二个参数的用法仍存在，因为可以识别到十六进制前缀<code>0x</code></p><p>还有内建函数parseFloat用于将字符串转换为浮点数，但不同于parseInt()，它总是默认以十进制方式转换</p><p>另外，还可以通过一元运算符<code>+</code>将值转换为数值</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">parseFloat</span>(<span class="hljs-string">&#x27;12.34&#x27;</span>)<br><span class="hljs-number">12.34</span><br>+ <span class="hljs-string">&#x27;56.78&#x27;</span>;<br><span class="hljs-number">56.78</span><br>+ <span class="hljs-string">&#x27;0x10&#x27;</span><br><span class="hljs-number">16</span><br>+ <span class="hljs-string">&#x27;42&#x27;</span><br><span class="hljs-number">42</span><br></code></pre></td></tr></table></figure><p>如果字符串是非数值，转换会返回一个特殊值NaN（Not a Number）</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">parseInt</span><span class="hljs-params">(<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-number">10</span>)</span></span><br>NaN<br></code></pre></td></tr></table></figure><p>如果将NaN作为输入，做任何算数运算所得都是NaN</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">parseInt</span><span class="hljs-params">(<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-number">10</span>)</span></span> + <span class="hljs-number">5</span><br>NaN<br></code></pre></td></tr></table></figure><p>可通过内建函数isNaN()判定是否为NaN</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">isNaN</span>(<span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-number">10</span>) + <span class="hljs-number">5</span>)<br><span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>JavaScript还提供了特殊值：Infinity和-Infinity</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-number">1</span> / <span class="hljs-number">0</span><span class="hljs-comment">;</span><br>Infinity<br>-<span class="hljs-number">1</span> / <span class="hljs-number">0</span><span class="hljs-comment">;</span><br>-Infinity<br></code></pre></td></tr></table></figure><p>可以使用内建函数isFinite()判断Infinity、-Infinity和NaN</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">isFinite</span>(<span class="hljs-number">1</span> / <span class="hljs-number">0</span>);<br><span class="hljs-literal">false</span><br><span class="hljs-built_in">isFinite</span>(<span class="hljs-number">-1</span> / <span class="hljs-number">0</span>);<br><span class="hljs-literal">false</span><br><span class="hljs-built_in">isFinite</span>(<span class="hljs-literal">NaN</span>);<br><span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><blockquote><p>parseInt()、parseFloat()和<code>+</code>的区别：前两者会将字符串转换，直到遇到不是有效的数字止，而<code>+</code>会直接将字符串转换为NaN如果字符串内包含无效字符</p></blockquote><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;10.2abc&#x27;</span>);<br><span class="hljs-number">10</span><br>+ <span class="hljs-string">&#x27;10.2abc&#x27;</span><br><span class="hljs-literal">NaN</span><br></code></pre></td></tr></table></figure><h6 id="String"><a href="#String" class="headerlink" title="String"></a>String</h6><p>JavaScript中的字符串是Unicode字符序列，这对于处理国家化问题来说很方便，更准确地讲，是sequences of UTF-16 code units，每一个码单元通过一个16位数字呈现，每一个Unicode字符通过1个或2个码单元呈现</p><p>如果想呈现一个单字符，只需要使用一个包含单个字符的字符串</p><p>如果想知道一个（码单元中的）字符串的长度，访问其length属性</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-string">&#x27;hello&#x27;</span>.<span class="hljs-built_in">length</span><br><span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>字符串也可当做对象，并通过方法来操作字符串的信息</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-string">&#x27;hello&#x27;</span>.charAt(<span class="hljs-number">0</span>);<br><span class="hljs-string">&quot;h&quot;</span><br><span class="hljs-string">&#x27;hello, world&#x27;</span>.<span class="hljs-built_in">replace</span>(<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-string">&#x27;hola&#x27;</span>);<br><span class="hljs-string">&quot;hola, world&quot;</span><br><span class="hljs-string">&#x27;hello&#x27;</span>.toUpperCase();<br><span class="hljs-string">&quot;HELLO&quot;</span><br></code></pre></td></tr></table></figure><h6 id="其他类型"><a href="#其他类型" class="headerlink" title="其他类型"></a>其他类型</h6><p>JavaScript用null表示non-value（并且也仅能通过<code>null</code>访问）</p><p>还有undefined表示一个尚未初始化的值（表示一个还未被赋值的变量）</p><p>如果你声明一个变量，但没对其赋值（assign），这个变量的类型就是undefined，但undefined实际上是一个常量</p><p>JavaScript还有一个布尔类型，只有两个值，true和false</p><p>任何值都能被转换成一个布尔值通过以下方式：</p><ol><li><p>false、0、空字符串（””）、NaN、null和undefined</p></li><li><p>所以其他都被判定为布尔中的true</p></li></ol><p>使用Boolean()函数来具体实现</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">Boolean</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br><span class="hljs-literal">false</span><br><span class="hljs-built_in">Boolean</span>(<span class="hljs-number">234</span>);<br><span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>这很少情况需要这样处理，当JavaScript期望一个布尔值时，会静默执行布尔转换，例如<code>if</code>statement</p><p>布尔操作符，例如&amp;&amp;（逻辑与）、||（逻辑或）和！（逻辑非）都被支持</p><h6 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h6><p>JavaScript通过三个关键字声明新的变量：let、const和var</p><p>let允许声明块级变量，其声明的变量仅在封闭块中有效</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">for (let i = <span class="hljs-number">1</span><span class="hljs-comment">; i &lt; 5; i++) &#123;</span><br>  console.log(i)<span class="hljs-comment">;</span><br>&#125;<br>console.log(i)<span class="hljs-comment">;</span><br><span class="hljs-symbol">VM959:</span><span class="hljs-number">2</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">VM959:</span><span class="hljs-number">2</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">VM959:</span><span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">VM959:</span><span class="hljs-number">2</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">VM959:</span><span class="hljs-number">4</span> Uncaught ReferenceError: i is not defined<br>    at &lt;anonymous&gt;:<span class="hljs-number">4</span>:<span class="hljs-number">13</span><br></code></pre></td></tr></table></figure><p>const允许声明永远不会企图改变的变量，并且也仅在所声明的块范围内有效</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-keyword">for</span> (const j = <span class="hljs-number">2</span>; j &lt; <span class="hljs-number">4</span>; j++) &#123;<br>  console.<span class="hljs-built_in">log</span>(j);<br>&#125;<br>console.<span class="hljs-built_in">log</span>(j);<br>VM1175:<span class="hljs-number">2</span> <span class="hljs-number">2</span><br>VM1175:<span class="hljs-number">1</span> Uncaught TypeError: Assignment <span class="hljs-keyword">to</span> <span class="hljs-built_in">constant</span> variable.<br>    <span class="hljs-keyword">at</span> &lt;anonymous&gt;:<span class="hljs-number">1</span>:<span class="hljs-number">27</span><br></code></pre></td></tr></table></figure><p>var是最通用的声明关键字，它没有let和const的限制</p><p>它是传统JavaScript唯一的声明变量的关键字</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k = <span class="hljs-number">3</span>; k &lt; <span class="hljs-number">7</span>; k ++) &#123;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(k);<br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(k);<br>VM1257:<span class="hljs-number">2</span> <span class="hljs-number">3</span><br>VM1257:<span class="hljs-number">2</span> <span class="hljs-number">4</span><br>VM1257:<span class="hljs-number">2</span> <span class="hljs-number">5</span><br>VM1257:<span class="hljs-number">2</span> <span class="hljs-number">6</span><br>VM1257:<span class="hljs-number">4</span> <span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><p>JavaScript和其他语言（比如Java）很重要的一个区别是代码块并没有域，只有函数才有域</p><p>所以如果在一个compound statement（例如在if控制结构范围内）内使用var声明的变量在整个函数范围内都可见，如上例</p><p>然而，从ES2015开始，let和const的声明允许创建块级域变量</p><h6 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h6><p>JavaScript数值运算符有<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>和<code>%</code></p><p>通过<code>=</code>赋值</p><p>还有一些复合赋值操作，例如<code>+=</code>和<code>-=</code>，这相当于x &#x3D; x + y或x &#x3D; x - y</p><p>你可以使用<code>++</code>和<code>--</code>分别表示递增和递减，这些都可以被用作运算符前缀或后缀</p><p><code>+</code>运算符还可用作字符串连接符</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">&#x27;hello&#x27; + &#x27;world&#x27;;<br><span class="hljs-string">&quot;helloworld&quot;</span><br></code></pre></td></tr></table></figure><p>如果你把一个字符串追加于一个数字或其他值，都会首先被转化为一个字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&#x27;3&#x27;</span> + <span class="hljs-number">4</span> + <span class="hljs-number">5</span>;<br><span class="hljs-string">&quot;345&quot;</span><br><span class="hljs-number">3</span> + <span class="hljs-number">4</span> + <span class="hljs-string">&#x27;5&#x27;</span>;<br><span class="hljs-string">&quot;75&quot;</span><br></code></pre></td></tr></table></figure><p>为某个值追加一个空字符串是一个将其转换为字符串的方式</p><p>JavaScript使用<code>&lt;</code>、<code>&gt;</code>、<code>&lt;=</code>和<code>&gt;=</code>进行比较操作</p><p>这些既对字符串有效，也对数字有效</p><p>判断两个值相等并不是那么直接，如果给双等运算符<code>==</code>两个不同类型的值，会表现出类型约制</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">123</span> == <span class="hljs-string">&#x27;123&#x27;</span>;<br><span class="hljs-literal">true</span><br><span class="hljs-number">1</span> == <span class="hljs-literal">true</span>;<br><span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>为避免约制，使用三等运算符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">123</span> === <span class="hljs-string">&#x27;123&#x27;</span>;<br><span class="hljs-literal">false</span><br><span class="hljs-number">1</span> === <span class="hljs-literal">true</span>;<br><span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>还有!&#x3D;和!&#x3D;&#x3D;</p><p>JavaScript还有**<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators">位运算符</a>**</p><h6 id="控制结构"><a href="#控制结构" class="headerlink" title="控制结构"></a>控制结构</h6><p>JavaScript有一套类似C语言家族的控制结构</p><p>条件语句通过if和else支持</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;hello&#x27;</span>;<br><span class="hljs-keyword">if</span> (name == <span class="hljs-string">&quot;test&quot;</span>) &#123;<br>  name += <span class="hljs-string">&#x27;test&#x27;</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (name == <span class="hljs-string">&#x27;hello&#x27;</span>) &#123;<br>  name += <span class="hljs-string">&#x27;world&#x27;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  name += <span class="hljs-string">&#x27;!&#x27;</span>;<br>&#125;<br>name == <span class="hljs-string">&#x27;helloworld&#x27;</span>;<br><span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>JavaScript拥有while循环和do-while循环，前者用于基本循环，后者用于你想确保循环至少执行一次</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>  <span class="hljs-comment">// an infinite loop!</span><br>&#125;<br><br><span class="hljs-keyword">var</span> input;<br><span class="hljs-keyword">do</span> &#123;<br>  input = <span class="hljs-title function_">get_input</span>();<br>&#125; <span class="hljs-keyword">while</span> (<span class="hljs-title function_">inputIsNotValid</span>(input));<br></code></pre></td></tr></table></figure><p>JavaScript的for循环和C还有Java的一样，使你能够在一行内提供控制信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>  <span class="hljs-comment">// Will execute 5 times</span><br>&#125;<br></code></pre></td></tr></table></figure><p>JavaScript还有两个高级for循环</p><ul><li>for of</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> value <span class="hljs-keyword">of</span> array) &#123;<br>  <span class="hljs-comment">// do something with value</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>for in<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> property <span class="hljs-keyword">in</span> object) &#123;<br>  <span class="hljs-comment">// do something with object property</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>&amp;&amp;和||运算符有短路逻辑，意味着第二个运算值的是否执行决定于第一个运算值</p><p>这有助于检查空对象在访问其属性之前</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">o = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">var</span> name = o &amp;&amp; o.<span class="hljs-title function_">getName</span>();<br><span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><p>或进行缓存值（当假值无效时）??</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">var name</span> = cachedName || (cachedName = getName());<br></code></pre></td></tr></table></figure><p>JavaScript对条件语句拥有一个三元运算符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">age = <span class="hljs-number">19</span>;<br><span class="hljs-keyword">var</span> allowed = (age &gt; <span class="hljs-number">18</span>) ? <span class="hljs-string">&#x27;yes&#x27;</span> : <span class="hljs-string">&#x27;no&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(allowed);<br><span class="hljs-title class_">VM1682</span>:<span class="hljs-number">3</span> yes<br></code></pre></td></tr></table></figure><p><code>switch</code>语句可被用于基于一个数字或字符串的多分支判断</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">switch</span> (action) &#123;<br>  <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;draw&#x27;</span>:<br>    <span class="hljs-title function_">drawIt</span>();<br>    <span class="hljs-keyword">break</span>;<br>  <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;eat&#x27;</span>:<br>    <span class="hljs-title function_">eatIt</span>();<br>    <span class="hljs-keyword">break</span>;<br>  <span class="hljs-attr">default</span>:<br>    <span class="hljs-title function_">doNothing</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>如果你没有添加break语句，将会在该条件下的内容执行后继续向下执行，这可能并不是你想要的，如果你的确想这么做用于调试，请添加注释表明</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">switch</span> (a) &#123;<br>  <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: <span class="hljs-comment">// fallthrough</span><br>  <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>    <span class="hljs-title function_">eatIt</span>();<br>    <span class="hljs-keyword">break</span>;<br>  <span class="hljs-attr">default</span>:<br>    <span class="hljs-title function_">doNothing</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>默认条款是可选的，你在switch部分和case部分都可以有<strong>表达式</strong>，比较会在二者使用了&#x3D;&#x3D;&#x3D;运算符时发生</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">switch</span> (<span class="hljs-number">1</span> + <span class="hljs-number">3</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span> + <span class="hljs-number">2</span>:<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;execute 4&#x27;</span>);<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-attr">default</span>:<br>      <span class="hljs-title function_">neverhappens</span>();<br>&#125;<br><span class="hljs-title class_">VM1831</span>:<span class="hljs-number">3</span> execute <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h6 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h6><p>JavaScript的对象可以理解为一个键值对集合，类似于：</p><ul><li><p>Python中的字典</p></li><li><p>Perl和Ruby中的Hashes</p></li><li><p>C和C++中的哈希表</p></li><li><p>Java中的HashMap</p></li><li><p>PHP中的关联数组</p></li></ul><p>事实上这个数据结构被如此广泛的使用，是其多才多艺的一个佐证</p><p>因为JavaScript中的一切都是对象</p><p>任何JavaScript程序自然包含着一个强大的哈希表查找，这是个好事，因为很快</p><p>JavaScript对象的“键”部分是一个字符串，“值”部分可以是任何值</p><p>这允许你可以构造任意复杂的数据结构</p><p>有两种基本的创建对象的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br></code></pre></td></tr></table></figure><p>和</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123;&#125;;<br></code></pre></td></tr></table></figure><p>这二者语义上相等，后者称为object literal syntax，并且更方便</p><p>这种语法也是JSON格式的核心并总被偏爱</p><p>文字对象语法可以用来完整初始化一个对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;test&#x27;</span>,<br>  <span class="hljs-attr">_for</span>: <span class="hljs-string">&#x27;max&#x27;</span>,<br>  <span class="hljs-attr">details</span>: &#123;<br>    <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;orange&#x27;</span>,<br>    <span class="hljs-attr">size</span>: <span class="hljs-number">12</span><br>  &#125;<br>&#125;;<br>obj<br><br>&#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-attr">_for</span>: <span class="hljs-string">&quot;max&quot;</span>, <span class="hljs-attr">details</span>: &#123;…&#125;&#125;<br></code></pre></td></tr></table></figure><p>属性可被链接到一起</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">obj.<span class="hljs-property">details</span>.<span class="hljs-property">color</span>;<br><span class="hljs-string">&quot;orange&quot;</span><br>obj[<span class="hljs-string">&#x27;details&#x27;</span>][<span class="hljs-string">&quot;color&quot;</span>]<br><span class="hljs-string">&quot;orange&quot;</span><br></code></pre></td></tr></table></figure><p>下面的例子创建了一个对象原型Person和一个原型实例You</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name, age</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>&#125;<br><br><span class="hljs-keyword">var</span> you = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;You&#x27;</span>, <span class="hljs-number">24</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(you);<br><span class="hljs-title class_">VM2069</span>:<span class="hljs-number">7</span> <span class="hljs-title class_">Person</span> &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;You&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">24</span>&#125;<br></code></pre></td></tr></table></figure><p>一经创建，一个对象的属性可被再次访问用以下两种方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">obj.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;magi&#x27;</span>;<br><span class="hljs-keyword">var</span> name = obj.<span class="hljs-property">name</span>;<br><span class="hljs-string">&quot;magi&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">obj[<span class="hljs-string">&quot;name&quot;</span>] = <span class="hljs-string">&#x27;igma&#x27;</span>;<br><span class="hljs-keyword">var</span> name = obj[<span class="hljs-string">&quot;name&quot;</span>];<br><span class="hljs-string">&quot;igma&quot;</span><br><span class="hljs-keyword">var</span> user = <span class="hljs-title function_">prompt</span>(<span class="hljs-string">&#x27;what is your key?&#x27;</span>);<br>obj[user] = <span class="hljs-title function_">prompt</span>(<span class="hljs-string">&#x27;what is your value?&#x27;</span>);<br><span class="hljs-string">&quot;111&quot;</span><br></code></pre></td></tr></table></figure><p>这些也语义上相等，后者优势在于name属性作为一个字符串被提供，意味着可以在运行时被计算</p><p>然而，使用这种方式可以防止了有些JavaScript引擎和优化器被应用</p><p>另外，也因此可以使用关键字来设置和获得属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">obj.<span class="hljs-property">for</span> = <span class="hljs-string">&#x27;Simon&#x27;</span>; <span class="hljs-comment">// Syntax error, because &#x27;for&#x27; is a reserved word</span><br>obj[<span class="hljs-string">&#x27;for&#x27;</span>] = <span class="hljs-string">&#x27;Simon&#x27;</span>; <span class="hljs-comment">// works fine</span><br></code></pre></td></tr></table></figure><blockquote><p>从ECMAScript 5开始，保留字可以用作对象属性名in the buff。这意味着定义对象时不再需要引号来包裹，详情见<a href="http://es5.github.io/#x7.6.1">the ES5 Spec</a></p></blockquote><p>更多关于对象和原型，见<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype">Object.prototype</a></p><p>关于对象原型和对象原型链，见<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain">继承和原型链</a></p><p>从ECMAScript2015开始，对象的键可以被使用括号符的变量定义</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> userPhone = &#123;[<span class="hljs-string">&#x27;phoneType&#x27;</span>]: <span class="hljs-number">12345</span>&#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(userPhone);<br><span class="hljs-title class_">VM2470</span>:<span class="hljs-number">2</span> &#123;<span class="hljs-attr">phoneType</span>: <span class="hljs-number">12345</span>&#125;<br></code></pre></td></tr></table></figure><p>可以代替</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> userPhone = &#123;&#125;;<br>userPhone[<span class="hljs-string">&#x27;phoneType&#x27;</span>] = <span class="hljs-number">12345</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(userPhone);<br><span class="hljs-title class_">VM2505</span>:<span class="hljs-number">3</span> &#123;<span class="hljs-attr">phoneType</span>: <span class="hljs-number">12345</span>&#125;<br></code></pre></td></tr></table></figure><h6 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h6><p>JavaScript中的数组其实一种特殊类型的对象</p><p>和常规的对象非常像（数值属性只能使用[]语法访问）</p><p>但有一个神奇的属性叫做“length”</p><p>其总是比数组最大索引值多一位</p><p>创建数组的方式如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();<br>a[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;dog&#x27;</span>;<br>a[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;cat&#x27;</span>;<br>a[<span class="hljs-number">2</span>] = <span class="hljs-string">&#x27;hen&#x27;</span>;<br>a.<span class="hljs-property">length</span>;<br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>一个更方便的表示方式是使用数组文字（array literal）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = [<span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;hen&#x27;</span>];<br>a.<span class="hljs-property">length</span>;<br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>注意array.length不必是数组项目的个数，考虑下面一种情况</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = [<span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;hen&#x27;</span>];<br>a[<span class="hljs-number">100</span>] = <span class="hljs-string">&#x27;fox&#x27;</span>;<br>a.<span class="hljs-property">length</span>;<br><span class="hljs-number">101</span><br></code></pre></td></tr></table></figure><p>谨记：数组的长度总比数组索引最大值大一位</p><p>如果访问一个不存在的数组索引，会得到一个值为undefined的返回值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">typeof</span> a[<span class="hljs-number">90</span>];<br><span class="hljs-string">&quot;undefined&quot;</span><br></code></pre></td></tr></table></figure><p>如果把上面的[]和length纳入考虑，你可以使用for循环迭代一个数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; a.<span class="hljs-property">length</span>; i++) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a[i]);<br>&#125;<br><span class="hljs-title class_">VM302</span>:<span class="hljs-number">2</span> dog<br><span class="hljs-title class_">VM302</span>:<span class="hljs-number">2</span> cat<br><span class="hljs-title class_">VM302</span>:<span class="hljs-number">2</span> hen<br>97<span class="hljs-attr">VM302</span>:<span class="hljs-number">2</span> <span class="hljs-literal">undefined</span><br><span class="hljs-title class_">VM302</span>:<span class="hljs-number">2</span> fox<br></code></pre></td></tr></table></figure><p>ECMAScript介绍了一种更加简明的循环for of，用来迭代对象，比如数组：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> currentValue <span class="hljs-keyword">of</span> a) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(currentValue);<br>&#125;<br><span class="hljs-title class_">VM394</span>:<span class="hljs-number">2</span> dog<br><span class="hljs-title class_">VM394</span>:<span class="hljs-number">2</span> cat<br><span class="hljs-title class_">VM394</span>:<span class="hljs-number">2</span> hen<br>97<span class="hljs-attr">VM394</span>:<span class="hljs-number">2</span> <span class="hljs-literal">undefined</span><br><span class="hljs-title class_">VM394</span>:<span class="hljs-number">2</span> fox<br></code></pre></td></tr></table></figure><p>你也可以使用for in循环来迭代一个数组，但如果有人向Array.prototype添加了新的属性，它（新加的属性）在本次循环也会被迭代。所以这种循环类型不被推荐用于数组迭代</p><p>另一种在ECMAScript5中添加的用来迭代数组的方式是forEach()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[<span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;hen&#x27;</span>].<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">currentValue, index, array</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;currentIndex: &#x27;</span> + index + <span class="hljs-string">&#x27; currentValue: &#x27;</span> + currentValue + <span class="hljs-string">&#x27; array: &#x27;</span> + array);<br>&#125;);<br><span class="hljs-title class_">VM486</span>:<span class="hljs-number">2</span> <span class="hljs-attr">currentIndex</span>: <span class="hljs-number">0</span> <span class="hljs-attr">currentValue</span>: dog <span class="hljs-attr">array</span>: dog,cat,hen<br><span class="hljs-title class_">VM486</span>:<span class="hljs-number">2</span> <span class="hljs-attr">currentIndex</span>: <span class="hljs-number">1</span> <span class="hljs-attr">currentValue</span>: cat <span class="hljs-attr">array</span>: dog,cat,hen<br><span class="hljs-title class_">VM486</span>:<span class="hljs-number">2</span> <span class="hljs-attr">currentIndex</span>: <span class="hljs-number">2</span> <span class="hljs-attr">currentValue</span>: hen <span class="hljs-attr">array</span>: dog,cat,hen<br></code></pre></td></tr></table></figure><p>如果想要为一个数组追加元素，只需要简单地：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">a.<span class="hljs-title function_">push</span>(item);<br></code></pre></td></tr></table></figure><p>数组方法列表如下：</p><table><thead><tr><th>Method name</th><th>Description</th><th>Example</th></tr></thead><tbody><tr><td>a.toString</td><td>返回数组的每一个元素以逗号分隔的字符串</td><td>dog,cat,hen,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,fox</td></tr><tr><td>a.toLocaleString()</td><td>同toString，不过先判断指定语言环境，没指定则使用默认语言环境，主要用于Date类型</td><td>-</td></tr><tr><td>a.concat(item1[, item2[, …[,itemN]]])</td><td>返回一个追加于其后的一个新的数组</td><td>a.concat(‘panda’,’seal’)-&gt; [empty × 97, “hen”, “cat”, “dog”, “panda”, “seal”]</td></tr><tr><td>a.join(sep)</td><td>转换数组为一个字符串，伴随着以sep参数分隔的值</td><td>dog-cat-hen————————————————————————————————–fox</td></tr><tr><td>a.pop</td><td>移除并返回最后一项</td><td>“fox”</td></tr><tr><td>a.push(item1, …, itemN)</td><td>向数组末端追加元素，并返回追加后的数组长度</td><td>101</td></tr><tr><td>a.reverse()</td><td>倒置数组</td><td>(101) [“fox”, empty × 97, “hen”, “cat”, “dog”]</td></tr><tr><td>a.shift</td><td>移除并返回第一个元素</td><td>“fox”</td></tr><tr><td>a.slice(start[, end])</td><td>返回子数组</td><td>a.slice(98,100) -&gt; [“cat”, “dog”]</td></tr><tr><td>a.sort([cmpfn])</td><td>采用可选比较函数进行排序</td><td>a.sort()-&gt;[“cat”, “dog”, “hen”, empty × 97]</td></tr><tr><td>a.splice(start, delcount[, item1[, …[, itemN]]])</td><td>让你修改一个数组，通过删除一部分并使用更多条目替换之</td><td>a.splice(0, 2, ‘another cat’, ‘another dog’)-&gt;[“cat”, “dog”]-&gt;a-&gt;[“another cat”, “another dog”, “hen”, empty × 97]</td></tr><tr><td>a.unshift(item1[, item2[, …[, itemN]]])</td><td>预先考虑数组开头的条目</td><td>a.unshift(‘prepand item1’, ‘prepand item2’)-&gt;102-&gt;a-&gt;[“prepand item1”, “prepand item2”, “another cat”, “another dog”, “hen”, empty × 97]</td></tr></tbody></table><p>更多详见<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array">array methods</a> &amp; <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString">toLocaleString</a></p><h6 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h6><p>同对象一起，函数也是理解JavaScript的核心组件</p><p>最基本的函数不能再简单</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x, y</span>) &#123;<br><span class="hljs-keyword">var</span> total = x + y;<br><span class="hljs-keyword">return</span> tatal;<br>&#125;<br></code></pre></td></tr></table></figure><p>这演示了一个基本的函数</p><p>一个JavaScript函数可以有0个或更多的命名参数</p><p>函数体可以包含任意多你想要的语句并且可以声明它对于它本身，自己的变量</p><p>return语句可以被用来在任何时候返回一个值，中断函数</p><p>如果没有返回语句（或者一个空的return而不包含任何值），JavaScript会返回undefined</p><p>命名参数比起其他任何事物更像是指导方针，只要你想，你可以调用一个函数而不用传递任何参数，这种情况它会传递undefined作为参数</p><p>所以直接运行上面定义的函数，会报错，因为你给函数传递了参数undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x, y</span>) &#123;<br><span class="hljs-keyword">var</span> total = x + y;<br><span class="hljs-keyword">return</span> total;<br>&#125;<br><span class="hljs-title function_">add</span>();<br><span class="hljs-title class_">NaN</span><br></code></pre></td></tr></table></figure><p>你也可以传递函数期望的更多参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x, y</span>) &#123;<br><span class="hljs-keyword">var</span> total = x + y;<br><span class="hljs-keyword">return</span> total;<br>&#125;<br><span class="hljs-title function_">add</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>);<br><span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>参数“4”会被忽略</p><p>这可能会看起来有点蠢，但函数会访问其函数体内部的附加名为arguments的变量，它是一个类数组对象，承载了所有传递给函数的参数</p><p>让我们重写这个add函数来取到和我们想要的参数一样多的参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>; i &lt; j; i++) &#123;<br>sum += <span class="hljs-variable language_">arguments</span>[i];<br>&#125;<br><span class="hljs-keyword">return</span> sum;<br>&#125;<br><span class="hljs-title function_">add</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>);<br><span class="hljs-number">14</span><br></code></pre></td></tr></table></figure><p>再写一个平均值函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">avg</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>; i &lt; j; i++) &#123;<br>sum += <span class="hljs-variable language_">arguments</span>[i];<br>&#125;<br><span class="hljs-keyword">return</span> sum / <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>;<br>&#125;<br><span class="hljs-title function_">avg</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>);<br><span class="hljs-number">3.5</span><br></code></pre></td></tr></table></figure><p>这非常有用，但有一点啰嗦。要再减少一点这份代码，我们可以考虑参数数组作取代，通过<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters">Rest parameter syntax</a></p><p>用这种方式，我们可以保持代码最小化的同时传递任意数量的参数给函数</p><p>rest参数运算符用于函数参数列表使用”…variable”格式，它会包含进调用函数时整个未捕获参数列表</p><p>我们也可以使用for…of循环取代for循环来返回变量中的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">avg</span>(<span class="hljs-params">...args</span>) &#123;<br><span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> value <span class="hljs-keyword">of</span> args) &#123;<br>sum += value;<br>&#125;<br><span class="hljs-keyword">return</span> sum / args.<span class="hljs-property">length</span>;<br>&#125;<br><span class="hljs-title function_">avg</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>);<br><span class="hljs-number">3.5</span><br></code></pre></td></tr></table></figure><p>在上述的代码中，args变量拥有我们传递进函数的所有函数</p><p>很重要需要注意无论何时rest参数运算符被放置在一个函数声明，它都会在它声明后存储所有的参数，但不会在声明之前（存储参数），例如：function avg(firstValue, …args)将存储被传递进函数的第一个值<br>在firstValue中，剩余参数存储在args中。另一个有用的函数但也的确给我们带来一个新问题。avg()函数接收一个逗号分隔的参数列表——但是要是你想要得到一个<strong>数组</strong>的平均值？你只能重写这个函数如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">avgArray</span>(<span class="hljs-params">arr</span>) &#123;<br><span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, j = arr.<span class="hljs-property">length</span>; i &lt; j; i++) &#123;<br>sum += arr[i];<br>&#125;<br><span class="hljs-keyword">return</span> sum / arr.<span class="hljs-property">length</span>;<br>&#125;<br><span class="hljs-title function_">avgArray</span>([<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]);<br><span class="hljs-number">3.5</span><br></code></pre></td></tr></table></figure><p>但使得这个我们创建的函数可被重用会更好。</p><p>幸运的是，JavaScript可以让你使用一个任意的参数数组来调用一个函数，通过使用任何函数对象的apply()方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">avg.<span class="hljs-title function_">apply</span>(<span class="hljs-literal">null</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]);<br><span class="hljs-number">3.5</span><br></code></pre></td></tr></table></figure><p>apply()的第二个参数是用作参数的数组；第一个参数后面再讨论，这强调了一个事实——函数也是对象</p><blockquote><p>你可以在函数调用中使用spread操作符达到相同的结果，例如avg(…numbers)</p></blockquote><p>jJavaScript让你可以创建匿名函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> arg = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>; i &lt; j; i++) &#123;<br>sum += <span class="hljs-variable language_">arguments</span>[i];<br>    &#125;<br><span class="hljs-keyword">return</span> sum / <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>这在语义上等同于function avg()形式</p><p>这非常强大，因为它可以让你把一个函数定义放在任何你通常放置表达式的地方</p><p>这使得所有种类的聪明的诀窍</p><p>这是一种“隐藏”一些本地变量的方式——像C语言中的块级域</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">var</span> b = <span class="hljs-number">2</span>;<br><br>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">var</span> b = <span class="hljs-number">3</span>;<br>a += b;<br>&#125;)();<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);<br><span class="hljs-title class_">VM2347</span>:<span class="hljs-number">9</span> <span class="hljs-number">4</span><br><span class="hljs-title class_">VM2347</span>:<span class="hljs-number">10</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>JavaScript允许你递归调用函数。</p><p>这对于处理树结构尤其有用，比如那些浏览器中的DOM</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">countChars</span>(<span class="hljs-params">elm</span>) &#123;<br><span class="hljs-keyword">if</span> (elm.<span class="hljs-property">nodeType</span> == <span class="hljs-number">3</span>) &#123;  <span class="hljs-comment">// TEXT_NODE</span><br><span class="hljs-keyword">return</span> elm.<span class="hljs-property">nodeValue</span>.<span class="hljs-property">length</span>;<br>&#125;<br><span class="hljs-keyword">var</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, child; child = elm.<span class="hljs-property">childNodes</span>[i]; i++) &#123;<br>count += <span class="hljs-title function_">countChars</span>(child);<br>    &#125;<br><span class="hljs-keyword">return</span> count;<br>&#125;<br></code></pre></td></tr></table></figure><p>这强调了匿名函数的一个潜在问题：如果它没有名字，你怎么递归地调用它？</p><p>JavaScript对于此让你可以给函数表达式命名</p><p>你可以使用命名了的IIFEs（Immediately Invoked Function Expression）如下面所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> charsInBody = (<span class="hljs-keyword">function</span> <span class="hljs-title function_">counter</span>(<span class="hljs-params">elm</span>) &#123;<br><span class="hljs-keyword">if</span> (elm.<span class="hljs-property">nodeType</span> == <span class="hljs-number">3</span>) &#123;  <span class="hljs-comment">// TEXT_NODE</span><br><span class="hljs-keyword">return</span> elm.<span class="hljs-property">nodeValue</span>.<span class="hljs-property">length</span>;<br>&#125;<br><span class="hljs-keyword">var</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, child; child = elm.<span class="hljs-property">childNodes</span>[i]; i++) &#123;<br>count += <span class="hljs-title function_">counter</span>(child);<br>&#125;<br><span class="hljs-keyword">return</span> count;<br>&#125;)(<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>);<br><span class="hljs-literal">undefined</span><br>charsInBody<br><span class="hljs-number">58670</span><br></code></pre></td></tr></table></figure><p>如上提供给一个函数表达式的名字仅对这个函数自己的域内可用</p><p>这允许更多的引擎优化并给出更多的可读代码</p><p>这个名称也出现在调试器和一些堆栈信息中，这会让你在调试时节省更多时间</p><p>注意JavaScript函数本身就是对象——像JavaScript中其他的一切一样——并且你可以添加或改变他们的属性，就像我们在对象部分所见过的</p><h6 id="自定义对象"><a href="#自定义对象" class="headerlink" title="自定义对象"></a>自定义对象</h6><p>更多JavaScript面向对象编程见<a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects">Object-Oriented JavaScript</a></p><p>在传统的面向对象语言编程中，对象是运算在数据上的数据和方法的集合</p><p>JavaScript是基于原型的语言，没有像是在C++或Java中的类语句（这有时会使得习惯于使用类语句的语言的编程者感到困惑）</p><p>取而代之，JavaScript使用函数作为类</p><p>让我们考虑一个有名有姓的人作为对象</p><p>姓名可能会以两种方式展示：如“名 姓”或“姓 名”</p><p>使用我们前面讨论的函数和对象，我们就能展示数据如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">makePerson</span>(<span class="hljs-params">first, last</span>) &#123;<br><span class="hljs-keyword">return</span> &#123;<br><span class="hljs-attr">first</span>: first,<br><span class="hljs-attr">last</span>: last<br>&#125;;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">personFullName</span>(<span class="hljs-params">person</span>) &#123;<br><span class="hljs-keyword">return</span> person.<span class="hljs-property">first</span> + <span class="hljs-string">&#x27; &#x27;</span> + person.<span class="hljs-property">last</span>;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">personFullNameReversed</span>(<span class="hljs-params">person</span>) &#123;<br><span class="hljs-keyword">return</span> person.<span class="hljs-property">last</span> + <span class="hljs-string">&#x27;, &#x27;</span> + person.<span class="hljs-property">first</span>;<br>&#125;<br><br>s = <span class="hljs-title function_">makePerson</span>(<span class="hljs-string">&#x27;Simon&#x27;</span>, <span class="hljs-string">&#x27;Willison&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">personFullName</span>(s));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">personFullNameReversed</span>(s));<br><span class="hljs-title class_">VM1137</span>:<span class="hljs-number">15</span> <span class="hljs-title class_">Simon</span> <span class="hljs-title class_">Willison</span><br><span class="hljs-title class_">VM1137</span>:<span class="hljs-number">16</span> <span class="hljs-title class_">Willison</span>, <span class="hljs-title class_">Simon</span><br></code></pre></td></tr></table></figure><p>这有效，但很丑</p><p>这样最后你会在全局域有很多函数</p><p>我们真正需要的是一种把一个函数依附于一个对象的方式</p><p>因为函数也是对象，所以这很容易：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">makePerson</span>(<span class="hljs-params">first, last</span>) &#123;<br><span class="hljs-keyword">return</span> &#123;<br><span class="hljs-attr">first</span>: first,<br><span class="hljs-attr">last</span>: last,<br><span class="hljs-attr">fullName</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">first</span> + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">last</span>;<br>        &#125;,<br><span class="hljs-attr">fullNameReversed</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">last</span> + <span class="hljs-string">&#x27;, &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">first</span>;<br>&#125;<br> &#125;;<br>&#125;<br><br>s = <span class="hljs-title function_">makePerson</span>(<span class="hljs-string">&#x27;Simon&#x27;</span>, <span class="hljs-string">&#x27;Willison&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s.<span class="hljs-title function_">fullName</span>());<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s.<span class="hljs-title function_">fullNameReversed</span>());<br><span class="hljs-title class_">VM1572</span>:<span class="hljs-number">15</span> <span class="hljs-title class_">Simon</span> <span class="hljs-title class_">Willison</span><br><span class="hljs-title class_">VM1572</span>:<span class="hljs-number">16</span> <span class="hljs-title class_">Willison</span>, <span class="hljs-title class_">Simon</span><br></code></pre></td></tr></table></figure><p>这里有一些我们前面没见过的东西：this关键字</p><p>使用内部函数，this指向当前对象</p><p>这实际上意味着你调用函数的方式来指定</p><p>如果你使用一个对象上的点符或括号符来调用，那么那个对象就是this</p><p>如果调用没用点符，this指向全局对象</p><p>注意this是一个频繁导致错误的东西，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">s = <span class="hljs-title function_">makePerson</span>(<span class="hljs-string">&#x27;Simon&#x27;</span>, <span class="hljs-string">&#x27;Willison&#x27;</span>);<br><span class="hljs-keyword">var</span> fullName = s.<span class="hljs-property">fullName</span>;<br><span class="hljs-title function_">fullName</span>();<br><span class="hljs-string">&quot;undefined undefined&quot;</span><br></code></pre></td></tr></table></figure><p>当我们单独调用fullName()，而不用s.fullName()，this被绑定在全局对象</p><p>因为没有全局变量叫first或者last，所以我们对于二者都得到了undefined</p><p>我们可以利用this关键字来提高我们的makePerson函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">first, last</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">first</span> = first;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">last</span> = last;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">fullName</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">first</span> + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">last</span>;<br>&#125;;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">fullNameReversed</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">last</span> + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">first</span>;<br>&#125;;<br>&#125;<br><span class="hljs-keyword">var</span> s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;Simon&#x27;</span>, <span class="hljs-string">&#x27;Willison&#x27;</span>);<br></code></pre></td></tr></table></figure><p>我们介绍了另一个关键字new</p><p>new和this强度关联</p><p>它创造一个新的空对象，然后调用指定的函数，并使用this设置给那个新建的对象</p><p>注意通过this指定的那个函数不返回一个值，但很少修改this对象</p><p>是new返回了this对象到调用的地方</p><p>被设计为通过new调用的函数称为构造函数</p><p>常见的做法是利用这些函数作为一个使用new调用它们的提醒</p><p>提高后的函数仍有和单独调用fullName相同的陷阱</p><p>我们的person对象变得更好了，但对于它们仍有一些丑陋边缘</p><p>每次我们创建一个person对象，我们都创建了其内的两个崭新的函数对象——如果这代码被分享不会变得更好吗？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">personFullName</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">first</span> + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">last</span>;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">personFullNameReversed</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">last</span> + <span class="hljs-string">&#x27;, &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">first</span>;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">first, last</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">first</span> = first;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">last</span> = last;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">fullName</span> = personFullName;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">fullNameReversed</span> = personFullNameReversed;<br>&#125;<br></code></pre></td></tr></table></figure><p>这变得更好了，我们只创建了函数一次，并且在构造器里给它们的引用赋值</p><p>我们能做的更好吗？答案是可以：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">first, last</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">first</span> = first;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">last</span> = last;<br>&#125;<br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">fullName</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">first</span> + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">last</span>;<br>&#125;;<br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">fullNameReversed</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">last</span> + <span class="hljs-string">&#x27;, &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">first</span>;<br>&#125;;<br>ƒ () &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">last</span> + <span class="hljs-string">&#x27;, &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">first</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Person.prototype是一个分享自Person所有实例的对象</p><p>它形成一个查找链的一部分（有一个特殊的名字，原型链）：当任何时候你尝试去访问Person的一个属性时，JavaScript会检查Person.prototype去看是否那个属性存在。</p><p>然后任何赋值给Person.prototype的东西对于构造器的所有实例经this对象变得可用</p><p>这是一个令人难以置信的强大工具</p><p>JavaScript让你可以修改某个东西的原型在任何时候，在你的程序里，意味着你可以在运行时对已存在的对象添加额外的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;Simon&#x27;</span>, <span class="hljs-string">&#x27;Willison&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s.<span class="hljs-title function_">firstNameCaps</span>());<br><span class="hljs-title class_">VM587</span>:<span class="hljs-number">2</span> <span class="hljs-title class_">Uncaught</span> <span class="hljs-title class_">TypeError</span>: s.<span class="hljs-property">firstNameCaps</span> is not a <span class="hljs-keyword">function</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">firstNameCaps</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">first</span>.<span class="hljs-title function_">toUpperCase</span>();<br>&#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s.<span class="hljs-title function_">firstNameCaps</span>());<br><span class="hljs-title class_">VM588</span>:<span class="hljs-number">4</span> <span class="hljs-variable constant_">SIMON</span><br></code></pre></td></tr></table></figure><p>有趣的是，你也可以向JavaScript内建对象添加东西</p><p>让我们给String添加一个方法以返回字符串的倒转字符串：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> s = <span class="hljs-string">&#x27;Simon&#x27;</span>;<br>s.<span class="hljs-title function_">reversed</span>();<br><span class="hljs-title class_">VM620</span>:<span class="hljs-number">2</span> <span class="hljs-title class_">Uncaught</span> <span class="hljs-title class_">TypeError</span>: s.<span class="hljs-property">reversed</span> is not a <span class="hljs-keyword">function</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">String</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">reversed</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">var</span> r = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>r += <span class="hljs-variable language_">this</span>[i];<br>&#125;<br><span class="hljs-keyword">return</span> r;<br>&#125;;<br><br>s.<span class="hljs-title function_">reversed</span>();<br><span class="hljs-string">&quot;nomiS&quot;</span><br></code></pre></td></tr></table></figure><p>我们的新方法甚至在字符串文字上有效！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&#x27;This can now be reversed.&#x27;</span>.<span class="hljs-title function_">reversed</span>();<br><span class="hljs-string">&quot;.desrever eb won nac sihT&quot;</span><br></code></pre></td></tr></table></figure><p>像之前提到的，原型形成链的一部分</p><p>链根是Object.prototype，它的方法包括toString()——是这个方法被调用当你试图呈现一个对象为一个字符串时</p><p>这对于调试我们的Person对象很有用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;Simon&#x27;</span>, <span class="hljs-string">&#x27;Willison&#x27;</span>);<br>s.<span class="hljs-title function_">toString</span>();<br>[object, object]<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;Person: &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">fullName</span>() + <span class="hljs-string">&#x27;&gt;&#x27;</span>;<br>&#125;;<br><br>s.<span class="hljs-title function_">toString</span>();<br><span class="hljs-string">&quot;&lt;Person: Simon Willison&gt;&quot;</span><br></code></pre></td></tr></table></figure><p>记得avg.apply是如何获得一个null作为第一个参数的吗？</p><p>我们可以现在回看</p><p>apply()的第一个参数是应该被视为this的对象</p><p>例如：这里有一个粗糙的new实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">trivialNew</span>(<span class="hljs-params">constructor, ...args</span>) &#123;<br><span class="hljs-keyword">var</span> o = &#123;&#125;;<br>constructor.<span class="hljs-title function_">apply</span>(o, args);<br><span class="hljs-keyword">return</span> o;<br>&#125;<br></code></pre></td></tr></table></figure><p>这不是一个准确的new的复制品，因为没有建立原型链（很难说明这一点）</p><p>这不是你经常使用的东西，但知道这很有用</p><p>在这个片段，…args（包括省略号）被称为rest参数——正如其名暗示，这包含了参数余下的部分</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> bill = <span class="hljs-title function_">trivialNew</span>(<span class="hljs-title class_">Person</span>, <span class="hljs-string">&#x27;William&#x27;</span>, <span class="hljs-string">&#x27;Orange&#x27;</span>);<br><span class="hljs-literal">undefined</span><br>bill<br>&#123;<span class="hljs-attr">first</span>: <span class="hljs-string">&quot;William&quot;</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">&quot;Orange&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>所以这几乎等同于</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> bill = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;William&#x27;</span>, <span class="hljs-string">&#x27;Orange&#x27;</span>);<br></code></pre></td></tr></table></figure><p>apply()有一个姐妹叫做call，再一次让你设置this，但用一个不同于数组的拓展参数列表</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">lastNameCaps</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">last</span>.<span class="hljs-title function_">toUpperCase</span>();<br>&#125;<br><span class="hljs-keyword">var</span> s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;Simon&#x27;</span>, <span class="hljs-string">&#x27;Willison&#x27;</span>);<br>lastNameCaps.<span class="hljs-title function_">call</span>(s);<br><span class="hljs-string">&quot;WILLISON&quot;</span><br></code></pre></td></tr></table></figure><p>这等同于：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">s.<span class="hljs-property">lastNameCaps</span> = lastNameCaps;<br>s.<span class="hljs-title function_">lastNameCaps</span>();<br><span class="hljs-string">&quot;WILLISON&quot;</span><br></code></pre></td></tr></table></figure><p>内部函数：</p><p>JavaScript函数声明允许在其他函数内部</p><p>我们之前见过一次，一个更早版本的makePerson()函数</p><p>JavaScript的嵌套函数的一个重要细节是他们可以访问它们父函数域的变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">parentFunc</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">nestedFunc</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">var</span> b = <span class="hljs-number">4</span>;<br><span class="hljs-keyword">return</span> a + b;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-title function_">nestedFunc</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>这为写可维护代码提供了一个强大的处理工具</p><p>如果一个函数依赖一个或两个对你代码其他部分没有用的其他函数，你可以嵌套那些工具函数在函数内部，以被其他任何地方调用</p><p>这保持了全局域范围内的函数数量，总会是件好事</p><p>这也是一个强大的全局变量诱饵的计数器（原文：This is also a great counter to the lure of global variables.）</p><p>当写复杂代码时，经常尝试使用全局变量去在多个函数间分享——导致难以维护的代码</p><p>嵌套函数可以在它们的父内分享，所以你可以将那种机制用于对函数，当不污染你的全局命名空间讲得通时——“本地全局变量”</p><p>这个技术应当被小心使用，但它的确是一个有用能力</p><h6 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h6><p>这带领我们走向JavaScript提供的最强大的抽象——但也是最潜在令人迷惑的</p><p>这是什么呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">makeAdder</span>(<span class="hljs-params">a</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">b</span>) &#123;<br><span class="hljs-keyword">return</span> a + b;<br>&#125;;<br>&#125;<br><span class="hljs-keyword">var</span> x = <span class="hljs-title function_">makeAdder</span>(<span class="hljs-number">5</span>);<br><span class="hljs-keyword">var</span> y = <span class="hljs-title function_">makeAdder</span>(<span class="hljs-number">20</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">x</span>(<span class="hljs-number">6</span>));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">y</span>(<span class="hljs-number">7</span>));<br><span class="hljs-title class_">VM1955</span>:<span class="hljs-number">8</span> <span class="hljs-number">11</span><br><span class="hljs-title class_">VM1955</span>:<span class="hljs-number">9</span> <span class="hljs-number">27</span><br></code></pre></td></tr></table></figure><p>makeAdder函数的名字应该放弃：它创造新的adder函数，每一个伴随着一个参数调用的函数，都将其添加到创建它的参数（原文：it creates new ‘adder’ functions, each of which, when called with one argument, adds it to the argument that it was created with.）</p><p>这里发生的事和内部函数非常相同：一个定义在另一个函数内部的函数访问了外部函数的变量</p><p>这里唯一不同的是外部函数有返回值，因此常识似乎指明它的局部变量不再存在</p><p>但它们仍存在——否则adder函数将无法工作</p><p>更重要的是，有makeAdder()本地变量的两份不同的“拷贝”——一个在a中是5，另一个a是20</p><p>所以函数调用的结果是11和27</p><p>这是真实正在发生的</p><p>无论何时JavaScript执行一个函数，“域”对象被创建来承载那个函数内部创建的本地变量</p><p>任何被传递进函数作为函数参数的变量将其初始化</p><p>这和承载全局变量和函数的全局对象类似，但一组不同的地方是：首先，一个崭新的域对象每次函数开始执行时被创建，其次，不像全局对象（类似通过this访问或浏览器中的window），这些域对象在你的JavaScript代码中不能直接被访问到，比如没有机制被用来迭代当前域对象属性</p><p>所以当makeAdder()被调用，一个域对象被创建，伴随一个属性a，也就是被传给makeAdder()的参数</p><p>makeAdder()然后返回一个新创建的函数</p><p>通常JavaScript的垃圾回收器会在这个点清除掉makeAdder()创建的域对象，但返回的函数维护了一个引用到域对象</p><p>结果，域对象不会被垃圾回收器回收直到不再有makeAdder()返回的函数对象的引用</p><p>域对象形成一个叫做域链的链，和JavaScript对象系统使用的原型链类似</p><p>闭包就是一个函数和其创造的域对象的集合体</p><p>闭包使你保持状态——如此，你会发现它们被用在对象的地方</p><p>see more closure@ <a href="https://stackoverflow.com/questions/111102/how-do-javascript-closures-work">closures</a></p><p>参考链接：</p><ul><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript">https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript</a></p></li><li><p><a href="http://crockford.com/javascript/">http://crockford.com/javascript/</a></p></li><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#Unicode">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#Unicode</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React教程之快速上手篇</title>
    <link href="/wilson-blog-hexo/2018/02/01/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/wilson-blog-hexo/2018/02/01/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>React官方教程系列之快速上手篇</p><span id="more"></span><h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h3><p>React官网的Quick Start提供了一个在线编辑器CodePen，里面提供了一个react的最小配置示例，即</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, World<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>,<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>)<br>);<br></code></pre></td></tr></table></figure><p>这个js文件将会把html文件渲染出Hello，World这个标题</p><p>html文件结构如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>接下来将探析React应用的构建块部分：元素、组件</p><p>一旦掌握，便可通过碎小的可复用块创造复杂的应用</p><h3 id="关于React于JavaScript的关系"><a href="#关于React于JavaScript的关系" class="headerlink" title="关于React于JavaScript的关系"></a>关于React于JavaScript的关系</h3><p>React是一个JavaScript库（library）</p><p>官网给出的建议是在学习React前确保自己的JavaScript有所理解，参照另一篇博文<a href="https://www.h2mes.com/2018/02/01/js%E7%9F%A5%E8%AF%86%E5%B7%A9%E5%9B%BA/">Refresh your JavaScript Knowledge</a></p><p>我们在例子里也用到了一些ES6语法。我们试图保守地用它，因为它还近乎崭新，但我们鼓励你熟悉一下箭头函数、类、模板字、let和const语句。你可以使用<a href="https://babeljs.io/repl/#?presets=react&code_lz=MYewdgzgLgBApgGzgWzmWBeGAeAFgRgD4AJRBEAGhgHcQAnBAEwEJsB6AwgbgChRJY_KAEMAlmDh0YWRiGABXVOgB0AczhQAokiVQAQgE8AkowAUPGDADkdECChWeASl4AlOMOBQAIgHkAssp0aIySpogoaFBUQmISdC48QA">Babel REPL</a>来检查ES6代码编译成什么样</p><h3 id="JSX介绍"><a href="#JSX介绍" class="headerlink" title="JSX介绍"></a>JSX介绍</h3><p>考虑这个变量声明：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> element = <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, world!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br></code></pre></td></tr></table></figure><p>这个搞笑的标签语法既不是一个字符串也不是HTML</p><p>它叫做JSX，并且它是JavaScript的一种语法拓展。我们推荐你在React使用它来描述UI看上去应该的样子。JSX可能使你想起模板语言，但它完全来自JavaScript的强大</p><p>JSX生产React“元素”。我们将在下一部分探索把它们渲染成DOM。在下面你会发现JSX必备基础来使你开始</p><h4 id="为什么用JSX"><a href="#为什么用JSX" class="headerlink" title="为什么用JSX"></a>为什么用JSX</h4><p>React拥抱渲染逻辑本质上是加上其他的UI逻辑这样的事实：事件如何处理，状态如何改变，还有数据如何被准备好用作展示</p><p>不是通过把标记和逻辑放在不同的文件中这样人为的分离技术，取而代之React分离聚焦在两个称作组件的松耦合单元（原文：React separates concerns with loosely coupled units called “components” that contain both.）我们会在后面的部分回到组件，但如果你还对于把标记放进JavaScript感到不舒服，<a href="https://www.youtube.com/watch?v=x7cQ3mrcKaY">这段谈话</a>可能会使你信服。</p><p>React并不一定要使用JSX，但大多数人发现这在他们处理JavaScript代码中的UI时，JSX像一个可视化目标一样帮到他们。它也允许React去展示更多有用的错误和警告信息</p><p>有了这些方法，让我们开始吧！</p><h4 id="在JSX中嵌入表达式"><a href="#在JSX中嵌入表达式" class="headerlink" title="在JSX中嵌入表达式"></a>在JSX中嵌入表达式</h4><p>你可以在JSX中嵌入任何JavaScript表达式，通过包裹在大括号内</p><p>例如：2 + 2、user.firstName和formatName(user)都是有效的表达式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">formatName</span>(<span class="hljs-params">user</span>) &#123;<br>  <span class="hljs-keyword">return</span> user.<span class="hljs-property">firstName</span> + <span class="hljs-string">&#x27; &#x27;</span> + user.<span class="hljs-property">lastName</span>;<br>&#125;<br><br><span class="hljs-keyword">const</span> user = &#123;<br>  <span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;Harper&#x27;</span>,<br>  <span class="hljs-attr">lastName</span>: <span class="hljs-string">&#x27;Perez&#x27;</span><br>&#125;;<br><br><span class="hljs-keyword">const</span> element = (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    Hello, &#123;formatName(user)&#125;!</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>);<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<br>  element,<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>)<br>);<br></code></pre></td></tr></table></figure><p>我们为了可读性把JSX拆分成多行。虽然不是必须的，当这样做时，我们还是建议用括号包裹起来以避免<a href="https://stackoverflow.com/questions/2846283/what-are-the-rules-for-javascripts-automatic-semicolon-insertion-asi">自动分号</a>的陷阱</p><h4 id="JSX也是表达式"><a href="#JSX也是表达式" class="headerlink" title="JSX也是表达式"></a>JSX也是表达式</h4><p>在编译之后，JSX表达式成为常规的JavaScript函数调用和评估</p><p>这意味着你可以在if语句和for循环内使用JSX，把它赋值给变量，接受它作为参数，还有从函数返回它</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getGreeting</span>(<span class="hljs-params">user</span>) &#123;<br>  <span class="hljs-keyword">if</span> (user) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, &#123;formatName(user)&#125;!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, Stranger.<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="为JSX指定属性"><a href="#为JSX指定属性" class="headerlink" title="为JSX指定属性"></a>为JSX指定属性</h4><p>你可能使用引号来指定字符串文字作为属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> element = <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">tabIndex</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br></code></pre></td></tr></table></figure><p>你也可能使用花括号来在属性内嵌入JavaScript表达式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jJavaScript">const element = &lt;img src=&#123;user.avatarUrl&#125;&gt;&lt;/img&gt;;<br></code></pre></td></tr></table></figure><p>当向一个属性内嵌入JavaScript表达式时，不要在花括号外加引号。你应该使用引号（对字符串值）或花括号（对表达式），但不应该二者都用于属性</p><blockquote><p>警告：因为JSX比起HTML更像JavaScript，React DOM使用驼峰属性命名法取代HTML属性名称。例如，在JSX中，class变成className，tabindex变成tabIndex</p></blockquote><h4 id="为JSX指定子"><a href="#为JSX指定子" class="headerlink" title="为JSX指定子"></a>为JSX指定子</h4><p>如果一个标签是空的，你可能会立即用一个&#x2F;&gt;关上它，像XML：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> element = <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;user.avatarUrl&#125;</span> /&gt;</span></span>;<br></code></pre></td></tr></table></figure><p>JSX标签可能包含子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> element = (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Good to see you here.<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>);<br></code></pre></td></tr></table></figure><h4 id="JSX避免注入攻击"><a href="#JSX避免注入攻击" class="headerlink" title="JSX避免注入攻击"></a>JSX避免注入攻击</h4><p>在JSX中嵌入用户输入是安全的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> title = response.<span class="hljs-property">potentiallyMaliciousInput</span>;<br><span class="hljs-keyword">const</span> element &lt;h1&gt;&#123;title&#125;&lt;/h1&gt;;<br></code></pre></td></tr></table></figure><p>默认的，React DOM会在渲染之前转义嵌在JSX中的值。从而确保你永远不会注入任何写在你程序里不明确的东西。任何东西都会在渲染之前被转换为字符串。这避免了XSS攻击</p><h4 id="JSX表示对象"><a href="#JSX表示对象" class="headerlink" title="JSX表示对象"></a>JSX表示对象</h4><p>Babel编译JSX为React.createElement()调用</p><p>下面两个例子完全相同：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> element = (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;greeting&quot;</span>&gt;</span></span><br><span class="language-xml">    Hello, world!</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> element = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<br>  <span class="hljs-string">&#x27;h1&#x27;</span>,<br>  &#123;<span class="hljs-attr">className</span>: <span class="hljs-string">&#x27;greeting&#x27;</span>&#125;,<br>  <span class="hljs-string">&#x27;Hello world&#x27;</span><br>);<br></code></pre></td></tr></table></figure><p>React.createElement()实施了一些检查以帮助你写出无缺陷的代码，但会潜在创造一个如下的对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> element = &#123;<br>  <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;h1&#x27;</span>,<br>  <span class="hljs-attr">props</span>: &#123;<br>    <span class="hljs-attr">className</span>: <span class="hljs-string">&#x27;greeting&#x27;</span>,<br>    <span class="hljs-attr">children</span>: <span class="hljs-string">&#x27;Hello, world&#x27;</span><br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>这些对象称为React元素。你可以把它们当作你想在屏幕上看到的东西的描述。React读取这些对象并使用它们去构造DOM并保持它们为最新的</p><p>我们将会在下个部分探索渲染React元素为DOM</p><blockquote><p>Tip: 我们推荐你为你的编辑器选择使用<a href="http://babeljs.io/docs/editors">Babel语言定义</a>，这样ES6和JSX就可以正确地高亮显示。（原文此处使用<a href="https://labs.voronianski.com/oceanic-next-color-scheme/">Oceanic Next</a>颜色主题）</p></blockquote><h3 id="渲染元素"><a href="#渲染元素" class="headerlink" title="渲染元素"></a>渲染元素</h3><p>元素是React应用最小的构建块</p><p>元素描述了你想在屏幕上看到的东西：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> element = <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, world<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br></code></pre></td></tr></table></figure><p>不像浏览器DOM元素，React元素是纯文本对象，并且容易创建。React DOM关心更新DOM以匹配React元素</p><blockquote><p>有人可能会混淆元素一个更广为人知的概念——“组件”。我们将会介绍组件在下一部分。元素是组件的组成部分并且我们鼓励你跳读前阅读组件这个部分</p></blockquote><h4 id="把元素渲染为DOM"><a href="#把元素渲染为DOM" class="headerlink" title="把元素渲染为DOM"></a>把元素渲染为DOM</h4><p>让我们假设在你的HTML文件中的某个地方有一个<div></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;root&quot;</span>&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>我们称其为DOM“根”节点，因为所以其内的节点都受管于React DOM</p><p>仅用React构建的程序经常只有一个唯一的根DOM节点。如果你将React集成进一个已存在的应用，你可以有尽可能多的孤立的根DOM</p><p>渲染一个React元素为一个根DOM节点，通过ReactDOM.render()：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> element = <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, world<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<br>  element,<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>)<br>);<br></code></pre></td></tr></table></figure><h4 id="更新渲染的元素"><a href="#更新渲染的元素" class="headerlink" title="更新渲染的元素"></a>更新渲染的元素</h4><p>React元素是一成不变的。一旦你创建一个元素，你无法改变它的子或者属性。元素就像电影中的一帧：它展现了在以一个特定时间点的UI</p><p>就我们现在所知，更新UI的唯一方式是创建一个新的元素，并把它传递给ReactDOM.render()</p><p>考虑一下这个钟表滴答例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">tick</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> element = (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, world!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">        It is&#123;&#x27; &#x27;&#125;</span><br><span class="language-xml">        &#123;hew Date().toLocaleTimeString()&#125;.</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>  <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<br>    element,<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>)<br>  );<br>&#125;<br><br><span class="hljs-built_in">setInterval</span>(tick, <span class="hljs-number">1000</span>);<br></code></pre></td></tr></table></figure><p>它从<a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setInterval">setInterval()</a>的回调函数每秒调用一次ReactDOM.render()</p><blockquote><p>实际上，大多数React应用只调用一次ReactDOM.render()。在下一个部分我们将学习怎样把这样的代码装进状态组件。我们推荐你不要跳过话题，因为它们依赖于彼此。</p></blockquote><h4 id="React只更新必要的东西"><a href="#React只更新必要的东西" class="headerlink" title="React只更新必要的东西"></a>React只更新必要的东西</h4><p>React DOM会比较元素及其子元素与前一个状态的对比，只把必要的DOM更新为适用于所需的状态</p><p>你可通过使用浏览器工具检查上一个例子来确认</p><p>即使我们每一秒创建一个元素来描述整个UI树，但只有内容改变的文本节点通过React DOM获得更新</p><p>在我们的实验中，思考UI如何根据给出的时刻而不是随着时间的推移进行改变，消除整个类的错误</p><h3 id="组件和props"><a href="#组件和props" class="headerlink" title="组件和props"></a>组件和props</h3><p>组件使你将UI分离成独立的部分、可重用的碎片并隔离的考虑每一个碎片</p><p>概念上讲，组件像是JavaScript的函数。它们接收任意的输入（称作props）并返回React元素来描述屏幕上发生了什么</p><h4 id="功能组件和类组件"><a href="#功能组件和类组件" class="headerlink" title="功能组件和类组件"></a>功能组件和类组件</h4><p>定义一个组件最简单的方式就是写一个JavaScript函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Welcome</span>(<span class="hljs-params">props</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>&#125;<br></code></pre></td></tr></table></figure><p>这个函数是一个有效的React组件，因为它接收了一个伴有数据的单一的props（表示属性）对象参数并返回了一个React元素。我们称这样的组件为函数组件，因为它们字面上是JavaScript函数</p><p>你也可以使用一个ES6的类来定义一个组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Welcome</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Comoponent</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, &#123;this.props.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上两个组件从React的角度等价</p><p>类有一些额外特性我们将在接下来的部分讨论。到那时，我们将因其简明性而使用函数组件</p><h4 id="渲染一个组件"><a href="#渲染一个组件" class="headerlink" title="渲染一个组件"></a>渲染一个组件</h4><p>先前，我们只遇到React元素呈现DOM标签：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> element = <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> /&gt;</span></span>;<br></code></pre></td></tr></table></figure><p>然而，元素也可以呈现用户定义的组件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> element = <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Welcome</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Sara&quot;</span> /&gt;</span></span>;<br></code></pre></td></tr></table></figure><p>当React看到一个元素展现一个用户定义的组件时，它作为一个单独的对象传递JSX参数给这个组件。我们称这个对象为“props”</p><p>比如，这个代码渲染“你好，Sara”在页面上：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Welcome</span>(<span class="hljs-params">props</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>参考链接：</p><ul><li><p><a href="https://reactjs.org/docs/">https://reactjs.org/docs/</a></p></li><li><p><a href="https://codepen.io/pen?&editors=0010">https://codepen.io/pen?&editors=0010</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql误删数据恢复</title>
    <link href="/wilson-blog-hexo/2018/02/01/mysql%E8%AF%AF%E5%88%A0%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D/"/>
    <url>/wilson-blog-hexo/2018/02/01/mysql%E8%AF%AF%E5%88%A0%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D/</url>
    
    <content type="html"><![CDATA[<p>对于MySQL误删数据，如何通过二进制日志进行数据查找和恢复</p><span id="more"></span><h3 id="数据恢复（MySQL传统方式）"><a href="#数据恢复（MySQL传统方式）" class="headerlink" title="数据恢复（MySQL传统方式）"></a>数据恢复（MySQL传统方式）</h3><h4 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h4><p>MySQL数据恢复的大前提基于MySQL核心配置文件（Linux下的my.cnf、Windows下的my.ini）中开启了Binary log——MySQL四种日志类型（Error log、General Query log、Binary log和Slow Query log）之一</p><p>可通过以下命令查看二进制日志相关配置情况</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams">mysql&gt; show <span class="hljs-keyword">variables</span> like <span class="hljs-comment">&#x27;%log_bin%&#x27;</span><br></code></pre></td></tr></table></figure><p>开启方式为在MySQL配置文件中的[mysqld]组中添加</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-built_in">log</span>-bin[=<span class="hljs-keyword">name</span>]<br></code></pre></td></tr></table></figure><p>或者在启动MySQL服务时添加启动参数–log-bin[&#x3D;name]</p><p>此处name为自定义日志文件名，有以下特点：</p><ol><li><p>是可选项</p></li><li><p>即使添加了后缀名，也会被忽略</p></li><li><p>可以设置绝对路径</p></li></ol><p>若不设置，默认项会是datadir&#x2F;log-basename-bin或datadir&#x2F;mysql-bin或者datadir&#x2F;mariadb-bin（后两者出现在你未设置log-basename，然后具体是mysql-bin还是mariadb-bin决定于你使用的MySQL服务器版本），datadir为你在MySQL核心配置文件中设置的数据目录</p><p><strong>官方推荐</strong>配置方式：指定log-basename或指定log-bin的name选项，这么做是为了确保当计算机主机名改变时复制（replication）不会受影响而停止（比如发生于主从备份）</p><p>存储二进制日志的目录将会包含一个二进制日志<strong>索引</strong>文件（包含所有二进制日志文件的有序列表）和二进制日志</p><p>二进制索引文件若不指定名称，会和二进制日志文件使用相同的name，后缀为index，也可手动指定其名称，通过</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel"><span class="hljs-built_in">log</span>-bin-<span class="hljs-built_in">index</span>[=filename]<br></code></pre></td></tr></table></figure><p>进行配置，这也是可选项</p><p>二进制日志文件可通过</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">mysql&gt; <span class="hljs-keyword">show </span><span class="hljs-keyword">binary </span>logs;<br></code></pre></td></tr></table></figure><p>进行查看，也可直接进入存储二进制日志文件的目录查看，序号越大的是越新产生的，序号越小的是越老的日志文件</p><p>二进制日志文件的产生于以下三种情况：</p><ol><li><p>MySQL每次启动时产生一个新的二进制日志文件</p></li><li><p>或者日志被flush</p></li><li><p>或者当前日志文件达到文件设定的容量最大值（max_binlog_size）</p></li></ol><blockquote><p>max_binlog_size范围为4K-1G，默认为1G（但不限于此），当事务比较小时，binlog在接近1G时会flush，并生成新的binlog，但同个事务不能跨binlog存储，所以当接近1G时如果有一个大事务，则产生的日志记录会记录在当前binlog，并产生大于1G的binlog，当事务执行完之后，才会切换binlog</p></blockquote><p>拥有SUPER权限的客户端可以停用或者重新启用当前会话的二进制日志文件，通过</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">SET sql_log_bin <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">SET sql_log_bin <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>二进制文件主要目的：</p><ol><li><p>用于复制：二进制文件一般存在于复制宿主机上，作为操作的记录，用于发送给从机（二进制日志很多细节内容都旨在为此服务）。主机向从机发送二进制日志中的操作事件，以使得从机能够执行这些事件保证拥有与主机相同的数据变更</p></li><li><p>数据恢复：备份文件恢复后，可通过二进制日志文件找到备份的任一个时间点的数据</p></li></ol><p>二进制日志文件共有三种格式</p><ol><li><p>statement-based（默认）</p></li><li><p>row-based</p></li><li><p>mix</p></li></ol><p>无论日志文件哪种格式，二进制日志都存储以二进制数据而非纯文本，所以一般的文本编辑器无法直接查看（不过MariaDB有一个命令行工具mysqlbinlog可以将二进制日志处理成纯文本）</p><p>二进制日志通过系统变量<code>binlog_format</code>决定</p><p>可在运行MySQL服务时通过添加以下一种参数进行设置</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">--binlog-format</span>=STATEMENT<br></code></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">--binlog-format</span>=ROW<br></code></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">--binlog-format</span>=MIXED<br></code></pre></td></tr></table></figure><p>或进行全局配置（需要SUPER权限）或进行会话级配置，方式如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">SET</span> GLOBAL <span class="hljs-attribute">binlog_format</span>=ROW;<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">SET</span> SESSION <span class="hljs-attribute">binlog_format</span>=MIXED;<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">SET</span> <span class="hljs-attribute">binlog_format</span>=STATEMENT;<br></code></pre></td></tr></table></figure><h5 id="查找二进制日志文件"><a href="#查找二进制日志文件" class="headerlink" title="查找二进制日志文件"></a>查找二进制日志文件</h5><p>使用以下命令进行相应查找和查看</p><ol><li><p>查看当前正在写入的binlog</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">mysql&gt; show <span class="hljs-keyword">master</span> <span class="hljs-title">status</span>;<br></code></pre></td></tr></table></figure></li><li><p>查看binlog日志文件列表（所有二进制日志文件）</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">mysql&gt; <span class="hljs-keyword">show </span><span class="hljs-keyword">binary </span>logs;<br></code></pre></td></tr></table></figure></li><li><p>查看指定binlog文件</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart">mysql&gt; <span class="hljs-keyword">show</span> binlog events <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;binlog_name&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li><p>查看第一个binlog</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">mysql&gt; <span class="hljs-keyword">show </span><span class="hljs-keyword">binlog </span>events<br></code></pre></td></tr></table></figure></li></ol><h5 id="使用mysqlbinlog工具"><a href="#使用mysqlbinlog工具" class="headerlink" title="使用mysqlbinlog工具"></a>使用mysqlbinlog工具</h5><p>注意点：</p><ol><li><p>不要查看正在写入的binlog</p></li><li><p>不要使用–force参数强制访问</p></li><li><p>若binlog格式为行模式，需要加-vv参数（行模式下DML加密存储，使用-v参数进行解析）</p></li></ol><h6 id="mysqlbinlog使用"><a href="#mysqlbinlog使用" class="headerlink" title="mysqlbinlog使用"></a>mysqlbinlog使用</h6><p>使用mysqlbinlog的方式如下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">shell</span>&gt; mysqlbinlog [<span class="hljs-keyword">options</span>] log_file<br></code></pre></td></tr></table></figure><blockquote><p>当使用mysqlbinlog时，可能会遇到一种情况会提示“unknown variable ‘default-character-set&#x3D;utf8’”，原因是MySQL配置文件中[client]组中配置了default-character-set&#x3D;utf8，这种情况可通过为mysqlbinlog添加–no-defaults参数解决</p></blockquote><p>如果binlog格式为statement（statement指类似CREATE、ALTER、INSERT、UPDATE、DELETE这样的操作，SELECT和SHOW这样的操作将不会被记录），则mysqlbinlog看到的日志包括SQL statament、执行这条statement的severID、时间戳（timestamp）以及执行这个statement花费了多少时间</p><p>如果binlog格式为row，则mysqlbinlog不会包含SQL的statement，取而代之的是显示每一行数据是如何改变的</p><p>mysqlbinlog的输出可直接作为对于mysql客户端的输入，以重新执行二进制日志中的statements（用于MySQL服务器宕机时作恢复），操作如下：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-built_in">shell</span>&gt; mysqlbinlog binlog-<span class="hljs-built_in">file</span> | mysql -u root -p<br></code></pre></td></tr></table></figure><p>也可使用如下命令将mysqlbinlog的输出重定向（redirect）当其他文件中，进行编辑和修改</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">shell&gt; mysqlbinlog -r <span class="hljs-keyword">filename</span> binlog-<span class="hljs-keyword">filename</span><br></code></pre></td></tr></table></figure><p>然后将修改后的文件再向MySQL客户端进行输入</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">shell&gt; mysql -u root -<span class="hljs-selector-tag">p</span> &lt; filename<br></code></pre></td></tr></table></figure><p>可使用一个数据库连接执行多个日志文件</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">shell&gt; mysqlbinlog file1 file2 ... <span class="hljs-string">| mssql -u root -p</span><br></code></pre></td></tr></table></figure><blockquote><p>当同时给一个连接执行多个日志文件时，如果多个日志中包含CREATE TEMPORARY TABLE这样的statement，临时表会在MySQL客户端连接终止（terminate）时删掉（drop），所以如果在同一时刻处理多个日志文件，并且其中一个日志文件创建了一个临时表，随后的日志文件连到（refer to）了这个临时表，则会得到“unknown table”错误</p></blockquote><p>如果需要将多个文件合并为一个文件进行编辑，然后，可如下操作：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle">shell&gt; mysqlbinlog master-bin.<span class="hljs-number">000001</span> &gt; <span class="hljs-regexp">/tmp/</span><span class="hljs-keyword">file</span>.sql<br>shell&gt; mysqlbinlog master-bin.<span class="hljs-number">000002</span> &gt;&gt; <span class="hljs-regexp">/tmp/</span><span class="hljs-keyword">file</span>.sql<br>shell&gt; mysql -u root -p -e <span class="hljs-string">&quot;source /tmp/file.sql&quot;</span><br></code></pre></td></tr></table></figure><p>直接在命令行通过<code>show binlog events</code>查看的binlog结构如下</p><table><thead><tr><th>Log_name</th><th>Pos</th><th>Event_type</th><th>Server_id</th><th>End_log_pos</th><th>Info</th></tr></thead><tbody><tr><td>master-bin.000001</td><td>4</td><td>Format_desc</td><td>1</td><td>120</td><td>Server ver: 5.6.31-log, Binlog ver: 4</td></tr><tr><td>master-bin.000001</td><td>120</td><td>Query</td><td>1</td><td>209</td><td>BEGIN</td></tr><tr><td>master-bin.000001</td><td>209</td><td>Query</td><td>1</td><td>354</td><td>use <code>wms_biz_2</code>; DELETE FROM <code>trade_wave_policy</code> WHERE (<code>POLICY_ID</code>&#x3D;’8700007’)</td></tr><tr><td>master-bin.000001</td><td>354</td><td>Xid</td><td>1</td><td>385</td><td>COMMIT &#x2F;* xid&#x3D;45 *&#x2F;</td></tr><tr><td>master-bin.000001</td><td>385</td><td>Stop</td><td>1</td><td>408</td><td>–</td></tr></tbody></table><p>而使用mysqlbinlog导出的文件结构类似：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=1*/</span>;<br><span class="hljs-comment">/*!40019 SET @@session.max_insert_delayed_threads=0*/</span>;<br><span class="hljs-comment">/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/</span>;<br>DELIMITER <span class="hljs-comment">/*!*/</span>;<br># <span class="hljs-keyword">at</span> <span class="hljs-number">4</span><br>#<span class="hljs-number">180130</span> <span class="hljs-number">19</span>:<span class="hljs-number">13</span>:<span class="hljs-number">59</span> server id <span class="hljs-number">1</span>  end_log_pos <span class="hljs-number">120</span> CRC32 <span class="hljs-number">0x870729d1</span> <span class="hljs-keyword">Start</span>: binlog v <span class="hljs-number">4</span>, server v <span class="hljs-number">5.6</span><span class="hljs-number">.31</span><span class="hljs-operator">-</span>log created <span class="hljs-number">180130</span> <span class="hljs-number">19</span>:<span class="hljs-number">13</span>:<span class="hljs-number">59</span> <span class="hljs-keyword">at</span> startup<br><span class="hljs-keyword">ROLLBACK</span><span class="hljs-comment">/*!*/</span>;<br>BINLOG <span class="hljs-string">&#x27;</span><br><span class="hljs-string">d1NwWg8BAAAAdAAAAHgAAAAAAAQANS42LjMxLWxvZwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="hljs-string">AAAAAAAAAAAAAAAAAAB3U3BaEzgNAAgAEgAEBAQEEgAAXAAEGggAAAAICAgCAAAACgoKGRkAAdEp</span><br><span class="hljs-string">B4c=</span><br><span class="hljs-string">&#x27;</span><span class="hljs-comment">/*!*/</span>;<br># <span class="hljs-keyword">at</span> <span class="hljs-number">120</span><br>#<span class="hljs-number">180130</span> <span class="hljs-number">19</span>:<span class="hljs-number">30</span>:<span class="hljs-number">27</span> server id <span class="hljs-number">1</span>  end_log_pos <span class="hljs-number">209</span> CRC32 <span class="hljs-number">0xad90bdf5</span> Querythread_id<span class="hljs-operator">=</span><span class="hljs-number">8</span>exec_time<span class="hljs-operator">=</span><span class="hljs-number">0</span>error_code<span class="hljs-operator">=</span><span class="hljs-number">0</span><br><span class="hljs-keyword">SET</span> <span class="hljs-type">TIMESTAMP</span><span class="hljs-operator">=</span><span class="hljs-number">1517311827</span><span class="hljs-comment">/*!*/</span>;<br><span class="hljs-keyword">SET</span> @<span class="hljs-variable">@session</span>.pseudo_thread_id<span class="hljs-operator">=</span><span class="hljs-number">8</span><span class="hljs-comment">/*!*/</span>;<br><span class="hljs-keyword">SET</span> @<span class="hljs-variable">@session</span>.foreign_key_checks<span class="hljs-operator">=</span><span class="hljs-number">1</span>, @<span class="hljs-variable">@session</span>.sql_auto_is_null<span class="hljs-operator">=</span><span class="hljs-number">0</span>, @<span class="hljs-variable">@session</span>.unique_checks<span class="hljs-operator">=</span><span class="hljs-number">1</span>, @<span class="hljs-variable">@session</span>.autocommit<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-comment">/*!*/</span>;<br><span class="hljs-keyword">SET</span> @<span class="hljs-variable">@session</span>.sql_mode<span class="hljs-operator">=</span><span class="hljs-number">1075838976</span><span class="hljs-comment">/*!*/</span>;<br><span class="hljs-keyword">SET</span> @<span class="hljs-variable">@session</span>.auto_increment_increment<span class="hljs-operator">=</span><span class="hljs-number">1</span>, @<span class="hljs-variable">@session</span>.auto_increment_offset<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-comment">/*!*/</span>;<br><span class="hljs-comment">/*!\C utf8mb4 */</span><span class="hljs-comment">/*!*/</span>;<br><span class="hljs-keyword">SET</span> @<span class="hljs-variable">@session</span>.character_set_client<span class="hljs-operator">=</span><span class="hljs-number">45</span>,@<span class="hljs-variable">@session</span>.collation_connection<span class="hljs-operator">=</span><span class="hljs-number">45</span>,@<span class="hljs-variable">@session</span>.collation_server<span class="hljs-operator">=</span><span class="hljs-number">33</span><span class="hljs-comment">/*!*/</span>;<br><span class="hljs-keyword">SET</span> @<span class="hljs-variable">@session</span>.lc_time_names<span class="hljs-operator">=</span><span class="hljs-number">0</span><span class="hljs-comment">/*!*/</span>;<br><span class="hljs-keyword">SET</span> @<span class="hljs-variable">@session</span>.collation_database<span class="hljs-operator">=</span><span class="hljs-keyword">DEFAULT</span><span class="hljs-comment">/*!*/</span>;<br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-comment">/*!*/</span>;<br># <span class="hljs-keyword">at</span> <span class="hljs-number">209</span><br>#<span class="hljs-number">180130</span> <span class="hljs-number">19</span>:<span class="hljs-number">30</span>:<span class="hljs-number">27</span> server id <span class="hljs-number">1</span>  end_log_pos <span class="hljs-number">354</span> CRC32 <span class="hljs-number">0xa8518d8a</span> Querythread_id<span class="hljs-operator">=</span><span class="hljs-number">8</span>exec_time<span class="hljs-operator">=</span><span class="hljs-number">0</span>error_code<span class="hljs-operator">=</span><span class="hljs-number">0</span><br>use `wms_biz_2`<span class="hljs-comment">/*!*/</span>;<br><span class="hljs-keyword">SET</span> <span class="hljs-type">TIMESTAMP</span><span class="hljs-operator">=</span><span class="hljs-number">1517311827</span><span class="hljs-comment">/*!*/</span>;<br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> `trade_wave_policy` <span class="hljs-keyword">WHERE</span> (`POLICY_ID`<span class="hljs-operator">=</span><span class="hljs-string">&#x27;8700008&#x27;</span>)<br><span class="hljs-comment">/*!*/</span>;<br># <span class="hljs-keyword">at</span> <span class="hljs-number">354</span><br>#<span class="hljs-number">180130</span> <span class="hljs-number">19</span>:<span class="hljs-number">30</span>:<span class="hljs-number">27</span> server id <span class="hljs-number">1</span>  end_log_pos <span class="hljs-number">385</span> CRC32 <span class="hljs-number">0xc49f56b6</span> Xid <span class="hljs-operator">=</span> <span class="hljs-number">28</span><br><span class="hljs-keyword">COMMIT</span><span class="hljs-comment">/*!*/</span>;<br># <span class="hljs-keyword">at</span> <span class="hljs-number">385</span><br>#<span class="hljs-number">180130</span> <span class="hljs-number">19</span>:<span class="hljs-number">46</span>:<span class="hljs-number">24</span> server id <span class="hljs-number">1</span>  end_log_pos <span class="hljs-number">474</span> CRC32 <span class="hljs-number">0x6b652f60</span> Querythread_id<span class="hljs-operator">=</span><span class="hljs-number">11</span>exec_time<span class="hljs-operator">=</span><span class="hljs-number">0</span>error_code<span class="hljs-operator">=</span><span class="hljs-number">0</span><br><span class="hljs-keyword">SET</span> <span class="hljs-type">TIMESTAMP</span><span class="hljs-operator">=</span><span class="hljs-number">1517312784</span><span class="hljs-comment">/*!*/</span>;<br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-comment">/*!*/</span>;<br></code></pre></td></tr></table></figure><h4 id="数据恢复（ali-RDS）"><a href="#数据恢复（ali-RDS）" class="headerlink" title="数据恢复（ali-RDS）"></a>数据恢复（ali-RDS）</h4><p>（类似于Git或SVN的分支管理，只不过这里是对数据库实例进行克隆分支，进行修改，再合并主干）</p><ol><li><p>进入RDS控制台，选择【备份恢复】，点击克隆实例</p></li><li><p>选择按时间点进行还原（克隆一份截止到所填时间点的拷贝，即做删除操作之前的时间点）</p></li><li><p>克隆出一个新实例，找到误删之前的数据，并恢复到主实例上</p></li></ol><p>或通过ali-RDS的DMS进行数据追踪（按条件查询binlog），找到误删操作的SQL进行相应恢复</p><h3 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h3><ul><li><p><a href="https://mariadb.com/kb/en/library/activating-the-binary-log/">官方推荐binlog启用配置</a></p></li><li><p><a href="https://mariadb.com/kb/en/library/binary-log-formats/">MySQL二进制文件格式</a></p></li><li><p><a href="https://dev.mysql.com/doc/refman/5.7/en/mysqlbinlog.html">MySQL官方文档binlog章节</a></p></li><li><p><a href="https://dev.mysql.com/doc/internals/en/binary-log.html">https://dev.mysql.com/doc/internals/en/binary-log.html</a></p></li><li><p><a href="https://mariadb.com/kb/en/library/mysqlbinlog-options/">mysqlbinlog可选参数</a></p></li><li><p><a href="https://dev.mysql.com/doc/internals/en/event-header-fields.html">mysqlbinlog输出的文件结构</a></p></li><li><p><a href="https://bash.cyberciti.biz/guide/Source_command">source命令</a></p></li><li><p><a href="http://blog.csdn.net/zdy0_2004/article/details/65629247">http://blog.csdn.net/zdy0_2004&#x2F;article&#x2F;details&#x2F;65629247</a></p></li><li><p><a href="https://help.aliyun.com/knowledge_detail/51989.html">阿里云RDS怎样恢复误删除的数据</a></p></li><li><p><a href="https://xcoder.in/2015/08/10/mysql-binlog-try/">https://xcoder.in/2015/08/10/mysql-binlog-try/</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Apache项目Maven官方文档学习及翻译（译）</title>
    <link href="/wilson-blog-hexo/2018/01/29/%E5%85%B3%E4%BA%8EMaven/"/>
    <url>/wilson-blog-hexo/2018/01/29/%E5%85%B3%E4%BA%8EMaven/</url>
    
    <content type="html"><![CDATA[<p>从理解pom.xml探析Maven</p><span id="more"></span><h3 id="pom是什么"><a href="#pom是什么" class="headerlink" title="pom是什么"></a>pom是什么</h3><p>POM表示“Project Object Model(工程对象模型)”，同其他对象模型一样，pom用于表示一个工程的结构。</p><p>在Maven工程中以xml文件形式呈现，核心文件pom.xml</p><p>官网的形容是：pom是关乎工程的“一站式商店（one-stop-store）”，所以对工程的配置仅需一个pom.xml文件</p><h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs Maven">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;<br>  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;<br>  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0<br>                      http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;<br>  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;<br><br>  &lt;!-- The Basics --&gt;<br>  &lt;groupId&gt;...&lt;/groupId&gt;<br>  &lt;artifactId&gt;...&lt;/artifactId&gt;<br>  &lt;version&gt;...&lt;/version&gt;<br>  &lt;packaging&gt;...&lt;/packaging&gt;<br>  &lt;dependencies&gt;...&lt;/dependencies&gt;<br>  &lt;parent&gt;...&lt;/parent&gt;<br>  &lt;dependencyManagement&gt;...&lt;/dependencyManagement&gt;<br>  &lt;modules&gt;...&lt;/modules&gt;<br>  &lt;properties&gt;...&lt;/properties&gt;<br><br>  &lt;!-- Build Settings --&gt;<br>  &lt;build&gt;...&lt;/build&gt;<br>  &lt;reporting&gt;...&lt;/reporting&gt;<br><br>  &lt;!-- More Project Information --&gt;<br>  &lt;name&gt;...&lt;/name&gt;<br>  &lt;description&gt;...&lt;/description&gt;<br>  &lt;url&gt;...&lt;/url&gt;<br>  &lt;inceptionYear&gt;...&lt;/inceptionYear&gt;<br>  &lt;licenses&gt;...&lt;/licenses&gt;<br>  &lt;organization&gt;...&lt;/organization&gt;<br>  &lt;developers&gt;...&lt;/developers&gt;<br>  &lt;contributors&gt;...&lt;/contributors&gt;<br><br>  &lt;!-- Environment Settings --&gt;<br>  &lt;issueManagement&gt;...&lt;/issueManagement&gt;<br>  &lt;ciManagement&gt;...&lt;/ciManagement&gt;<br>  &lt;mailingLists&gt;...&lt;/mailingLists&gt;<br>  &lt;scm&gt;...&lt;/scm&gt;<br>  &lt;prerequisites&gt;...&lt;/prerequisites&gt;<br>  &lt;repositories&gt;...&lt;/repositories&gt;<br>  &lt;pluginRepositories&gt;...&lt;/pluginRepositories&gt;<br>  &lt;distributionManagement&gt;...&lt;/distributionManagement&gt;<br>  &lt;profiles&gt;...&lt;/profiles&gt;<br>&lt;/project&gt;<br></code></pre></td></tr></table></figure><p><img src="http://trigolds.com/maven_lifecircle.png"></p><p>modelVersion是必填参数，4.0.0当前仅支持Maven2及Maven3版本</p><p>通览整个pom文件，分为一下几部分配置：</p><ol><li><p>基本配置（The Basics）</p></li><li><p>构建配置（Build Settings）</p></li><li><p>关于工程的更多信息（More Project Information）</p></li><li><p>环境配置（Environment Settings）</p></li></ol><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><p>pom包含了关于工程的所有必要信息，包括构建过程中所用的插件配置。</p><p>它有效地声明了“who”、“what”和“where”（谁在哪里做了什么）</p><p>与此同时，构建生命周期是“when”和“how”（何时做以及怎么做）</p><h4 id="特别之处"><a href="#特别之处" class="headerlink" title="特别之处"></a>特别之处</h4><p>上述的构建生命周期去决定“何时以及如何去做”并不意味着pom不能<strong>干涉（影响）</strong>生命周期流</p><p>取而代之的是，它可以</p><p>例如：通过配置maven-antrun-plugin，可以在pom中有效地嵌入ant任务</p><p>这最终是一个声明，然而正如build.xml在运行时告诉ant（流程上）准确去做什么，pom陈述了它（声明上）的配置</p><p>但如果某种外部力量迫使生命周期跳过ant插件的执行，Maven的魔法使得它并不会停止被执行的插件</p><p>这不像build.xml的任务几乎总是依赖于执行流上前一个任务的执行</p><h3 id="Maven坐标"><a href="#Maven坐标" class="headerlink" title="Maven坐标"></a>Maven坐标</h3><p>示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0</span></span><br><span class="hljs-string"><span class="hljs-tag">                      http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.codehaus.mojo<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>my-project<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>以上是Maven2和Maven3允许的最小配置</p><p>groupId:artifactId:version是都被要求配置的参数（如果继承自父pom时，groupId和version则不需要准确定义）</p><p>这三个域对于一个工程扮演了地址和时间戳的角色，这在仓库中标记出一个特定的位置，像是扮演了Maven工程中的坐标系统这一角色</p><h4 id="groupId"><a href="#groupId" class="headerlink" title="groupId"></a>groupId</h4><p>这通常对于一个组织或者一个工程是唯一的。例如Maven所有的核心组件都存在于org.apache.maven这一groupId下</p><p>groupId不是必须添加“.”符号，比如junit工程</p><p>包含“.”符的groupId不必和工程所包含的包结构保持一致，但这二者保持一致是一种推荐遵守的最佳实践</p><p>但存储在仓库时，组扮演了操作系统中java包结构的角色，“.”符将被操作系统替换为特定的目录分隔符（例如Unix中的斜杠符“&#x2F;”），从而变成一个相对于仓库根目录的相对目录结构。</p><p>在所给例子中，org.codehaus.mojo组存在于$M2_REPO&#x2F;org&#x2F;codehaus&#x2F;mojo中</p><h4 id="artifactId"><a href="#artifactId" class="headerlink" title="artifactId"></a>artifactId</h4><p>artifactId通常是工程所被知晓的名称</p><p>虽然groupId很重要，但是人们在组（group）内的讨论很少提及groupId（通常都是在相同ID的组内，例如Codehaus Mojo工程的groupId:org.codehaus.mojo）</p><p>artifactId在groupId之下对于将这个工程区别于所有其他工程创建了一个键，完整定义了组件在仓库中的住所</p><p>在上例中，即是my-project居住在$M2_REPO&#x2F;org&#x2F;codehaus&#x2F;mojo&#x2F;my-project</p><h4 id="version"><a href="#version" class="headerlink" title="version"></a>version</h4><p>这是命名谜题中的最后一块</p><p>groupId:artifactId声明了一个单一的工程，但它没有描述清我们讨论的那个工程是哪一个化身</p><p>我们讨论的是今天的junit:junit，还是四年前的junit:junit（第二版）</p><p>简而言之，代码改变了，那些改动应该被版本化</p><p>version这个元素在组件线上定义了那些版本改动</p><hr><p>上述这三个元素指出了一个特定的工程版本，使得Maven知晓我们在处理哪一个工程，还有何时我们需要它们</p><h4 id="packaging"><a href="#packaging" class="headerlink" title="packaging"></a>packaging</h4><p>知道了地址结构groupId:artifactId:version之后，还有一个标准标签提供真正完整的地址，那就是工程的组件类型</p><p>上述示例pom中定义的org.codehaus.mojo:my-project:1.0将被以jar格式打包</p><p>当没有packaging被声明时，Maven的默认处理方式是以jar包形式打包</p><p>有效类型有：</p><ol><li><p>pom</p></li><li><p>jar</p></li><li><p>maven-plugin</p></li><li><p>ejb</p></li><li><p>war</p></li><li><p>ear</p></li><li><p>rar</p></li><li><p>par</p></li></ol><p>对于一个指定的包结构，这些定义了和构建声明周期阶段所一致的某个默认目标列表<br>（这句话稍显晦涩，原文：These define the default list of goals which execute to each corresponding build lifecycle stage for a particular package structure）</p><p>你有时会看到Maven打印出如下的工程坐标：</p><p>groupId:artifactId:packaging:version</p><h4 id="classfier"><a href="#classfier" class="headerlink" title="classfier"></a>classfier</h4><p>你可能会在坐标中碰巧发现第五个元素，那就是classifier</p><h3 id="POM关系"><a href="#POM关系" class="headerlink" title="POM关系"></a>POM关系</h3><p>Maven强大的一个方面在于它对工程关系的处理，包括<strong>依赖</strong>和<strong>可传递依赖</strong>、继承、聚合（多模块工程）</p><p>Maven在处理依赖管理这一老生常谈的问题上通过一个本地公共仓库正确处理工程联系及版本问题</p><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><p>POM的基石是其依赖列表，几乎每一个工程都依赖于其他包或工程去正确地实现构建和运行</p><p>当你需要时，Maven会为你复杂的目标任务下载并关联依赖</p><h5 id="groupId-artifactId-version"><a href="#groupId-artifactId-version" class="headerlink" title="groupId,artifactId,version"></a>groupId,artifactId,version</h5><p>你会经常看到这些元素，这个三元组合用来及时计算针对某个特定工程的Maven坐标</p><p>计算的目的是为了选择一个匹配所有依赖声明的版本（由于可传递依赖的存在，对于相同的artifactId可以有多依赖声明）</p><ul><li><p>groupId,artifactId：直接对应的坐标的依赖</p></li><li><p>version：一个被特指的依赖版本，将被用来计算依赖的有效版本</p></li></ul><p>因为依赖由Maven坐标所描述，你可能会想“这意味着我的工程只能依靠artifacts”，答案是“当然，但那是好事”，这迫使你去依靠于Maven可管理的依赖</p><p>有时可能很不幸，当一个工程不能从中央仓库下载到。比如一个工程依赖于一个遵守闭源协议的jar文件，使得你无法从中央仓库下载所得。下面三种方法可以处理：</p><ol><li>使用安装插件进行本地安装这个依赖，这个方法是最简单的推荐方法</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">mvn install:install-file <span class="hljs-attribute">-Dfile</span>=non-maven-proj.jar <span class="hljs-attribute">-DgroupId</span>=some.group <span class="hljs-attribute">-DartifactId</span>=non-maven-proj <span class="hljs-attribute">-Dversion</span>=1 <span class="hljs-attribute">-Dpackaging</span>=jar<br></code></pre></td></tr></table></figure><p>注意这仍需要一个地址，只有这个时候你使用命令行和安装插件会通过你给出的地址创建一个POM</p><ol start="2"><li><p>创建你自己的仓库并把包部署上去。这对于公司在内部网络是一个令人喜欢的方法，并且需要保持每一个人同步。有一个Maven目标叫做deploy:deploy-file，和install:install-file类似</p></li><li><p>设置依赖域为system并定义一个systemPath。这不被推荐，然而引出了接下来要解释的元素。</p></li></ol><h5 id="classfier-1"><a href="#classfier-1" class="headerlink" title="classfier"></a>classfier</h5><p>classfier用来区分由相同POM构建，但内容不同的artifacts。这是可选项，并且是任意的字符串，当它呈现时，它附加于artfact名称的版本后面</p><p>这个元素的动机是考虑到例如一个工程提供了一个针对JRE1.5的artifact，但与此同时另一个artifact仍支持JRE1.4。这样第一个artifact可以用classfier“jdk15”装配，第二个artifact用“jdk14”装配，这样客户端便可以使用哪一个</p><p>另一个classfiers的通用用例是对于工程主artifact所附加的第二artifacts。如果你浏览Maven中央仓库，会注意到在打包的文件中sources分类器和javadoc分类器被用于部署工程源码和API文档</p><h5 id="type"><a href="#type" class="headerlink" title="type"></a>type</h5><p>和所依赖的artifact的packaging类型保持一致。默认是jar。</p><p>它常常展示于依赖文件的名称后缀，但并不总是这样</p><p>类型可以被映射到一个不同的拓展名和分类器</p><p>类型经常和打包所用方式一致，虽然这也不总是这样</p><p>可以通过插件定义新的类型，设置extensions为true，所以这不是一个完整的列表</p><h5 id="scope"><a href="#scope" class="headerlink" title="scope"></a>scope</h5><p>这个元素涉及到即将到来的（编译时、运行时、测试时）任务的类路径（classpath），同时也涉及如何限制可传递依赖，共有一下五个域变量：</p><ol><li><p>compile：默认域，如果没特别指定，则使用compile。compile依赖将在所有的类路径可用，更甚，那些依赖会被传播到从属工程（compile、runtime、test）</p></li><li><p>provided：和compile很像，但指明了你想用的JDK或者在运行时所提供的容器。仅在编译和测试的类路径可用，并且不可传递（compile、test）</p></li><li><p>runtime：这个域指明了这个依赖在编译时不被需要，但被需要于执行时。它存在于运行时和测试的类路径中，不存在与编译类路径（runtime、test）</p></li><li><p>test：这个域指明了依赖在应用的常规使用时不被需要，而仅在测试编译和执行时可用。不可传递（test-compile、test-runtime）</p></li><li><p>system：这个域和provided类似，除非你不得不明确提供所包含的JAR</p></li></ol><h5 id="systemPath"><a href="#systemPath" class="headerlink" title="systemPath"></a>systemPath</h5><p>仅被用来当scope是system时，否则如果这个设置被配置，构建将会失败</p><p>路径必须是绝对路径，所以推荐使用一个property去设置指定机器的路径，例如${java.home}&#x2F;lib</p><p>假定系统域依赖安装一个priori，Maven不会为这个工程从仓库检查，取而代之的是去检查那个文件是否存在。如果不存在，，Maven将会构建失败并建议你手动下载并安装它</p><h5 id="optional"><a href="#optional" class="headerlink" title="optional"></a>optional</h5><p>当工程本身是一个依赖时标记可选配置为一个依赖。这困惑吗？举个例子，想象一个工程A依赖于工程B去编译一部分在运行时不会被使用的代码，然后我们可能没必要对于所有工程都需要工程B。所以如果工程X添加了工程A作为它自己的依赖，然后Maven将根本不必安装工程B。用象征性的符号表示，如果&#x3D;&gt;表示一个需要的依赖，–&gt;表示可选，虽然情况是A&#x3D;&gt;B可能当构建A时，但情况是X&#x3D;&gt;A–&gt;B当构建X时</p><p>简言之，optional让其他工程知道这样一点，就是当你使用这个工程，你不必需要这个依赖以正确工作</p><h4 id="依赖版本需求指定"><a href="#依赖版本需求指定" class="headerlink" title="依赖版本需求指定"></a>依赖版本需求指定</h4><p>依赖的版本元素定义了版本的需求，用来计算有效的依赖版本</p><p>版本需求有如下的语法：</p><ul><li><p>1.0：软需求，需要1.0版本（仅是推荐，如果它匹配了所有其他的范围也可以，例如1.1或0.9）</p></li><li><p>[1.0]：硬需求，指定1.0版本</p></li><li><p>(,1.0)：x &lt;&#x3D; 1.0</p></li><li><p>[1.2,1.3]：1.2 &lt;&#x3D; x &lt;&#x3D; 1.3</p></li><li><p>[1.0,2.0)：1.0 &lt;&#x3D; x &lt; 2.0</p></li><li><p>[1.5,)：x &gt;&#x3D; 1.5</p></li><li><p>(,1.0],[1.2,)：x &lt;&#x3D; 1.0 or x &gt;&#x3D; 1.2（多个范围以逗号隔开）</p></li><li><p>(,1.1),(1.1,)：这排除了1.1（例如知道1.1这个版本不能正常工作）</p></li></ul><h4 id="版本顺序指定"><a href="#版本顺序指定" class="headerlink" title="版本顺序指定"></a>版本顺序指定</h4><p>Maven坐标在符号之间以点符(.)和连线符(-)分割，在数字和字符之间以</p><p>分隔符会被记录下来并对顺序产生影响</p><p>数字和字符之间的等同于连字符</p><p>空字符会被替换为0</p><p>这通过.和-前缀给版本号（数值符）和版本限定符（非数值符号）一个顺序</p><p>实例：</p><p>1-1.foo-bar1baz-.1 -&gt; 1-1.foo-bar-1-baz-0.1</p><h4 id="排除项"><a href="#排除项" class="headerlink" title="排除项"></a>排除项</h4><p>exclusions明确告诉Maven你在某个特定工程中某个依赖中不想包含的依赖（换言之，它的传递依赖）</p><p>举个例子，maven-embedder需要maven-core，并且我们不想使用它或者它的依赖，随后我们添加一个exclusion配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0</span></span><br><span class="hljs-string"><span class="hljs-tag">                      https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>  ...<br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-embedder<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    ...<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>  ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这有时对于修剪依赖的传递依赖有帮助</p><p>一个依赖可能在某些特定域范围中不正确，或者依赖会与你工程中的其他依赖冲突</p><p>使用通配符排除法可以使得排除一个依赖的所有传递依赖变得简单</p><p>在下面的示例中你可能需要maven-embedder，并且你想自己管理依赖，所以你修剪了所有的传递依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0</span></span><br><span class="hljs-string"><span class="hljs-tag">                      https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>  ...<br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-embedder<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    ...<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>  ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>exclusions包含了一个或多个exclusion元素，每一个都包含groupId和artifactId来指明一个排除的依赖</p><p>不像optional会可能或者可能不需要安装和使用，exclusions将其完全移除出依赖树</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>Maven为构建管理带来的另一个强大力量是工程继承概念</p><p>虽然在构建系统例如Ant，继承当然可以模拟，Maven在使得工程继承对于工程对象模型明确上移除了额外的步骤</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0</span></span><br><span class="hljs-string"><span class="hljs-tag">                      https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.codehaus.mojo<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>my-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>对父工程和聚合工程（多模块）来说，packaging类型需要设为pom</p><p>这些类型定义了绑定到一系列生命周期阶段的目标</p><p>例如，如果packaging是jar，那么package将会执行jar:jar目标</p><p>如果packaging是pom，被执行的目标将会是site:attach-descriptor</p><p>现在我们可以向父pom中添加值，这些会被其子对象继承，大多数元素会从父pom继承到子，包括：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs gradle">groupId<br>version<br><span class="hljs-keyword">description</span><br>url<br>inceptionYear<br>organization<br>licenses<br>developers<br>contributors<br>mailingLists<br>scm<br>issueManagement<br>ciManagement<br>properties<br>dependencyManagement<br><span class="hljs-keyword">dependencies</span><br><span class="hljs-keyword">repositories</span><br>pluginRepositories<br>build<br>  plugin executions with matching ids<br>  plugin configuration<br>  etc.<br>reporting<br>profiles<br></code></pre></td></tr></table></figure><p>特别注意一下元素不被继承：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs delphi">artifactId<br><span class="hljs-keyword">name</span><br>prerequisites<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0</span></span><br><span class="hljs-string"><span class="hljs-tag">                      https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.codehaus.mojo<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>my-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>&gt;</span>../my-parent<span class="hljs-tag">&lt;/<span class="hljs-name">relativePath</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>my-project<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意relativePath元素，是不必须的，但可能会用来作为提供给Maven搜索父工程路径的信号，在搜索本地仓库然后远程仓库之前（relativePath -&gt; local repository -&gt; remote repository）</p><h4 id="超类POM"><a href="#超类POM" class="headerlink" title="超类POM"></a>超类POM</h4><p>和面向编程中对象都继承自跟对象类似，POMs都继承自一个根POM，此外正如java对象最终都继承自java.lang.Object，所有工程对象模型都继承自一个基类POM，下面的片段这Maven3.0.4的超类POM</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Central Repository<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://repo.maven.apache.org/maven2<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">layout</span>&gt;</span>default<span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">snapshots</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">snapshots</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">pluginRepositories</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">pluginRepository</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Central Repository<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://repo.maven.apache.org/maven2<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">layout</span>&gt;</span>default<span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">snapshots</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">snapshots</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">releases</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">updatePolicy</span>&gt;</span>never<span class="hljs-tag">&lt;/<span class="hljs-name">updatePolicy</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">releases</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">pluginRepository</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">pluginRepositories</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;project.basedir&#125;</span><span class="language-xml">/target<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">outputDirectory</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;project.build.directory&#125;</span><span class="language-xml">/classes<span class="hljs-tag">&lt;/<span class="hljs-name">outputDirectory</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;project.artifactId&#125;</span><span class="language-xml">-$</span><span class="hljs-template-variable">&#123;project.version&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">testOutputDirectory</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;project.build.directory&#125;</span><span class="language-xml">/test-classes<span class="hljs-tag">&lt;/<span class="hljs-name">testOutputDirectory</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">sourceDirectory</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;project.basedir&#125;</span><span class="language-xml">/src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">sourceDirectory</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">scriptSourceDirectory</span>&gt;</span>src/main/scripts<span class="hljs-tag">&lt;/<span class="hljs-name">scriptSourceDirectory</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">testSourceDirectory</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;project.basedir&#125;</span><span class="language-xml">/src/test/java<span class="hljs-tag">&lt;/<span class="hljs-name">testSourceDirectory</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;project.basedir&#125;</span><span class="language-xml">/src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">testResources</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">testResource</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;project.basedir&#125;</span><span class="language-xml">/src/test/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">testResource</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">testResources</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">pluginManagement</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-comment">&lt;!-- <span class="hljs-doctag">NOTE:</span> These plugins will be removed from future versions of the super POM --&gt;</span></span><br><span class="language-xml">      <span class="hljs-comment">&lt;!-- They are kept for the moment as they are very unlikely to conflict with lifecycle mappings (MNG-4453) --&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-antrun-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2-beta-5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-dependency-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-release-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">pluginManagement</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">reporting</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">outputDirectory</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;project.build.directory&#125;</span><span class="language-xml">/site<span class="hljs-tag">&lt;/<span class="hljs-name">outputDirectory</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">reporting</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">profiles</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- <span class="hljs-doctag">NOTE:</span> The release profile will be removed from future versions of the super POM --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>release-profile<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">activation</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>performRelease<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">activation</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">inherited</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">inherited</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-source-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>attach-sources<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span></span><br><span class="language-xml">                  <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">inherited</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">inherited</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-javadoc-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>attach-javadocs<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span></span><br><span class="language-xml">                  <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">inherited</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">inherited</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">updateReleaseInfo</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">updateReleaseInfo</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">profiles</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>你可以创建一个最小pom.xml来看一下超类POM是如何影响你的工程对象模型，并且通过在命令行执行mvn help:effective-pom</p><h4 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h4><p>除了对于顶级元素的继承，父pom还有一些元素配置用于子POMs和可传递依赖，其中之一是dependenceManagement</p><h5 id="dependencyManagement"><a href="#dependencyManagement" class="headerlink" title="dependencyManagement"></a>dependencyManagement</h5><p>dependencyManagement被POMs用来管理贯穿其所有子pom的依赖信息</p><p>如果my-parent工程使用dependenceManagement来定义一个依赖junit:junit:4.0，然后POMs继承自这个pom，可以设置它们的依赖，仅设置groupId&#x3D;junit，artifactId&#x3D;junit，随后Maven会通过父工程为其填充version配置。这个方法的收益是显然的。依赖细节可以被设置在一个中央位置，会传播到继承其的POMs</p><p>注意artifact的version和scope是从传递依赖而组成的，这也被依赖管理部分控制着版本，这会带来意想不到的结果。考虑一个情况，在你的工程中使用两个依赖，dep1和dep2。dep2反过来又使用到dep1，并需要一个特定的最小版本去运作。如果你使用dependenceManagement去指定一个旧版本，dep2将会被迫使使用旧版本，并失败。</p><p>所以你必须小心检查整个依赖树去避免这种问题</p><p>mvn:dependence:tree会派上用场</p><h3 id="聚合（或说多模块）"><a href="#聚合（或说多模块）" class="headerlink" title="聚合（或说多模块）"></a>聚合（或说多模块）</h3><p>一个包含模块的工程被认为是一个多模块，或说聚合工程。</p><p>模块是这个POM列出的工程，同时会被以组的形式执行。一个以pom方式进行打包的工程可能聚合构建一组工程清单作为模块，这是相对路径或者那些工程的POM文件（原文： An pom packaged project may aggregate the build of a set of projects by listing them as modules, which are relative paths to the directories or the POM files of those projects.）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0</span></span><br><span class="hljs-string"><span class="hljs-tag">                      https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.codehaus.mojo<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>my-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>my-project<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>another-project<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>third-project/pom-example.xml<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当列出模式时，你不必亲自考虑内部模块的依赖，例如POM给出的模块次序是不重要的。Maven会拓扑地排序模块以使依赖模块总会在依赖其的模块之前被构建（被依赖者总会先构建）</p><h4 id="最后需要注意关于继承和聚合的一点"><a href="#最后需要注意关于继承和聚合的一点" class="headerlink" title="最后需要注意关于继承和聚合的一点"></a>最后需要注意关于继承和聚合的一点</h4><p>继承和聚合创造了一个良好的动态操作去控制构建一个单一的、高级的POM。你将经常看到工程既是父工程，又是聚合工程。例如，整个Maven核心运行于一个简单的基POM——org.apache.maven:maven，所以构建Maven工程可以通过一个简单的命令mvn compile去执行。</p><p>然而虽然POM工程、聚合工程还有父工程都不同并且不应该令人困惑。一个POM工程可能会被继承——但不必需要——任何它聚合的模块。相反，一个POM工程可能聚合工程而并没有继承自它的工程</p><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>属性是理解POM基本元素的最后一块。Maven属性是占位值，像Ant中的属性。它们的值可以被POM中任何位置通过${X}所获取到，X是属性值。或者它们可被用于作为插件默认值，例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span>&gt;</span><br>  ...<br>  <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.7<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.7<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>  ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>它们以五种方式表示：</p><ol><li>env.X：伴随env前缀变量会返回shell的环境变量。例如${env.PATH}包含了PATH环境变量</li></ol><blockquote><p>注意：Windows本身环境变量大小写不敏感，但属性是大小写敏感的。换句话说，当在Windows的shell对于%PATH%和%Path%返回相同的值时，Maven会区分${env.PATH}和${env.Path}。谈及Maven2.1.0，环境变量名称被规范化为全大写以保证可靠性</p></blockquote><ol start="2"><li><p>project.x：POM中点符表示的路径会包含和元素值一致的值。例如：<project><version>1.0</version></project>可通过${project.version}达到</p></li><li><p>setting.x：setting.xml中的点符表示的路径包含和元素值相一致的值。例如：<settings><offline>false</offline></settings>可通过${settings.offline}达到</p></li><li><p>java系统属性：所有的属性可通过java.lang.System.getProperties()达到作为POM属性的变量，例如${java.home}</p></li><li><p>x：通过<properties />在POM中设置的元素。<properties><someVar>value</someVar></properties>的值可通过${someVar}获得</p></li></ol><h3 id="构建设置"><a href="#构建设置" class="headerlink" title="构建设置"></a>构建设置</h3><p>在上述给出的Maven基本设置之上，有两个元素必须在声明完整的POM之前被理解。它们就是build元素，就是像声明你工程目录结构和管理插件一样的处理器。还有reporting元素，能最大化反映构建元素的报告</p><h4 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h4><p>根据POM 4.0.0 XSD，build元素被概念上拆分成两部分：一个BaseBuild类型包含了build元素（project层级下的顶级构建元素和profiles下的构建元素）的通用元素集；还有一个Build类型，包含了BaseBuild集同时还有更多用于顶级定义的元素。让我们开始分析这二者的通用元素</p><p>注意：这些不同的build元素会被以project build和profile build指明</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0</span></span><br><span class="hljs-string"><span class="hljs-tag">                      https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>  ...<br>  <span class="hljs-comment">&lt;!-- &quot;Project Build&quot; contains more elements than just the BaseBuild set --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">profiles</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- &quot;Profile Build&quot; contains a subset of &quot;Project Build&quot;s elements --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">profiles</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="BaseBuild元素集"><a href="#BaseBuild元素集" class="headerlink" title="BaseBuild元素集"></a>BaseBuild元素集</h5><p>BaseBuild恰如其名：在POM文件中两个build元素之间的基本元素集</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">defaultGoal</span>&gt;</span>install<span class="hljs-tag">&lt;/<span class="hljs-name">defaultGoal</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;basedir&#125;</span><span class="language-xml">/target<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;artifactId&#125;</span><span class="language-xml">-$</span><span class="hljs-template-variable">&#123;version&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">filters</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span>filters/filter1.properties<span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">filters</span>&gt;</span></span><br><span class="language-xml">  ...</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ol><li><p>defaultGoal：如果未给定，则执行的默认目标或时期。如果goal被给定，那应该被定义如命令行中的样子（例如jar:jar）。如果时期被定义也如此（例如install）</p></li><li><p>directory：这是构建将会输出其文件的目录，或者Maven的说法——构建目标物，这适当地默认设置为${basedir}&#x2F;target</p></li><li><p>finalName：这是捆绑项目的名称当其最终构建（无文件拓展名，例如my-project-1.0.jar，此时finalName就是my-project-1.0）。默认是${artifactId}-${version}</p></li></ol><p>finalName这个术语有点用词不当，然而，正如插件构建捆绑项目拥有每一个权利去忽略或修改这个名称（但它们通常不会这么做）。例如：如果maven-jar-plugins被配置用于生成一个jar并添加一个test的classifier，然后上述定义的实际jar将会被构建为my-project-1.0-test.jar</p><ol start="4"><li>filter：定义*.properties文件，该文件包含一个属性列表，这个属性列表是用于作为其他接受设置的资源。换句话说，在filter文件中被定义的“键值对”在构建时会用实际资源替换掉${name}字符串。上述例子定义了filter&#x2F;目录下的filter1.properties文件。Maven的默认过滤器目录是${basedir}&#x2F;src&#x2F;main&#x2F;filters&#x2F;</li></ol><h5 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h5><p>build元素的另一个特征是指定资源存在于你工程的哪里。资源不是代码。它们不被编译，但也是要被绑定进你项目的项或被用作其他理由，比如代码生成</p><p>举个例子：一个Plexus工程需要伴随一个存在于META-INF&#x2F;plexus下的configuration.xml文件（用来指定对于容器的组件配置信息）去存在。虽然我们仅需要简单地放置这个文件在src&#x2F;main&#x2F;resources&#x2F;META-INF&#x2F;plexus，但我们想取而代之的是给予Plexus一个它自己的目录src&#x2F;main&#x2F;plexus。为了JAR插件能够正确地绑定资源，你需要指定资源类似如下：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">  <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">  <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0</span></span></span><br><span class="hljs-string"><span class="hljs-tag"><span class="language-xml">                      https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span></span><br><span class="language-xml">    ...</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">targetPath</span>&gt;</span>META-INF/plexus<span class="hljs-tag">&lt;/<span class="hljs-name">targetPath</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;basedir&#125;</span><span class="language-xml">/src/main/plexus<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>configuration.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">testResources</span>&gt;</span></span><br><span class="language-xml">      ...</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">testResources</span>&gt;</span></span><br><span class="language-xml">    ...</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ol><li><p>resources：是一个资源元素列表，其中每一个元素描述了去包含什么文件和去哪获得这个文件关联进这个工程</p></li><li><p>targetPath：指定放置构建出的资源所处目录结构。目标路径默认是根目录。对于将被打包进一个JAR的资源，一个通常指定的目标路径是META-INF</p></li><li><p>filtering：值是true或者false，指示出对于这个资源是否使用过滤器。注意，*.properties过滤器文件不必被定义去过滤——资源也可以使用在POM中被默认定义的属性（例如${project.version}），被传递到命令行，通过使用-D标识（例如-Dname&#x3D;value）或者通过属性元素准确定义。</p></li><li><p>directory：这个元素的值定义了资源从哪里找。默认用于构建的目录是${basedir}&#x2F;src&#x2F;main&#x2F;resources</p></li><li><p>includes：一组用于指定在特定目录下被包含进作为资源的文件模式，使用*作为通配符</p></li><li><p>excludes：和includes一样的结构，但指定哪些文件被忽略。当include和exclude产生矛盾时，exclude生效</p></li><li><p>testResources：这个元素块包含了testResource元素。它们的定义类似resource元素，但只在test时期使用。有一点不同的是一个工程的默认（超POM所定义的）测试资源目录是${basedir}&#x2F;src&#x2F;test&#x2F;resources。测试资源不会被部署</p></li></ol><h5 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0</span></span><br><span class="hljs-string"><span class="hljs-tag">                      https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    ...<br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-jar-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">extensions</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">extensions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">inherited</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">inherited</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">classifier</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">classifier</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文源自apache官网Maven项目的官方文档，本人初读此文档时感觉晦涩难度，难以完整通读。但苦于找不到其他关于Maven学习的高质有效资料，遂决定再次“品味”官方文档并作翻译，并借此对官方文档逐行理解，并做此译文，以便后人。部分字句由于鄙人才疏学浅，无法做到准确翻译，伴有原文。翻译不当之处还请指正。</p><p>参考链接：</p><p><a href="https://maven.apache.org/pom.html">https://maven.apache.org/pom.html</a></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于域名</title>
    <link href="/wilson-blog-hexo/2018/01/25/%E5%85%B3%E4%BA%8E%E5%9F%9F%E5%90%8D/"/>
    <url>/wilson-blog-hexo/2018/01/25/%E5%85%B3%E4%BA%8E%E5%9F%9F%E5%90%8D/</url>
    
    <content type="html"><![CDATA[<p>探析域名</p><span id="more"></span><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>域名（简称“网域”），与互联网上的一个物理IP关联</p><p>是电子邮件地址中@符号之后和网址中www.之后的唯一名称</p><h3 id="子域名"><a href="#子域名" class="headerlink" title="子域名"></a>子域名</h3><p>子域名也是域名，隶属于较大的网域</p><p>例如：mail.google.com、<a href="http://www.google.com和docs.google.com都是域名google.com的子域名/">www.google.com和docs.google.com都是域名google.com的子域名</a></p><p>域名所有者可以创建子域名，为<strong>顶级域名</strong>下的网页或服务提供简单好记的地址</p><h3 id="裸网域"><a href="#裸网域" class="headerlink" title="裸网域"></a>裸网域</h3><p>就是不含“www”前缀的网域地址。例如google.com，而不是<a href="http://www.google.com/">www.google.com</a></p><h3 id="主域名"><a href="#主域名" class="headerlink" title="主域名"></a>主域名</h3><p>所注册的域名，可在账号中添加其他域名</p><h3 id="辅助域名"><a href="#辅助域名" class="headerlink" title="辅助域名"></a>辅助域名</h3><p>主域名之外，可为账号添加其他域名，让相应网域中的用户可使用其他服务</p><h3 id="网域别名"><a href="#网域别名" class="headerlink" title="网域别名"></a>网域别名</h3><p>可用作其他网域的别名的域名</p><p>可为账号添加一个域名作为网域别名，从而为网域中每位用户提供一个采用该域名别名的电子邮件地址</p><p>发送至用户任一地址的邮件均会递送到用户的同一个电子邮件收件箱</p><h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h3><p>一个域名可能有一个或多个关联的IP地址</p>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于DNS</title>
    <link href="/wilson-blog-hexo/2018/01/25/%E5%85%B3%E4%BA%8EDNS/"/>
    <url>/wilson-blog-hexo/2018/01/25/%E5%85%B3%E4%BA%8EDNS/</url>
    
    <content type="html"><![CDATA[<p>探析DNS</p><span id="more"></span><h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>Domain Name System，域名系统</p><h4 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h4><p><strong>整理</strong>和<strong>识别</strong>各个域名的网络电话簿</p><p>将域名转换为托管该网站的计算机的物理IP</p><h3 id="MX记录"><a href="#MX记录" class="headerlink" title="MX记录"></a>MX记录</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><p>Mail Exchange，邮件交换记录</p><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>将一个网域的电子邮件定向到托管该网域用户账号的服务器</p><h4 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h4><p>一个网域可定义多条MX记录，每条记录有不同的优先级。</p><p>如果邮件通过最高优先级记录无法递送，则采用第二优先级，以此类推</p><h3 id="TXT记录"><a href="#TXT记录" class="headerlink" title="TXT记录"></a>TXT记录</h3><h4 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h4><p>为网域之外的来源提供文本信息的一种DNS记录</p><h5 id="文本类型"><a href="#文本类型" class="headerlink" title="文本类型"></a>文本类型</h5><ul><li><p>人工可读文本</p></li><li><p>机器可读文本</p></li></ul><h3 id="CNAME记录"><a href="#CNAME记录" class="headerlink" title="CNAME记录"></a>CNAME记录</h3><p>规范名称记录</p><h4 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h4><p>将一个别名关联到另一个<strong>真正的</strong>或<strong>规范的</strong>域名</p><h3 id="A记录"><a href="#A记录" class="headerlink" title="A记录"></a>A记录</h3><p>地址记录（主机记录），Address</p><h4 id="作用-3"><a href="#作用-3" class="headerlink" title="作用"></a>作用</h4><p>将一个域名关联到托管该网域服务的计算机的物理IP</p><h3 id="NS记录"><a href="#NS记录" class="headerlink" title="NS记录"></a>NS记录</h3><h4 id="作用-4"><a href="#作用-4" class="headerlink" title="作用"></a>作用</h4><p>用于确定哪些服务器为一个网域传达DNS信息</p><p>网域通常有主要的和辅助的域名服务器记录</p><h3 id="TTL"><a href="#TTL" class="headerlink" title="TTL"></a>TTL</h3><p>生存时间，Time To Live</p><h4 id="作用-5"><a href="#作用-5" class="headerlink" title="作用"></a>作用</h4><p>决定对该记录所做的后续更改需要多少秒才会生效</p><h4 id="推荐值"><a href="#推荐值" class="headerlink" title="推荐值"></a>推荐值</h4><p>3600（即1个小时）</p><p>让整个互联网中的服务器每小时检查一次该记录的更新情况</p><h5 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h5><p>较短的TTL在之前的有效期到期后才会生效</p><p>若想快速还原一项更改，则可设置较短的TTL值（如300,5分钟）</p><h5 id="合理配置"><a href="#合理配置" class="headerlink" title="合理配置"></a>合理配置</h5><p>正确配置后，建议设置TTL为86400，即让整个互联网中的服务器每24小时检查一次记录的更新情况</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>不要在DNS设置中使用实际域名，而是使用@符号表示域名</p><p>参考链接：<a href="https://support.google.com/a/answer/48090?hl=zh-Hans">https://support.google.com/a/answer/48090?hl=zh-Hans</a></p><p><a href="https://support.dnsimple.com/articles/differences-between-a-cname-alias-url/">https://support.dnsimple.com/articles/differences-between-a-cname-alias-url/</a></p>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux发行版理解</title>
    <link href="/wilson-blog-hexo/2018/01/25/linux%E5%8F%91%E8%A1%8C%E7%89%88%E7%90%86%E8%A7%A3/"/>
    <url>/wilson-blog-hexo/2018/01/25/linux%E5%8F%91%E8%A1%8C%E7%89%88%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>linux作为开源系统，有着众多的发行版本（毕竟有着庞大的社区和狂热的爱好者），不同的发行版本(Linux Distribution)随着发展，在使用方式上也有一些不同，例如各自的包管理器、已经适用场景等等。借此整理一下linux的不同发行版本，以便在使用不同版linux时不至混乱。</p><span id="more"></span><h3 id="大致分类"><a href="#大致分类" class="headerlink" title="大致分类"></a>大致分类</h3><ol><li><p>商业发行版</p><ul><li><p>Ubuntu(Canonical公司)</p></li><li><p>Fedora(RedHat)</p></li><li><p>openSUSE(Novell)</p></li><li><p>Mandriva Linux</p></li></ul></li><li><p>社区发行版</p><ul><li><p>Debian</p></li><li><p>Gentoo</p></li></ul></li><li><p>既不是商业发行版也不是社区发行版</p></li></ol><p><a href="https://upload.wikimedia.org/wikipedia/commons/1/1b/Linux_Distribution_Timeline.svg">Linux Distrubutions</a></p><h3 id="Linux桌面发行版组成"><a href="#Linux桌面发行版组成" class="headerlink" title="Linux桌面发行版组成"></a>Linux桌面发行版组成</h3><ul><li><p>Linux内核</p></li><li><p>GNU工具&amp;库</p></li><li><p>附加软件、文档</p></li><li><p>窗口系统</p></li><li><p>窗口管理器</p></li><li><p>桌面环境</p></li></ul><h3 id="开源软件包"><a href="#开源软件包" class="headerlink" title="开源软件包"></a>开源软件包</h3><ul><li><p>二进制可执行文件</p></li><li><p>源代码发布方式（支持修改和重新编译）</p></li></ul><h3 id="定制发行版镜像"><a href="#定制发行版镜像" class="headerlink" title="定制发行版镜像"></a>定制发行版镜像</h3><ul><li><p>Gentoo Linux内核</p></li><li><p>T2</p></li><li><p>Linux From Scratch</p></li></ul><p>提供：</p><ul><li><p>所有软件的源代码</p></li><li><p>基本内核</p></li><li><p>编译器</p></li><li><p>定制工具</p></li><li><p>安装工具</p></li></ul><h3 id="软件包管理系统"><a href="#软件包管理系统" class="headerlink" title="软件包管理系统"></a>软件包管理系统</h3><p>发行版通常被分区成<strong>软件包</strong>，每个软件包包含一个特定的软件或服务</p><h4 id="软件包"><a href="#软件包" class="headerlink" title="软件包"></a>软件包</h4><p>软件包通常是<strong>已编译</strong>的<strong>机器码</strong>，由<strong>软件包管理器</strong>安装和卸载</p><h4 id="软件包组成"><a href="#软件包组成" class="headerlink" title="软件包组成"></a>软件包组成</h4><ul><li>元数据：软件描述、版本、依赖（提供给软件包管理器以使用元数据进行搜索、自动更新到最新版本、自动解决依赖）</li></ul><h3 id="常见软件包格式"><a href="#常见软件包格式" class="headerlink" title="常见软件包格式"></a>常见软件包格式</h3><ul><li><p>deb——Debian</p></li><li><p>rpm——Fedora(Red Hat)</p></li></ul><h3 id="流行的发行版"><a href="#流行的发行版" class="headerlink" title="流行的发行版"></a>流行的发行版</h3><h4 id="基于Dpkg-Debian系"><a href="#基于Dpkg-Debian系" class="headerlink" title="基于Dpkg(Debian系)"></a>基于Dpkg(Debian系)</h4><h5 id="商业发行版"><a href="#商业发行版" class="headerlink" title="商业发行版"></a>商业发行版</h5><ul><li>Ubuntu（流行的桌面发行版，由Canonical维护）</li></ul><h5 id="社区发行版"><a href="#社区发行版" class="headerlink" title="社区发行版"></a>社区发行版</h5><ul><li><p>Debian（强烈信奉自由软件，由志愿者维护）</p></li><li><p>Kubuntu（使用KDE桌面的Ubuntu）</p></li><li><p>Linux Mint（由Ubuntu派生，与Ubuntu兼容）</p></li><li><p>OpenGEU（Ubuntu派生）</p></li><li><p>Elementary OS（基于Ubuntu，形似Mac OS X）</p></li><li><p>gOS及其他</p></li></ul><h4 id="基于RPM（Red-Hat系）"><a href="#基于RPM（Red-Hat系）" class="headerlink" title="基于RPM（Red Hat系）"></a>基于RPM（Red Hat系）</h4><h5 id="商业发行版-1"><a href="#商业发行版-1" class="headerlink" title="商业发行版"></a>商业发行版</h5><ul><li><p>Red Hat Enterprise Linux（Fedora的商业版，由Red Hat维护）</p></li><li><p>Mandriva（最初派生自Red Hat，现由法国同名公司维护）</p></li><li><p>openSUSE（最初由Slackware分离出，现由Novell维护）</p></li></ul><h5 id="社区发行版-1"><a href="#社区发行版-1" class="headerlink" title="社区发行版"></a>社区发行版</h5><ul><li><p>Fedora（Red Hat社区版，会引入新特性测试）</p></li><li><p>PCLinuxOS（Mandriva派生版）</p></li><li><p>CentOS（Red Hat发展而来，由志愿者维护，旨在提供开源，与Red Hat完全兼容）</p></li></ul><h4 id="基于其他包格式"><a href="#基于其他包格式" class="headerlink" title="基于其他包格式"></a>基于其他包格式</h4><ul><li><p>ArchLinux（基于KISS——Keep It Simple and Stupid的滚动更新的操作系统）</p></li><li><p>Chakra（由ArchLinux派生，只是用KDE桌面的半滚动更新发行版）</p></li><li><p>Gentoo（面向高级用户，所有软件源代码需自行编译）</p></li><li><p>Slackware（最早发行版之一，1993年创建，由<a href="https://en.wikipedia.org/wiki/Patrick_Volkerding">Patrick Volkerding</a>维护）</p></li></ul><p>参考链接：</p><p><a href="https://zh.wikipedia.org/wiki/Linux%E5%8F%91%E8%A1%8C%E7%89%88">https://zh.wikipedia.org/wiki/Linux%E5%8F%91%E8%A1%8C%E7%89%88</a></p><p><a href="https://www.distrowatch.com/">distrowatch</a></p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>谷歌机器学习开源框架Tensorflow安装相关</title>
    <link href="/wilson-blog-hexo/2018/01/25/Tensorflow%E5%AE%89%E8%A3%85%E7%9B%B8%E5%85%B3/"/>
    <url>/wilson-blog-hexo/2018/01/25/Tensorflow%E5%AE%89%E8%A3%85%E7%9B%B8%E5%85%B3/</url>
    
    <content type="html"><![CDATA[<p>关于安装TensorFlow的一系列准备</p><span id="more"></span><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><p>tensorflow官方推荐安装是通过pip安装的，先来看看pip是什么</p><h3 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h3><h4 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h4><p>包安装器</p><h4 id="类似工具"><a href="#类似工具" class="headerlink" title="类似工具"></a>类似工具</h4><ul><li><p>linux的rpm(RPM Package Manager，递归写法，类似于GNU——GNU’s Not Unix)</p></li><li><p>nodejs的npm(node package manager)</p></li><li><p>java的Maven(严谨来说，PyPI相当于Maven，包社区)</p></li><li><p>Conda(由Python编写，语言无关的跨平台包管理器)</p></li><li><p>Anaconda(本身一个python数据科学平台，同时是一个平台无关的包管理器、环境管理器)</p></li></ul><h4 id="名称解释"><a href="#名称解释" class="headerlink" title="名称解释"></a>名称解释</h4><p>pip的解释应该是Python Install Package或者Package Index for Python(个人猜测，暂未找到官方解释)</p><p>因为通过pip为python安装包时的用法是</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">pip install <span class="hljs-keyword">some</span>-<span class="hljs-keyword">package</span><br></code></pre></td></tr></table></figure><h4 id="具体行为"><a href="#具体行为" class="headerlink" title="具体行为"></a>具体行为</h4><p>去PyPI（Python Package Index）下载相关包</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><h5 id="预安装情况"><a href="#预安装情况" class="headerlink" title="预安装情况"></a>预安装情况</h5><ul><li><p>装有大于等于2.7.9或3.4版本的python，已预装</p></li><li><p>使用通过virtualenv或者pyvenv创建的虚拟环境，已预装</p></li></ul><h5 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h5><p>下载<a href="https://bootstrap.pypa.io/get-pip.py">get-pip.py</a>文件并如下安装</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> <span class="hljs-built_in">get</span>-pip.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure><p>这种方式需要<strong>注意</strong>和其他包管理器的冲突，导致不一致情况</p><h6 id="附加下载"><a href="#附加下载" class="headerlink" title="附加下载"></a>附加下载</h6><p>get-pip.py同时会安装setuptools和wheel</p><p>如果不需要这两者，可通过添加参数来跳过其安装</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">python</span> <span class="hljs-built_in">get-pip.py</span> <span class="hljs-built_in">--no-index</span> <span class="hljs-built_in">--no-wheel</span><br></code></pre></td></tr></table></figure><h6 id="linux包安装方式"><a href="#linux包安装方式" class="headerlink" title="linux包安装方式"></a>linux包安装方式</h6><ul><li>Fedora</li></ul><p>Fedora21</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo yum <span class="hljs-keyword">install</span> python-pip<br></code></pre></td></tr></table></figure><p>Fedora22</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo dnf <span class="hljs-keyword">install</span> python-pip<br></code></pre></td></tr></table></figure><ul><li>CentOS&#x2F;RHEL</li></ul><p>EPEL 6 and EPEL 7</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo yum <span class="hljs-keyword">install</span> python-pip<br></code></pre></td></tr></table></figure><ul><li>openSUSE</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo zypper <span class="hljs-keyword">install</span> python-pip<br></code></pre></td></tr></table></figure><ul><li>Debian&#x2F;Ubuntu</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> install python-pip<br></code></pre></td></tr></table></figure><ul><li>Arch linux</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">sudo</span> pacman -S python2-pip<br></code></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo pacman -S python-pip</span><br></code></pre></td></tr></table></figure><h4 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h4><h5 id="linux-or-macOS"><a href="#linux-or-macOS" class="headerlink" title="linux or macOS"></a>linux or macOS</h5><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> -U pip<br></code></pre></td></tr></table></figure><h5 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h5><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">python -m pip <span class="hljs-keyword">install</span> -U pip<br></code></pre></td></tr></table></figure><h3 id="通过虚拟机安装运行tensorflow"><a href="#通过虚拟机安装运行tensorflow" class="headerlink" title="通过虚拟机安装运行tensorflow"></a>通过虚拟机安装运行tensorflow</h3><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> tf-nightly<br></code></pre></td></tr></table></figure><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><p>参考链接:</p><ul><li><p><a href="https://packaging.python.org/guides/installing-using-linux-tools/#installing-pip-setuptools-wheel-with-linux-package-managers">Installing pip&#x2F;setuptools&#x2F;wheel with Linux Package Managers</a></p></li><li><p><a href="https://pip.pypa.io/en/stable/installing/">pip installation</a></p></li><li><p><a href="https://pypi.python.org/pypi">PyPI</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tensorflow</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>虚拟机vmware使用——安装vmware-tools</title>
    <link href="/wilson-blog-hexo/2018/01/25/%E8%99%9A%E6%8B%9F%E6%9C%BAvmware%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85vmware-tools/"/>
    <url>/wilson-blog-hexo/2018/01/25/%E8%99%9A%E6%8B%9F%E6%9C%BAvmware%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85vmware-tools/</url>
    
    <content type="html"><![CDATA[<p>每次安装虚拟机都忘记怎么安装vmware tools，而不安装这个东西，用起来总是各种蹩脚，故做此整理。</p><span id="more"></span><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>虚拟机屏幕不能自适应大小，虽然vmware有相关设置，但貌似不能符合使用要求，因此仍需要安装vmware tools（感觉甚至像一个补丁）来完善vmware的使用，比如与宿主机的文件传输等。</p><h3 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h3><p>VMware Tools使用Perl编写，所以需要装有Perl</p><h3 id="操作步骤（以Ubuntu为例）"><a href="#操作步骤（以Ubuntu为例）" class="headerlink" title="操作步骤（以Ubuntu为例）"></a>操作步骤（以Ubuntu为例）</h3><ol><li><p>从VMware菜单栏中选择“安装VMware Tools”</p></li><li><p>找到VMware Tools安装文件（后缀为tar.gz的压缩文件）</p></li><li><p>打开终端，切换至root用户</p></li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo su</span><br></code></pre></td></tr></table></figure><ol start="4"><li>检查是否自动装载VMware Tools虚拟CD-ROM映像</li></ol><p>若已装载CD-ROM设备，则列出CD-ROM设备及其装载点</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">mount</span><br></code></pre></td></tr></table></figure><p><img src="http://trigolds.com/vm1.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">df</span><br></code></pre></td></tr></table></figure><p><img src="http://trigolds.com/vm2.png"></p><ol start="5"><li><p>若未装载，则需安装CD-ROM驱动器</p><ol><li>检查装载点目录</li></ol><p> 可能在&#x2F;mnt&#x2F;cdrom或&#x2F;media&#x2F;VMware Tools(例如本例)</p><ol start="2"><li>若不存在装载点目录则创建</li></ol> <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir <span class="hljs-regexp">/mnt/</span>cdrom<br></code></pre></td></tr></table></figure><ol start="3"><li>装载CD-ROM驱动器</li></ol> <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mount <span class="hljs-regexp">/dev/</span>cdrom <span class="hljs-regexp">/mnt/</span>cdrom<br></code></pre></td></tr></table></figure><blockquote><p>某些Linux发行版使用不同的设备名称，或以不同的方式组织&#x2F;dev目录，若CD-ROM驱动器不是&#x2F;dev&#x2F;cdrom或CD-ROM装载点不是&#x2F;mnt&#x2F;cdrom，则需根据实际情况进行装载</p></blockquote></li><li><p>转到工作目录，例如&#x2F;tmp</p></li><li><p>安装VMware Tools前，应删除以前的vmware-tools-distrib目录</p></li><li><p>解压安装包（若直接解压可能会失败，因为这里解压会创建vmware-tools-distrib目录，而当前路径为只读，不允许mkdir）</p></li><li><p>所以需要将VMware Tools拷贝到其他目录再解压</p></li></ol><p>可看到成功解压</p><ol start="10"><li><p>进入解压后的软件目录并安装</p></li><li><p>安装完成</p></li></ol><p>Bingo! Well done！</p><p>接下来就可以使用VMware一系列拓展功能了（可能需要重新启动虚拟机以使设置生效）</p><ol start="12"><li>如需要安装后卸载CD-ROM镜像，则执行以下命令（若Linux自动装载CD-ROM则无需卸载，在安装成功后会自动卸载）</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">umount <span class="hljs-regexp">/dev/</span>cdrom<br></code></pre></td></tr></table></figure><p>参考链接：</p><p><a href="https://docs.vmware.com/cn/VMware-Workstation-Pro/12.0/com.vmware.ws.using.doc/GUID-08BB9465-D40A-4E16-9E15-8C016CC8166F.html">https://docs.vmware.com/cn/VMware-Workstation-Pro/12.0/com.vmware.ws.using.doc/GUID-08BB9465-D40A-4E16-9E15-8C016CC8166F.html</a></p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式学习笔记（下）</title>
    <link href="/wilson-blog-hexo/2018/01/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
    <url>/wilson-blog-hexo/2018/01/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>继设计模式学习笔记（上）</p><span id="more"></span><h3 id="15-抽象工厂模式"><a href="#15-抽象工厂模式" class="headerlink" title="15 抽象工厂模式"></a>15 抽象工厂模式</h3><h4 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h4><p>不同数据库在SQL的具体实现上有差距，若存在系统中使用SQL语句上过多的使用专门的某种数据库的SQL语句，在迁移数据库时，会导致很多SQL在新的数据库中不能运行。</p><h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>使用原生SQL语句</p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span><br>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> _id;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> ID<br>&#123;<br><span class="hljs-keyword">get</span> &#123;<span class="hljs-keyword">return</span> _id;&#125;<br><span class="hljs-keyword">set</span> &#123;_id = <span class="hljs-keyword">value</span>; &#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> _name;;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Name<br>&#123;<br><span class="hljs-keyword">get</span> &#123;<span class="hljs-keyword">return</span> _name; &#125;<br><span class="hljs-keyword">set</span> &#123; _name = <span class="hljs-keyword">value</span>; &#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="模式解释"><a href="#模式解释" class="headerlink" title="模式解释"></a>模式解释</h4><p>工厂方法模式是定义一个用于创建对象的接口，让子类决定实例化哪一个类</p><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p>由于多态的存在，声明User接口的对象事先不知道在访问哪个数据库，却可以在运行时正常，达到业务逻辑与数据访问解耦</p><h4 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h4><blockquote><p>提供一个创建一系列相关或相互依赖对象的接口，而无需指定具体的类</p></blockquote><h4 id="实际使用步骤"><a href="#实际使用步骤" class="headerlink" title="实际使用步骤"></a>实际使用步骤</h4><p>先通过抽象工厂创建一个具体工厂，再通过具体工厂生产特定实现的产品对象</p><p>即为创建不同的产品对象，应使用不同的具体工厂</p><h4 id="抽象工厂优缺点分析"><a href="#抽象工厂优缺点分析" class="headerlink" title="抽象工厂优缺点分析"></a>抽象工厂优缺点分析</h4><p>优点：</p><ul><li><p>易于交换产品系列：具体工厂类在一个应用中只需要在初始化时出现一次，使得改变一个应用的具体工厂变得容易，只需要改变具体工厂即可使用不同的产品配置</p></li><li><p>让具体的创建实例过程与客户端分离：客户端通过抽象接口操纵实例，产品的具体类名被具体工厂的实现分离，不会出现在客户端代码中</p></li></ul><p>缺点：</p><p>增加一个表，需要增加三个类，并更改三个工厂类才能完全实现</p><h4 id="抽象工厂改进"><a href="#抽象工厂改进" class="headerlink" title="抽象工厂改进"></a>抽象工厂改进</h4><p>使用简单工厂</p><p>去除三个抽象工厂，使用一个简单工厂，根据条件判断工厂类型去实例不同的具体工厂</p><h4 id="反射-抽象工厂的数据访问程序"><a href="#反射-抽象工厂的数据访问程序" class="headerlink" title="反射+抽象工厂的数据访问程序"></a>反射+抽象工厂的数据访问程序</h4><p>去某个地方找应该要实例化的类是哪一个——依赖注入（本需要专门的IOC容器提供，例如Spring）</p><p>常规写法：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">IUser result <span class="hljs-operator">=</span> new SqlserverUser()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>反射写法：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">IUser result <span class="hljs-operator">=</span> (IUser)Assembly.Load(<span class="hljs-string">&quot;抽象工厂模式&quot;</span>).CreateInstance(<span class="hljs-string">&quot;抽象工厂模式.SqlserverUser&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>差别：原来的实例化写死在程序里，而通过反射可以利用字符串实例化对象，变量可以更换（实例化由编译时转为运行时）</p><h4 id="反射-配置文件实现数据访问程序"><a href="#反射-配置文件实现数据访问程序" class="headerlink" title="反射+配置文件实现数据访问程序"></a>反射+配置文件实现数据访问程序</h4><p>使用读取配置文件的方式来决定要实例化的数据库访问类</p><p>利用反射解决了数据库访问时的可维护、可拓展问题</p><p>在使用简单工厂的地方，都可以考虑使用反射来去除条件判断，解除分支判断带来的耦合</p><h3 id="16-状态模式"><a href="#16-状态模式" class="headerlink" title="16 状态模式"></a>16 状态模式</h3><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>方法过长（Long Method）极有可能有坏味道</p><p>面向对象设计希望做到代码的责任分解</p><h4 id="概念解释"><a href="#概念解释" class="headerlink" title="概念解释"></a>概念解释</h4><p>当一个对象的内在状态改变时允许改变其行为，这个对象看起来像是改变了其类</p><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><p>主要解决当控制一个对象状态转换的条件表达式过于复杂时，把状态的判断逻辑转移到表示不同状态的一系列类中，可以把复杂的判断逻辑简化</p><h4 id="优缺点分析"><a href="#优缺点分析" class="headerlink" title="优缺点分析"></a>优缺点分析</h4><p>优点：</p><ul><li>将与特定状态相关的行为局部化，并将不同状态的行为分割开</li></ul><blockquote><p>将特定的状态相关的行为放入一个对象中，由于所有与状态相关的代码都存在于某个类中，所以通过定义新的子类可以容易地增加新的状态和转换</p></blockquote><h4 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h4><p>消除庞大的条件分支语句（大的分支判断会难以修改和拓展）</p><p>状态模式通过把各种状态转移逻辑分部到State的子类之间，来减少相互间的依赖</p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>当一个对象的行为取决于其状态，并且必须在运行时根据状态改变其行为</p><h3 id="17-适配器模式"><a href="#17-适配器模式" class="headerlink" title="17 适配器模式"></a>17 适配器模式</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作</p><h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><p>电源适配器：可以将任意伏的电转换成需要的电压</p><h4 id="软件应用场景"><a href="#软件应用场景" class="headerlink" title="软件应用场景"></a>软件应用场景</h4><p>系统的数据和行为都正确，但接口不符时，考虑使用适配器。</p><p>目的是使控制范围外的一个原有对象与某个接口匹配。</p><p>主要应用于希望复用现存的类，但接口与复用环境要求不一致的情况</p><h4 id="类型（GoF中的分类）"><a href="#类型（GoF中的分类）" class="headerlink" title="类型（GoF中的分类）"></a>类型（GoF中的分类）</h4><ul><li><p>类适配器模式</p></li><li><p>对象适配器模式</p></li></ul><p>类适配器通过多重继承对一个接口与另一个接口进行匹配，但C#、VB.NET、Java等不支持多重继承（C++支持），此处讲对象适配器</p><h4 id="使用时机"><a href="#使用时机" class="headerlink" title="使用时机"></a>使用时机</h4><p>使用一个已存在的类，如果其接口（方法）和要求不符，则考虑使用适配器</p><p>两个类所做事情相同或相似，但具有不同的接口要使用它时，客户端可以统一调用同一接口，这样更简单、直接、紧凑</p><h3 id="18-备忘录模式"><a href="#18-备忘录模式" class="headerlink" title="18 备忘录模式"></a>18 备忘录模式</h3><h4 id="概念解析"><a href="#概念解析" class="headerlink" title="概念解析"></a>概念解析</h4><p>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可以将该对象恢复到原先保存的状态</p><h4 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h4><p>用于功能比较复杂，但需维护或记录属性历史的类，或需要保存的属性只是众多属性中的一小部分时，Originator(发起者)可根据保存的Memento(备忘录)信息还原到前一状态</p><h4 id="备忘录类"><a href="#备忘录类" class="headerlink" title="备忘录类"></a>备忘录类</h4><p>使用备忘录可以将复杂的对象内部信息对其他对象屏蔽起来，从而恰当地保持封装的边界</p><h4 id="使用注意点"><a href="#使用注意点" class="headerlink" title="使用注意点"></a>使用注意点</h4><p>角色状态需要完整存储到备忘录对象中，如果状态数据很大很多，在资源消耗上，备忘录对象会很耗内存</p><h3 id="19-组合模式"><a href="#19-组合模式" class="headerlink" title="19 组合模式"></a>19 组合模式</h3><h4 id="概念解析-1"><a href="#概念解析-1" class="headerlink" title="概念解析"></a>概念解析</h4><p>将对象组合成树形结构以表示“部分——整体”的层次结构。使得用户对单个对象和组合对象的使用具有一致性</p><h4 id="方式"><a href="#方式" class="headerlink" title="方式"></a>方式</h4><ul><li><p>透明方式</p><blockquote><p>在Component中声明所有用来管理子对象的方法，其中包括add、remove等，这样实现Component接口的所有子类都具备了add、remove。好处是叶节点和枝节点对于外界没有区别，完全具备一致的行为接口。缺点是Leaf类本身不具备add、remove方法的功能，实现其没有意义</p></blockquote></li><li><p>安全方式</p><blockquote><p>在Component接口中不声明add、remove方法，子类的Leaf不需要实现其，而在Component声明所有用来管理子类的对象，不过由于不够透明，所以叶和枝类将不具有相同接口，客户端调用需要做相应判断，带来不便</p></blockquote></li></ul><h4 id="适用场景-1"><a href="#适用场景-1" class="headerlink" title="适用场景"></a>适用场景</h4><p>需求中体现部分与整体层次的结构时，及希望用户可以忽略组合对象与单个对象的不同，统一地使用组合结构中的所有对象</p><h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><p>基本对象可以被组合成更复杂的组合对象，而组合对象又可以被组合，不断递归，客户端代码任何用到基本对象的地方都可以使用组合对象</p><p>用户不用关心到底是处理一个叶节点还是处理一个组合组件，不用为定义组合而写选择判断语句（可以一致地使用组合结构和单个对象）</p><h3 id="20-迭代器模式"><a href="#20-迭代器模式" class="headerlink" title="20 迭代器模式"></a>20 迭代器模式</h3><h4 id="概念解析-2"><a href="#概念解析-2" class="headerlink" title="概念解析"></a>概念解析</h4><p>提供一种方法顺序访问一个聚合对象中各个元素，而又不暴露该对象的内部表示</p><h4 id="内部原理"><a href="#内部原理" class="headerlink" title="内部原理"></a>内部原理</h4><p>迭代器（Iterator）模式就是分离了集合对象的遍历行为，抽象出一个迭代器类来负责，这样既可以不暴露集合的内部结构，又可以让外部代码透明地访问集合内部的数据</p><h3 id="21-单例模式"><a href="#21-单例模式" class="headerlink" title="21 单例模式"></a>21 单例模式</h3><h4 id="实现关键点"><a href="#实现关键点" class="headerlink" title="实现关键点"></a>实现关键点</h4><ol><li><p>构造方法私有化，使得外部不能通过new来获得实例对象</p></li><li><p>向外部提供<strong>静态</strong>（因为外部无法获得该类对象去调用其方法）公有方法获得实例，内部实现单例控制</p></li><li><p>声明静态类变量，用来存放实例化出的对象</p></li></ol><h4 id="概念解析-3"><a href="#概念解析-3" class="headerlink" title="概念解析"></a>概念解析</h4><p>保证一个类只有一个实例，并提供一个访问它的全局访问点</p><p>通常我们可以让一个全局变量使得一个对象被访问，但不能防止实例化多个对象。最好的方法是让类自身负责保存它的唯一实例，这个类可保证没有其他实例可以被创建，并且它提供一个访问该实例的方法</p><h4 id="优势分析"><a href="#优势分析" class="headerlink" title="优势分析"></a>优势分析</h4><p>单例模式因为Singleton类封装它的唯一实例，这样它可以严格控制客户怎样访问它及何时访问它。对唯一实例的受控访问</p><h4 id="多线程时的单例"><a href="#多线程时的单例" class="headerlink" title="多线程时的单例"></a>多线程时的单例</h4><p>给进程一把锁，lock是确保当一个线程位于代码的临界区时，另一个线程不进入临界区。如果其他线程试图进入锁定的代码，则它将一直等待（被阻止），直至该对象被释放</p>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式学习笔记（上）</title>
    <link href="/wilson-blog-hexo/2018/01/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <url>/wilson-blog-hexo/2018/01/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><ol><li><p>两个类之间是is-a的关系可以考虑用继承</p></li><li><p>而两个类之间是has-a，表示某个角色具有某一项责任，不适合用继承</p></li></ol><p>例如：飞机场有飞机，但是飞机不能去继承飞机场</p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>多态表示不同的对象可以执行相同的动作，但要通过它们自己的实现代码来执行</p><p>特点：（子替父演戏实例）</p><ol><li>子类以父类身份出现</li><li>子类在工作时以自己的方式实现</li><li>子类以父类身份出现时，子类特有的属性和方法不可以使用</li></ol><h4 id="多态原理"><a href="#多态原理" class="headerlink" title="多态原理"></a>多态原理</h4><p>当方法被调用时，无论对象是否被转换成其父类，都只有位于对象继承最末端的方法实现会被调用。<br>即父类的抽象方法是按照其运行时类型而非编译时类型进行动态绑定调用的</p><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><ul><li><p>不能实例化</p></li><li><p>抽象方法必须被子类重写</p></li><li><p>若类包含抽象方法，则类必须定义为抽象类</p></li></ul><p>总结：抽象类代表一个<strong>抽象</strong>概念，它提供一个继承的<code>出发点</code>，当设计一个新的抽象类时，<strong>一定是用来继承的</strong>。</p><p>在一个继承关系树里，树叶节点应为具体类，树枝节点均应为抽象类。</p><p>例如：动物是抽象类，猫是具体类，而当猫划分品种时，比如包含金丝猫和其他品种，那猫应该是树枝，也应是抽象类。</p><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>接口是把隐式公共方法和属性组合起来，以封装特定功能的一个集合。</p><p>一旦类实现了接口，类就可以支持接口所指定的所有属性和成员。</p><p>声明接口在语法上与声明抽象类完全相同，但不允许提供接口中任何成员的执行方式（没有具体实现）</p><p>所以接口不能<strong>实例化</strong>、不能有<strong>构造方法</strong>和<strong>字段</strong>、不能有<strong>修饰符</strong>、不能声明为<strong>抽象的</strong>或<strong>静态的</strong></p><p>实现接口的类必须实现接口中所有方法和属性</p><h3 id="区分抽象类和接口"><a href="#区分抽象类和接口" class="headerlink" title="区分抽象类和接口"></a>区分抽象类和接口</h3><h4 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h4><ol><li><p>类是对对象的抽象</p></li><li><p>抽象类是对类的抽象</p></li><li><p>接口是对行为的抽象</p></li></ol><h4 id="对象是否有相似关联"><a href="#对象是否有相似关联" class="headerlink" title="对象是否有相似关联"></a>对象是否有相似关联</h4><ol><li><p>若行为跨越不同类的对象，可使用接口</p></li><li><p>对于相似的类对象，用继承抽象类</p></li></ol><h4 id="设计角度"><a href="#设计角度" class="headerlink" title="设计角度"></a>设计角度</h4><ol><li><p>抽象类是从子类中发现了公共的东西，泛化出父类，然后子类继承父类</p></li><li><p>接口根本不知道子类的存在，方法如何实现不确认，预先定义</p></li></ol><p>通过重构改善既有代码的设计<br>所有抽象类往往通过重构得来</p><h3 id="面向对象设计（OOD）"><a href="#面向对象设计（OOD）" class="headerlink" title="面向对象设计（OOD）"></a>面向对象设计（OOD）</h3><ol><li><p>可维护</p></li><li><p>可复用</p></li><li><p>可拓展</p></li><li><p>灵活性好</p></li></ol><h3 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h3><p>关联</p><p>聚合（弱拥有）：A对象可以包含B对象，但B对象不是A对象的一部分</p><p>组合（强拥有）：严格的整体与部分的关系</p><p>依赖</p><h3 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h3><p>用单独的类考虑创造实例的过程</p><h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><h4 id="官方定义"><a href="#官方定义" class="headerlink" title="官方定义"></a>官方定义</h4><p>它定义了算法家族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化，不会影响到使用算法的客户。</p><h4 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h4><p>所有的算法完成相同的工作，只是实现不同，它可以以相同的方式调用所有的算法，减少了各种算法类与使用算法类之间的耦合。</p><h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><p>另外策略模式简化了单元测试，因为每个算法有独立的类，可以通过自己的接口单独测试。</p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>当不同的行为堆砌在一个类中时，很难避免使用条件语句来选择合适的行为。将这些行为进行封装在一个个独立的Strategy类中，就可以在使用这些行为的类中消除条件语句。</p><h4 id="策略模式结合简单工厂模式"><a href="#策略模式结合简单工厂模式" class="headerlink" title="策略模式结合简单工厂模式"></a>策略模式结合简单工厂模式</h4><p>在基本策略模式中，选择所用具体实现的职责由客户端对象承担，并转给策略模式的对象。</p><p>当策略与简单工厂结合，选择的具体实现也可以由Context来承担，最大化减轻客户端职责。</p><h3 id="单一职责"><a href="#单一职责" class="headerlink" title="单一职责"></a>单一职责</h3><h4 id="官方定义-1"><a href="#官方定义-1" class="headerlink" title="官方定义"></a>官方定义</h4><p>就一个类而言，应该仅有一个引起它变化的原因。</p><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>若一个类承担的职责过多，就等于把这些职责耦合在一起，一个职责的变化可能会削弱或者抑制这个类完成其他职责的能力。</p><p>这种耦合会导致<strong>脆弱的设计</strong>，当变化发生时，设计会遭受到意想不到的破坏。</p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>手机承担多职责</p><p>谷歌将一切需求整合到一个文本框</p><h3 id="开放-封闭原则（The-Open-Closed-Principle-开闭原则OCP）"><a href="#开放-封闭原则（The-Open-Closed-Principle-开闭原则OCP）" class="headerlink" title="开放-封闭原则（The Open-Closed Principle,开闭原则OCP）"></a>开放-封闭原则（The Open-Closed Principle,开闭原则OCP）</h3><p>实例</p><p>不能修改，但可以扩展的一国两制</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>Open for extension对扩展开放</p><p>Closed for modification对更改封闭</p><p>实例</p><p>早到早下班，晚到晚下班，对业绩成效修改关闭，对时间制度拓展开放的弹性工作制</p><h3 id="依赖-倒转原则"><a href="#依赖-倒转原则" class="headerlink" title="依赖-倒转原则"></a>依赖-倒转原则</h3><h4 id="官方定义-2"><a href="#官方定义-2" class="headerlink" title="官方定义"></a>官方定义</h4><p>抽象不应该依赖细节，细节应该依赖于抽象。</p><h4 id="解释-1"><a href="#解释-1" class="headerlink" title="解释"></a>解释</h4><p>针对接口编程，不针对实现编程。</p><h4 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h4><ol><li><p>高层模块不应该依赖低层模块，两个都应该依赖抽象</p></li><li><p>抽象不应该依赖细节，细节应该依赖抽象</p></li></ol><h3 id="里氏代换原则"><a href="#里氏代换原则" class="headerlink" title="里氏代换原则"></a>里氏代换原则</h3><h4 id="解释-2"><a href="#解释-2" class="headerlink" title="解释"></a>解释</h4><p>一个软件实体如果使用的是一个父类，那么一定适用于其子类，而且它察觉不出父类对象和子类对象的区别。</p><p>即把父类替换成其子类，程序的行为没有变化。</p><h4 id="简言之"><a href="#简言之" class="headerlink" title="简言之"></a>简言之</h4><p>子类型必须能够替换掉它们的父类型</p><h3 id="依赖倒转与面向对象"><a href="#依赖倒转与面向对象" class="headerlink" title="依赖倒转与面向对象"></a>依赖倒转与面向对象</h3><p>依赖倒转是面向对象设计的标志，若编写程序时考虑如何针对抽象编程而不是针对细节编程。</p><p>即程序中所有依赖关系都终止于抽象类或者接口，即是面向对象设计，反之则是过程化设计。</p><h3 id="装饰模式（Decorator）"><a href="#装饰模式（Decorator）" class="headerlink" title="装饰模式（Decorator）"></a>装饰模式（Decorator）</h3><h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><p>Avatar系统（个人形象系统）</p><h4 id="官方定义-3"><a href="#官方定义-3" class="headerlink" title="官方定义"></a>官方定义</h4><p>动态地给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更为灵活</p><h4 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h4><p>把每个要装饰的功能放在单独的类，并用这个类包装要修饰的对象。</p><p>可以在运行时根据需要有选择地、按顺序地使用装饰功能包装对象。</p><h4 id="优势-1"><a href="#优势-1" class="headerlink" title="优势"></a>优势</h4><ol><li><p>把类中的装饰功能从类中移除，简化原有类</p></li><li><p>有效把类的核心职责和装饰功能区分开，去除相关类中重复的装饰逻辑</p></li></ol><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><h4 id="GOF解释"><a href="#GOF解释" class="headerlink" title="GOF解释"></a>GOF解释</h4><p>为其他对象提供一种代理以控制对这个对象的访问</p><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ol><li><p>远程代理，为一个对象在不同的地址空间提供局部代表。这样可以隐藏一个对象存在于不同地址空间的事实。</p></li><li><p>虚拟代理，根据需要创建开销很大的对象。通过它来存放实例化需要很长时间的真实对象。（达到性能最优化）</p></li><li><p>安全代理，用来控制真实对象访问时的权限</p></li><li><p>智能指引，当调用真实的对象时，代理处理另外一些事</p><p> 例如：</p><ul><li><p>计算真实对象的引用次数，当该对象没有引用时可以自动释放它</p></li><li><p>当第一次引用一个持久化对象时，将它装入内存</p></li><li><p>在访问一个实际对象前，检查是否已经锁定它，以确保其他对象不能改变它。</p></li></ul><p> 以上都是通过代理在访问一个对象时附加一些内务处理</p></li></ol><h3 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>定义一个用于创建对象的接口，让子类决定实例化哪一个类。工方法使一个类的实例化延迟到其子类。</p><h4 id="与简单工厂的关系"><a href="#与简单工厂的关系" class="headerlink" title="与简单工厂的关系"></a>与简单工厂的关系</h4><ol><li><p>实现对修改关闭，对拓展开放，符合开闭原则</p></li><li><p>依赖倒置，依赖抽象而非依赖实现</p></li></ol><h4 id="实现特点"><a href="#实现特点" class="headerlink" title="实现特点"></a>实现特点</h4><p>工厂方法模式实现时，客户端需要决定实例化哪一个工厂来实现运算类。</p><p>工厂方法把简单工厂的内部逻辑判断转移到了客户端代码来进行。</p><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><p>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象</p><h4 id="解释-3"><a href="#解释-3" class="headerlink" title="解释"></a>解释</h4><p>从一个对象再创建另一个可定制的对象，而且不需知道任何创建的细节</p><h4 id="使用场景-2"><a href="#使用场景-2" class="headerlink" title="使用场景"></a>使用场景</h4><p>一般在初始化的信息不发生变化的情况下，克隆是最好的办法。</p><p>既隐藏了对象创建的细节，又对性能大大提高（省去调用构造方法的时间）</p><h4 id="优势-2"><a href="#优势-2" class="headerlink" title="优势"></a>优势</h4><p>不用重新初始化对象，而是动态地获得对象运行时的状态</p><h4 id="浅复制和深复制"><a href="#浅复制和深复制" class="headerlink" title="浅复制和深复制"></a>浅复制和深复制</h4><p>浅复制：被复制对象的所有变量都含有与原来对象相同的值，而所有对其他对象的引用都仍然指向原来的对象。</p><p>深复制：把引用对象的变量指向复制过的新对象，而不是原有的被引用的对象。</p><h3 id="模板方法"><a href="#模板方法" class="headerlink" title="模板方法"></a>模板方法</h3><h4 id="使用场景-3"><a href="#使用场景-3" class="headerlink" title="使用场景"></a>使用场景</h4><p>既然使用继承，并且肯定这个继承有意义，就应该成为子类的模板，所有重复的代码都应该上升到父类，而非每个子类都去重复。</p><p>当要完成在某一个细节层次一致的一个过程或一系列步骤，但其个别步骤在更详细的层次上的实现可能不同时，通常考虑用模板方法处理。</p><h4 id="官方定义-4"><a href="#官方定义-4" class="headerlink" title="官方定义"></a>官方定义</h4><p>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p><h3 id="迪米特法则（最少知道原则）"><a href="#迪米特法则（最少知道原则）" class="headerlink" title="迪米特法则（最少知道原则）"></a>迪米特法则（最少知道原则）</h3><h4 id="官方定义-5"><a href="#官方定义-5" class="headerlink" title="官方定义"></a>官方定义</h4><p>如果两个类不必彼此通信，那么这两个类就不应单发生直接的相互作用。如果其中一个类需要调用另一个类的某一个方法的话，可以通过第三者转发这个调用。</p><h4 id="解释-4"><a href="#解释-4" class="headerlink" title="解释"></a>解释</h4><p>迪米特法则首先强调的前提是类的结构设计上，每一个类都应当尽量降低成员的访问权限。</p><p>即一个类包装好自己的私有状态，不需要让别的类知道的字段或行为就不要公开。</p><p>类之间的耦合越弱，越有利于复用。一个处在若耦合的类被修改，不会对有关系的类造成波及。</p><h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><p>公司办事找负责人</p><h3 id="外观模式Facade（门面模式）"><a href="#外观模式Facade（门面模式）" class="headerlink" title="外观模式Facade（门面模式）"></a>外观模式Facade（门面模式）</h3><h4 id="官方定义-6"><a href="#官方定义-6" class="headerlink" title="官方定义"></a>官方定义</h4><p>为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</p><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><p>完美体现依赖倒转原则和迪米特法则</p><h4 id="使用场景-4"><a href="#使用场景-4" class="headerlink" title="使用场景"></a>使用场景</h4><ol><li><p>设计初期，有意识地将不同的两个层分离</p></li><li><p>开发阶段，子系统往往因为不断的重构演化而变得越来越复杂，增加外观Facade可以提供一个简单的接口，减少它们之间的依赖</p></li><li><p>在维护一个遗留的大型系统时，可能这个系统已经非常难以维护和扩展了。为新系统开发一个外观Facade类，来提供设计粗糙或高度复杂的遗留代码的比较清晰的接口，让新系统与Facade对象交互，Facade与遗留代码交互所有复杂的工作。</p></li></ol><h3 id="建造者模式（生成器模式）"><a href="#建造者模式（生成器模式）" class="headerlink" title="建造者模式（生成器模式）"></a>建造者模式（生成器模式）</h3><p>讲一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p><h4 id="使用场景-5"><a href="#使用场景-5" class="headerlink" title="使用场景"></a>使用场景</h4><p>当创建复杂对象的算法应该独立于该对象的组成部分以及它们的装配方法时适用的模式。</p><h3 id="观察者模式-发布-订阅模式，Publish-Subscribe"><a href="#观察者模式-发布-订阅模式，Publish-Subscribe" class="headerlink" title="观察者模式(发布-订阅模式，Publish&#x2F;Subscribe)"></a>观察者模式(发布-订阅模式，Publish&#x2F;Subscribe)</h3><p>定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态发生变化时，会通知所有观察者对象，使它们能够自动更新自己。</p><h4 id="背景-1"><a href="#背景-1" class="headerlink" title="背景"></a>背景</h4><p>将一个系统分隔成一系列相互协作的类有一个很不好的副作用，就是需要维护相关对象间的一致性。我们不希望为了维持一致性而使各类紧密耦合，这样会给维护、拓展和重用都带来不便。</p><h4 id="使用场景-6"><a href="#使用场景-6" class="headerlink" title="使用场景"></a>使用场景</h4><ol><li><p>当一个对象的改变需要同时改变其他对象，而且不知道具体有多少对象有待改变。</p></li><li><p>一个抽象模型有两个方面，其中一方面依赖于另一方面，这时用观察者模式可以将这两者封装在独立的对象中使它们各自独立地改变和复用。</p></li></ol><h3 id="委托方法"><a href="#委托方法" class="headerlink" title="委托方法"></a>委托方法</h3><h4 id="解释-5"><a href="#解释-5" class="headerlink" title="解释"></a>解释</h4><p>委托就是一种引用方法的类型。一旦为委托分配了方法，委托将与该方法具有完全相同的行为。</p><p>委托方法的使用可以像其他任何方法一样，具有参数和返回值。</p><p>委托可以看作是对函数的抽象，是函数的‘类’，委托的实例将代表一个具体的函数。</p>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从输入网址到浏览器呈现内容期间发生的事情</title>
    <link href="/wilson-blog-hexo/2018/01/24/%E4%BB%8E%E8%BE%93%E5%85%A5%E7%BD%91%E5%9D%80%E5%88%B0%E6%B5%8F%E8%A7%88%E5%99%A8%E5%91%88%E7%8E%B0%E5%86%85%E5%AE%B9%E6%9C%9F%E9%97%B4%E5%8F%91%E7%94%9F%E7%9A%84%E4%BA%8B%E6%83%85/"/>
    <url>/wilson-blog-hexo/2018/01/24/%E4%BB%8E%E8%BE%93%E5%85%A5%E7%BD%91%E5%9D%80%E5%88%B0%E6%B5%8F%E8%A7%88%E5%99%A8%E5%91%88%E7%8E%B0%E5%86%85%E5%AE%B9%E6%9C%9F%E9%97%B4%E5%8F%91%E7%94%9F%E7%9A%84%E4%BA%8B%E6%83%85/</url>
    
    <content type="html"><![CDATA[<h3 id="主线流程"><a href="#主线流程" class="headerlink" title="主线流程"></a>主线流程</h3><ol><li><p>浏览器地址栏输入网址<a href="http://www.coder.com/">www.coder.com</a></p></li><li><p>浏览器发送一个UDP包给DNS服务器</p></li><li><p>DNS服务器返回coder.com的IP</p></li><li><p>（optional）浏览器将该IP缓存起来，以提高下次访问速度（Chrome通过chrome:&#x2F;&#x2F;net-internals&#x2F;#dns查看）</p></li><li><p>浏览器利用获取到的IP发起HTTP请求，但是HTTP Request&#x2F;Response必须在TCP这个“虚拟的连接”上发送和接收</p></li><li><p>建立“虚拟的”TCP连接需要<strong>本机IP</strong>、<strong>本机端口</strong>、<strong>服务器IP</strong>、<strong>服务器端口</strong></p></li><li><p>本机端口由操作系统给浏览器随机分配</p></li><li><p>服务器端口使用相应服务的端口，例如HTTP服务：80</p></li><li><p>三次握手后，客户端与服务器建立TCP连接</p></li><li><p>一个HTTP GET请求经过多个路由器转发，达到服务器端（HTTP数据包可能被下层分片传输）</p></li><li><p>web服务器处理请求（三种方式）</p><ul><li><p>用一个线程处理所有请求，但同一时刻只能处理一个，性能问题严重</p></li><li><p>为每个请求分配一个进程&#x2F;线程，但当连接太多时，服务器端的进程&#x2F;线程耗费大量内存资源，进程&#x2F;线程切换导致CPU不堪重负</p></li><li><p>复用I&#x2F;O：众多Web服务器采用复用结构，例如通过epoll方式监视所有连接，当连接状态发生变化（如有数据可读），才用一个进程&#x2F;线程对该连接进行处理，处理完继续监视，等待下次变化。该方式可用少量进程&#x2F;线程应对大量的连接请求</p></li></ul></li><li><p>以Nginx为例，对于HTTP GET请求，Nginx利用epoll方式读取出来，Nginx判断该请求是静态or动态</p></li><li><p>若为静态（HTML、JavaScript、CSS、图片等），依赖于Nginx配置，可能转发到其他缓存服务器，可能读取本机硬盘上相关文件直接返回</p></li><li><p>若为动态，需要后端服务器（如Tomcat）处理后返回，则转发到Tomcat，若后端Tomcat不止一个，则按策略选取一个，Nginx选取方式</p><ul><li><p>轮询：按照次序依次向服务器转发</p></li><li><p>权重：每个后端服务器指定一个权重，决定向每个服务器转发的几率</p></li><li><p>ip_hash：根据IP进行hash，找到要转发的服务器，则同一个客户端IP总会被转发到同一个后端服务器</p></li><li><p>fair：根据后端服务器相应时间分配请求，响应时间短的优先分配</p></li></ul></li><li><p>无论哪种策略，Nginx需要将HTTPRequest转发给后端Tomcat，并把Tomcat输出的HttpResponse转发给浏览器</p></li><li><p>Http Request到达Tomcat（由Java编写，可处理Servlet&#x2F;JSP的容器），Tomcat可能为每个请求分配一个线程进行处理，即BIO模式（Blocking I&#x2F;O）或I&#x2F;O多路复用模式或仅使用若干线程处理所有请求（NIO模式）</p></li><li><p>Http Request被交给某个Servlet处理，Servlet将请求转换，变成后端框架所用参数格式，分发给某个Controller(Spring)或Action(Struts)</p></li><li><p>后端处理，包括和缓存、数据库等组件交互，最终返回Http Response，本例即为一个HTML页面</p></li><li><p>Nginx将Http Response发送给浏览器，若使用HTTP1.1，该TCP连接默认为keep-alive，即不能关闭</p></li><li><p>若HTTP1.0，需根据HTTP Request中是否有Connection:keep-alive判断该TCP连接是否能关闭</p></li><li><p>浏览器收到Http Response，读取HTML页面</p></li><li><p>该页面引用大量其他资源，例如js、css、图片等，这些资源位于服务器端，并且在另一个域名static.coder.com下</p></li><li><p>浏览器需要一一下载，从DNS获取IP开始，重复上述操作，除去Tomcat处理</p></li><li><p>由于要下载的资源众多，浏览器会建立多个TCP连接，并行下载</p></li><li><p>但同一时间对同一域名的请求数量不能太多，否则服务器访问量太大无法承受</p></li><li><p>因此浏览器做限制，例如Chrome在HTTP1.1只能并行下载6个资源</p></li><li><p>当服务器给浏览器发送静态文件，会声明过期时间（Cache-Control或Expire），浏览器可将文件缓存到本地，第二次请求相同文件时，若不过期则直接从本地读取</p></li><li><p>若过期，浏览器询问服务器端，文件是否变更（根据上一次服务器回传的Last-Modified和ETag），若未修改（304 Not Modified），则可使用本次缓存，否则服务器将最新的文件发回浏览器</p></li><li><p>若按Ctrl+F5则强制发出GET请求，无视缓存（Chrome使用chrome:&#x2F;&#x2F;view-http-cache查看缓存）</p></li><li><p>浏览器得到HTML（浏览器将其变成DOM Tree）、CSS（浏览器将其变成CSS Rule Tree）、JavaScript（可修改DOM Tree）</p></li><li><p>浏览器通过DOM Tree和CSS Rule Tree生成“Render Tree”，计算每个元素的位置和大小，进行布局，然后调用操作系统的API进行绘制</p></li></ol><p>参考：<a href="http://mp.weixin.qq.com/s/V1fUjSP3BwJ1CbEM0MC6pw">http://mp.weixin.qq.com/s/V1fUjSP3BwJ1CbEM0MC6pw</a></p>]]></content>
    
    
    <categories>
      
      <category>浏览器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>浏览器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用vmware安装macOS</title>
    <link href="/wilson-blog-hexo/2018/01/23/%E4%BD%BF%E7%94%A8vmware%E5%AE%89%E8%A3%85macOS/"/>
    <url>/wilson-blog-hexo/2018/01/23/%E4%BD%BF%E7%94%A8vmware%E5%AE%89%E8%A3%85macOS/</url>
    
    <content type="html"><![CDATA[<p>虽然类似这样的文章网上一搜一大把，但应@YoungWa邀，还是决定重新整理一下个人安装的详细流程及相关资源链接，以备后用。</p><span id="more"></span><h3 id="资源准备"><a href="#资源准备" class="headerlink" title="资源准备"></a>资源准备</h3><p>macOS系统镜像 8G左右 cdr后缀  <strong><a href="https://pan.baidu.com/s/1i60XCgd">点击下载</a></strong></p><p>vmware 推荐版本12（自行安装）</p><p>vmware补丁（用于添加macOS类镜像）**<a href="https://pan.baidu.com/s/1mjoGoNQ">点击下载</a>**</p><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><ol><li><p>下载以上三个资源</p></li><li><p>安装VMware</p></li><li><p>安装补丁，补充VMware关于镜像类型的选择（若不安装补丁，则没有macOS镜像的选项），安装unlock，右击使用管理员权限打开win-install.cmd</p></li><li><p>新建虚拟机，选择macOS类型镜像，并做相应配置</p></li><li><p>配置好后打开虚拟机的vmx文件，手动修改配置（搜索smc）在smc.present &#x3D; “TRUE”后添加一行smc.version &#x3D; 0</p></li><li><p>启动虚拟机进行系统安装</p></li><li><p>完成即可（历时一个小时左右，视宿主机内存及硬盘配置而定）</p></li></ol><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>需要理解linux分区概念（不理解也可以将虚拟机分配的全部空间用作一个分区，在实用工具选项中选择磁盘工具，设置后关闭，进行系统安装）</p><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><p>安装macOS和安装其他系统镜像类型的虚拟机没什么大的区别，主要在于以下几点：</p><ul><li><p>为VMware安装补丁，拓展镜像类型（实用unlock）</p></li><li><p>修改vmx，虚拟机配置文件，添加smc.version &#x3D; 0</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>macOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux忘记密码</title>
    <link href="/wilson-blog-hexo/2018/01/23/linux%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81/"/>
    <url>/wilson-blog-hexo/2018/01/23/linux%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>这算不上一篇博客，只是不想再重复在解决这个问题上花费时间。另外对于解决方案的原理有待深究。</p><span id="more"></span><h3 id="核心操作"><a href="#核心操作" class="headerlink" title="核心操作"></a>核心操作</h3><p>进入<strong>GRUB</strong>修改kernel镜像<strong>启动参数</strong></p><h3 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h3><ol><li><p>启动系统时长按shift，进入GRUB引导模式</p></li><li><p>进入高级模式</p></li><li><p>选择恢复模式（recovery mode）按E键（这里最容易错，是按e键编辑启动项，而不是按回车进入）</p></li><li><p>找到recovery nomodeset改为quiet splash rw init&#x3D;&#x2F;bin&#x2F;bash（挂载硬盘为可读写模式）</p></li><li><p>按Ctrl+x或F10进行引导</p></li><li><p>进入root@(none):&#x2F;#</p></li><li><p>输入passwd进行root的密码设置</p></li><li><p>重启</p></li></ol><blockquote><p>Tip：此方案用于解决root密码重置，但如果是ubuntu，默认是以普通用户登录或游客访问，在登录界面是看不到root用户的入口，需要登录普通用户需要sudo su来切换root，但如果普通用户忘记密码，就进不到这一步，这时解决方案则是在第7步为passwd加上参数，即要设置密码的用户名</p></blockquote><p>文献： <a href="https://books.google.com/books?id=X3tZDgAAQBAJ&pg=PA191&lpg=PA191&dq=recovery+nomodeset&source=bl&ots=HOI9ga8YBl&sig=J8_HlXL2v9V9BnpNpvXKoPbW2MM&hl=zh-CN&sa=X&ved=0ahUKEwjh0MWQ--zYAhVBl5QKHSfvBd0Q6AEIVDAE#v=onepage&q=recovery%20nomodeset&f=false">https://books.google.com/books?id=X3tZDgAAQBAJ&pg=PA191&lpg=PA191&dq=recovery+nomodeset&source=bl&ots=HOI9ga8YBl&sig=J8_HlXL2v9V9BnpNpvXKoPbW2MM&amp;hl&#x3D;zh-CN&amp;sa&#x3D;X&amp;ved&#x3D;0ahUKEwjh0MWQ–zYAhVBl5QKHSfvBd0Q6AEIVDAE#v&#x3D;onepage&amp;q&#x3D;recovery%20nomodeset&amp;f&#x3D;false</a></p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js学习笔记——一些常用的高级属性</title>
    <link href="/wilson-blog-hexo/2018/01/20/js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E7%9A%84%E9%AB%98%E7%BA%A7%E5%B1%9E%E6%80%A7/"/>
    <url>/wilson-blog-hexo/2018/01/20/js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E7%9A%84%E9%AB%98%E7%BA%A7%E5%B1%9E%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<p>MSDN学习js高级教程note</p><span id="more"></span><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><h3 id="使用构造函数定义类型（type）"><a href="#使用构造函数定义类型（type）" class="headerlink" title="使用构造函数定义类型（type）"></a>使用构造函数定义类型（type）</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>构造函数是一个为Object初始化一个特定类型的函数</p><p>使用new关键字调用构造函数</p><p>这里有一些js内建对象和自定义对象的例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> myObject = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><span class="hljs-keyword">var</span> myBirthday = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">1993</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>);<br><span class="hljs-keyword">var</span> myCar = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>();<br></code></pre></td></tr></table></figure><p>构造函数包含this关键字，它是对新创建的<strong>空对象</strong>的<strong>引用</strong>（reference）</p><p>它通过<strong>创建属性</strong>并为他们<strong>赋初始值</strong>来<strong>初始化新对象</strong></p><p>构造函数将返回对<strong>所创建对象</strong>的引用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Circle</span> (xPoint, yPoint, radius) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> = xPoint;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> = yPoint;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">radius</span> = radius;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> aCircle = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Circle</span>(<span class="hljs-number">5</span>, <span class="hljs-number">11</span>, <span class="hljs-number">99</span>);<br></code></pre></td></tr></table></figure><p>使用自定义构造函数创建的所有对象的类型都是object</p><p>js只有6中类型：object、function、string、number、boolean、undefined</p><p>typeof<strong>操作符</strong>以<strong>字符串</strong>形式返回<strong>类型</strong>信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> index = <span class="hljs-number">5</span>;<br><span class="hljs-keyword">var</span> result = (<span class="hljs-keyword">typeof</span> index === <span class="hljs-string">&#x27;number&#x27;</span>);<br><br><span class="hljs-keyword">var</span> description = <span class="hljs-string">&quot;abc&quot;</span>;<br><span class="hljs-keyword">var</span> result = (<span class="hljs-keyword">typeof</span> description === <span class="hljs-string">&#x27;string&#x27;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-literal">true</span><br><span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>为声明和未声明的变量测试undefined数据类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> declared;<br><span class="hljs-keyword">var</span> result1 = (<span class="hljs-keyword">typeof</span> declared === <span class="hljs-string">&#x27;undefined&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result1);<br><br><span class="hljs-keyword">var</span> result2 = (<span class="hljs-keyword">typeof</span> notDeclared === <span class="hljs-string">&#x27;undefined&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result2);<br><br><span class="hljs-keyword">var</span> obj = &#123;&#125;;<br><span class="hljs-keyword">var</span> result3 = (<span class="hljs-keyword">typeof</span> obj.<span class="hljs-property">propNotDeclared</span> === <span class="hljs-string">&#x27;undefined&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result3);<br></code></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-literal">true</span><br><span class="hljs-literal">true</span><br><span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> result = (notDeclared === <span class="hljs-string">&#x27;undefined&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);<br></code></pre></td></tr></table></figure><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xquery">Uncaught ReferenceError: notDeclared <span class="hljs-literal">is</span><span class="hljs-built_in"> not</span> defined<br></code></pre></td></tr></table></figure><p>未声明的变量不能用于比较</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>Array.isArray(object)判断一个对象是否是一个数组</p><p>如果对象是一个数组则返回true，如果对象不是一个数组或参数不是一个对象（object）则返回false</p><p>创建数组方式：</p><p>arrayObj &#x3D; new Array()<br>arrayObj &#x3D; new Array(size)<br>arrayObj &#x3D; new Array()</p><p>arrayObj必需，Array对象分配到的变量<br>size可选，从0开始（包括0）的整数，数组索引范围为[0,size-1]<br>element可选，数组内所放置的元素，这样会创建n+1个元素（n为数组索引最大值），这种数组创建方式必需提供至少一个元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> d = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-number">3</span>);<br><span class="hljs-literal">undefined</span><br>d<br>[<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-number">3</span>]<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> ar = [];<br><span class="hljs-keyword">var</span> result1 = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(ar);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result1);<br><br><span class="hljs-keyword">var</span> ar = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();<br><span class="hljs-keyword">var</span> result2 = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(ar);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result2);<br><br><span class="hljs-keyword">var</span> ar = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">var</span> result3 = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(ar);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result3);<br><br><span class="hljs-keyword">var</span> result = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(<span class="hljs-string">&quot;an array&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);<br></code></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-literal">true</span><br><span class="hljs-literal">true</span><br><span class="hljs-literal">true</span><br><span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h3 id="数组对象"><a href="#数组对象" class="headerlink" title="数组对象"></a>数组对象</h3><p>Array支持创建<strong>任何数据类型</strong>的数组</p><p>数组创建后，可通过[]表示法来访问每个独立的元素</p><p>js数组从0开始</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> my_array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>my_array[i] = i;<br>&#125;<br>x = my_array[<span class="hljs-number">4</span>];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(my_array[<span class="hljs-number">10</span>]);<br></code></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-number">4</span><br><span class="hljs-literal">undefined</span><br></code></pre></td></tr></table></figure><p>可以传递一个无符号32位整数给Array构造函数类指定数组的大小</p><p>如果值为负或者非整数，会出现运行时错误</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">10</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr1.<span class="hljs-property">length</span>);<br><br><span class="hljs-keyword">var</span> arr2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(-<span class="hljs-number">1</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr2);<br>arr3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">1.50</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr3);<br></code></pre></td></tr></table></figure><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs smali">10<br>Uncaught RangeError: Invalid<span class="hljs-built_in"> array </span>length<br>Uncaught RangeError: Invalid<span class="hljs-built_in"> array </span>length<br></code></pre></td></tr></table></figure><h3 id="原型和原型继承"><a href="#原型和原型继承" class="headerlink" title="原型和原型继承"></a>原型和原型继承</h3><p>prototype是<strong>函数</strong>的一个<strong>属性</strong>，同时也是由<strong>构造函数</strong>创建的<strong>对象</strong>（instance）的一个属性</p><p>函数的原型为对象，主要在函数用作构造函数时使用</p><h4 id="使用原型添加属性和方法"><a href="#使用原型添加属性和方法" class="headerlink" title="使用原型添加属性和方法"></a>使用原型添加属性和方法</h4><p>可使用prototype属性向对象添加属性和方法，甚至于已创建的对象是也是如此</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Vehicle</span>(<span class="hljs-params">wheels, engine</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">wheels</span> = wheels;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">engine</span> = engine;<br>&#125;<br><span class="hljs-keyword">var</span> testVehicle = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vehicle</span>(<span class="hljs-number">2</span>, <span class="hljs-literal">false</span>);<br><span class="hljs-title class_">Vehicle</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">color</span> = <span class="hljs-string">&quot;red&quot;</span>;<br><span class="hljs-keyword">var</span> testColor = testVehicle.<span class="hljs-property">color</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(testColor);<br></code></pre></td></tr></table></figure><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq"><span class="hljs-built_in">red</span><br></code></pre></td></tr></table></figure><p>向预定义的对象添加属性和方法，例如：在String原型上定义一个Trim方法，脚本中所有的字符串都将继承该方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">String</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">trim</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/(^\s*)|(\s*$)/g</span>, <span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br><span class="hljs-keyword">var</span> s = <span class="hljs-string">&quot;   leading and trailing spaces   &quot;</span>;<br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">alert</span>(s + <span class="hljs-string">&quot;(&quot;</span> + s.<span class="hljs-property">length</span> + <span class="hljs-string">&quot;)&quot;</span>);<br>s = s.<span class="hljs-title function_">trim</span>();<br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">alert</span>(s + <span class="hljs-string">&quot;(&quot;</span> + s.<span class="hljs-property">length</span> + <span class="hljs-string">&quot;)&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">leading</span> <span class="hljs-variable"><span class="hljs-keyword">and</span></span> <span class="hljs-variable">trailing</span> <span class="hljs-function"><span class="hljs-title">spaces</span>(<span class="hljs-number">33</span>)</span><br><span class="hljs-variable">leading</span> <span class="hljs-variable"><span class="hljs-keyword">and</span></span> <span class="hljs-variable">trailing</span> <span class="hljs-function"><span class="hljs-title">spaces</span>(<span class="hljs-number">27</span>)</span><br></code></pre></td></tr></table></figure><p>Nice, isn’t it?</p><h5 id="使用原型通过Object-create从一个对象派生另一个对象"><a href="#使用原型通过Object-create从一个对象派生另一个对象" class="headerlink" title="使用原型通过Object.create从一个对象派生另一个对象"></a>使用原型通过Object.create从一个对象派生另一个对象</h5><p>例如：；利用Object.create函将使之前定义的Vehicle对象的原型（以及所需的任何新属性）派生出一个新的对象Bicycle</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> <span class="hljs-title class_">Bicycle</span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getPrototypeOf</span>(<span class="hljs-title class_">Vehicle</span>), &#123;<br>    <span class="hljs-string">&quot;pedals&quot;</span> : &#123;<span class="hljs-attr">value</span>: <span class="hljs-literal">true</span>&#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>参考：<a href="https://msdn.microsoft.com/zh-cn/library/b9w25k6f(v=vs.94).aspx">https://msdn.microsoft.com/zh-cn/library/b9w25k6f(v=vs.94).aspx</a></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js学习笔记——变量作用域</title>
    <link href="/wilson-blog-hexo/2018/01/20/js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <url>/wilson-blog-hexo/2018/01/20/js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
    
    <content type="html"><![CDATA[<p>js变量作用域探析</p><span id="more"></span><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> o = &#123;&#125;;<br>o.<span class="hljs-property">fun</span> = <span class="hljs-title function_">test</span>();<br>o.<span class="hljs-title function_">fun</span>();<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">var</span> fn = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)&#125;;<br><span class="hljs-keyword">return</span> fn;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">&#123;<span class="hljs-function"><span class="hljs-keyword">fun</span>: ƒ&#125;</span><br></code></pre></td></tr></table></figure><p>由于对这个程序的输出结果感到不解，于是决定深入了解js作用域究竟是什么个东西</p><p>参考：<a href="https://msdn.microsoft.com/zh-cn/library/bzt2dkta(v=vs.94).aspx">https://msdn.microsoft.com/zh-cn/library/bzt2dkta(v=vs.94).aspx</a></p><h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><p>又要谈到js的两个范围：全局和局部</p><p><strong>函数之外</strong>声明的变量就是全局变量，可在整个程序中访问和修改</p><p><strong>函数内</strong>声明的变量是局部变量，每当执行程序时都会创建和销毁该变量（所以称临时变量），并且无法通过函数之外的任何代码访问该变量（MSDN如是说）</p><p>js不支持块范围（通过一组大括号定义新范围），于是就只有全局（函数外）和局部（函数内），以函数划分的这两种范围</p><h3 id="js范围"><a href="#js范围" class="headerlink" title="js范围"></a>js范围</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> aNumber = <span class="hljs-number">100</span>;<br><span class="hljs-title function_">tweak</span>();<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">tweak</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(aNumber);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-literal">false</span>) &#123;<br><span class="hljs-keyword">var</span> aNumber = <span class="hljs-number">123</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-literal">undefined</span><br></code></pre></td></tr></table></figure><blockquote><p>虽然if（false），var aNumber &#x3D; 123不会执行，但是js在执行函数tweak()时，会查找所有<strong>变量声明</strong>，var aNumber被扫描到，js使用初始值<strong>undefined</strong>创建变量，即使使用一个值声明变量var aNumber &#x3D; 123，但aNumber变量的<strong>初始值</strong>仍为<strong>undefined</strong>，仅当<strong>执行包含声明的行</strong>（var aNumber &#x3D; 123）时才会使用已声明的值。</p></blockquote><p>js会在执行任何代码之前处理所有变量声明，无论是在条件块中声明还是在其他构造中声明</p><p>js一旦找到所有变量，就会执行函数中的代码。如果函数内部<strong>隐式声明</strong>变量，即变量出现在赋值表达式左侧，但尚未使用<strong>var</strong>进行声明，则它将创建为<strong>全局变量</strong></p><p>js中，内部（嵌套）函数将存储对局部变量的引用（即使在函数返回之后），这些局部变量存在于与函数本身<strong>相同的范围</strong>，这一组引用称为<strong>闭包</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">send</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-title function_">sendHi</span>(name);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sendHi</span>(<span class="hljs-params">msg</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hello&#x27;</span> + msg);<br>&#125;<br><br><span class="hljs-keyword">var</span> func = <span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Bill&#x27;</span>);<br><span class="hljs-title function_">func</span>();<br><span class="hljs-title function_">sendHi</span>(<span class="hljs-string">&#x27;Pete&#x27;</span>);<br><span class="hljs-title function_">func</span>();<br></code></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">HelloBill</span><br><span class="hljs-attribute">HelloPete</span><br><span class="hljs-attribute">HelloBill</span><br></code></pre></td></tr></table></figure><p>对内部函数的第二次调用输出与第一次调用相同，因为<strong>外部函数</strong>的输入参数name存储在<strong>内部函数闭包</strong>中的局部变量</p><h3 id="块范围变量"><a href="#块范围变量" class="headerlink" title="块范围变量"></a>块范围变量</h3><p>IE11引入对let和const这两个块范围变量的支持</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> x = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">var</span> y = <span class="hljs-number">10</span>;<br>&#123;<br>    <span class="hljs-keyword">let</span> x = <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">var</span> y = <span class="hljs-number">5</span>;<br>    &#123;<br>        <span class="hljs-keyword">let</span> x = <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">var</span> y = <span class="hljs-number">2</span>;<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;x: &quot;</span> + x + <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>);<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;y: &quot;</span> + y + <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>);<br>        <span class="hljs-comment">// Output:</span><br>        <span class="hljs-comment">// x: 2</span><br>        <span class="hljs-comment">// y: 2</span><br>    &#125;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;x: &quot;</span> + x + <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>);<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;y: &quot;</span> + y + <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>);<br>    <span class="hljs-comment">// Output:</span><br>    <span class="hljs-comment">// x: 5</span><br>    <span class="hljs-comment">// y: 2</span><br>&#125;<br><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;x: &quot;</span> + x + <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>);<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;y: &quot;</span> + y + <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>);<br><span class="hljs-comment">// Output:</span><br><span class="hljs-comment">// x: 10</span><br><span class="hljs-comment">// y: 2</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>javascript-puzzlers</title>
    <link href="/wilson-blog-hexo/2018/01/20/javascript-puzzlers/"/>
    <url>/wilson-blog-hexo/2018/01/20/javascript-puzzlers/</url>
    
    <content type="html"><![CDATA[<p>关于深入理解js的44道wired题目，经实际验证及分析的学习笔记。</p><span id="more"></span><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">[<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>].<span class="hljs-keyword">map</span>(<span class="hljs-built_in">parseInt</span>)<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">[<span class="hljs-number">1</span>, <span class="hljs-literal">NaN</span>, <span class="hljs-literal">NaN</span>]<br></code></pre></td></tr></table></figure><p>map()<br>map passes 3 params (element, index, array)<br>parseInt<br>take two parameters (val, radix)</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">typeof</span> <span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">&quot;object&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-literal">null</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-keyword">object</span><br></code></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>typeof always return “object” for <strong>native non callable objects</strong></p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scheme">[ [<span class="hljs-name">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>].reduce(<span class="hljs-name">Math.pow</span>), [].reduce(<span class="hljs-name">Math.pow</span>) ]<br></code></pre></td></tr></table></figure><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">reduce on an empty<span class="hljs-built_in"> array </span>without an initial value throws TypeError<br></code></pre></td></tr></table></figure><p>array.reduce()<br>Math.pow</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> val = <span class="hljs-string">&#x27;smtg&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Value is &#x27;</span> + (val === <span class="hljs-string">&#x27;smtg&#x27;</span>) ? <span class="hljs-string">&#x27;Something&#x27;</span> : <span class="hljs-string">&#x27;Nothing&#x27;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Something</span><br></code></pre></td></tr></table></figure><p>the + operator has higher precedence than the ternary(三元) one</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;World!&#x27;</span>;<br>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> name === <span class="hljs-string">&#x27;undefined&#x27;</span>) &#123;<br><span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;Jack&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Goodbye &#x27;</span> + name);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hello &#x27;</span> + name);<br>&#125;<br>&#125;)();<br></code></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Goodbye Jack</span><br></code></pre></td></tr></table></figure><p>The var declaration is hoisted to the function scope, but the initialization is not.<br>声明被隔离，初始化没有<br>declaration<br>initialization<br>闭包</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> <span class="hljs-variable constant_">END</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">pow</span>(<span class="hljs-number">2</span>, <span class="hljs-number">53</span>);<br><span class="hljs-keyword">var</span> <span class="hljs-variable constant_">START</span> = <span class="hljs-variable constant_">END</span> - <span class="hljs-number">100</span>;<br><span class="hljs-keyword">var</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-variable constant_">START</span>; i &lt;= <span class="hljs-variable constant_">END</span>; i++) &#123;<br>count++;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(count);<br></code></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">boom</span><br></code></pre></td></tr></table></figure><p>it goes into a infinite loop<br>2^53 is the highest possible number in JS<br>2^53+1 gives 2^53(never become larger than it)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> ary = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>];<br>ary[<span class="hljs-number">10</span>] = <span class="hljs-number">10</span>;<br>ary.<span class="hljs-title function_">filter</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>) &#123; <span class="hljs-keyword">return</span> x === <span class="hljs-literal">undefined</span>; &#125;);<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[]</span><br></code></pre></td></tr></table></figure><p>Array.prototype.filter is not invoked for the missing elements<br>filter()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> two = <span class="hljs-number">0.2</span>;<br><span class="hljs-keyword">var</span> one = <span class="hljs-number">0.1</span>;<br><span class="hljs-keyword">var</span> eight = <span class="hljs-number">0.8</span>;<br><span class="hljs-keyword">var</span> six = <span class="hljs-number">0.6</span>;<br>[two - one == one, eight - six == two]<br></code></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">[<span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>]<br></code></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-literal">eight</span> - <span class="hljs-literal">six</span><br><span class="hljs-number">0.20000000000000007</span><br><span class="hljs-literal">two</span> - <span class="hljs-literal">one</span><br><span class="hljs-number">0.1</span><br></code></pre></td></tr></table></figure><p>JS does not have precision(精确的) math, even though sometimes it work correctly</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">showCase</span>(<span class="hljs-params">value</span>) &#123;<br><span class="hljs-keyword">switch</span>(value) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;A&#x27;</span>:<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Case A&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;B&#x27;</span>:<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Case B&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-attr">undefined</span>:<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;undefined&#x27;</span>);<br>        <span class="hljs-attr">default</span>:<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Do not know!&#x27;</span>);<br>&#125;<br>&#125;<br><span class="hljs-title function_">showCase</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&#x27;A&#x27;</span>));<br></code></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">Do</span> <span class="hljs-keyword">not</span> know!<br></code></pre></td></tr></table></figure><p>switch uses &#x3D;&#x3D;&#x3D; internally<br>new String(x) !&#x3D;&#x3D; x</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">showCase2</span>(<span class="hljs-params">value</span>) &#123;<br><span class="hljs-keyword">switch</span>(value) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;A&#x27;</span>:<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Case A&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;B&#x27;</span>:<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Case B&#x27;</span>);<br>        <span class="hljs-keyword">case</span> <span class="hljs-attr">undefined</span>:<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;undefined&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br>        <span class="hljs-attr">default</span>:<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Do not know!&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-title function_">showCase2</span>(<span class="hljs-title class_">String</span>(<span class="hljs-string">&#x27;A&#x27;</span>))<br></code></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">Case</span> A<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">String</span><span class="hljs-params">(<span class="hljs-string">&quot;B&quot;</span>)</span></span><br><span class="hljs-string">&quot;B&quot;</span><br><span class="hljs-function"><span class="hljs-title">String</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span><br><span class="hljs-string">&quot;1&quot;</span><br></code></pre></td></tr></table></figure><p>String does not create an object but does return a string<br>typeof String(1) &#x3D;&#x3D;&#x3D; “string”</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">isOdd</span>(<span class="hljs-params">num</span>) &#123;<br><span class="hljs-keyword">return</span> num % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">isEven</span>(<span class="hljs-params">num</span>) &#123;<br><span class="hljs-keyword">return</span> num % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">isSane</span>(<span class="hljs-params">num</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-title function_">isEven</span>(num) || <span class="hljs-title function_">isOdd</span>(num);<br>&#125;<br><span class="hljs-keyword">var</span> values = [<span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;13&#x27;</span>, -<span class="hljs-number">9</span>, <span class="hljs-title class_">Infinity</span>];<br>values.<span class="hljs-title function_">map</span>(isSane);<br></code></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">[<span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>]<br></code></pre></td></tr></table></figure><p>Infinity % 2 gives NaN<br>-9 % 2 gives -1<br>modulo operator(模运算符) keeps sign so it’s result is only reliable compared to 0</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">parseInt</span><span class="hljs-params">(<span class="hljs-number">3</span>, <span class="hljs-number">8</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">parseInt</span><span class="hljs-params">(<span class="hljs-number">3</span>, <span class="hljs-number">2</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">parseInt</span><span class="hljs-params">(<span class="hljs-number">3</span>, <span class="hljs-number">0</span>)</span></span><br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">3<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">parseInt</span><span class="hljs-params">(<span class="hljs-number">3</span>, <span class="hljs-number">8</span>)</span></span><br><span class="hljs-number">3</span><br><span class="hljs-function"><span class="hljs-title">parseInt</span><span class="hljs-params">(<span class="hljs-number">3</span>, <span class="hljs-number">2</span>)</span></span><br>NaN<br><span class="hljs-function"><span class="hljs-title">parseInt</span><span class="hljs-params">(<span class="hljs-number">3</span>, <span class="hljs-number">0</span>)</span></span><br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>3 does not exist in base 2, so NaN<br>parseInt(3, 0) parseInt will consider a bogus radix(考虑伪造一个基数) and assume you meant 10</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>( <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> )<br></code></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>Array.prototype is an Array</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = [<span class="hljs-number">0</span>];<br><span class="hljs-keyword">if</span> ([<span class="hljs-number">0</span>]) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a == <span class="hljs-literal">true</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;wut&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>[0] as a boolean is considered true<br>Alas<br>using it in the comparisions it gets converted in a different way and all goes to hell</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">[] <span class="hljs-operator">=</span><span class="hljs-operator">=</span> []<br></code></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D; is the spawn of satan(&#x3D;&#x3D;是恶魔之卵？？？)</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">&#x27;5&#x27; + <span class="hljs-number">3</span><br>&#x27;5&#x27; - <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">&quot;53&quot;</span>, <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>Strings know about + and will use it<br>but they are ignoreant of -<br>int that case the strings get converted to numbers</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span>+ - + + + - + <span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-symbol">1 </span>+ - <span class="hljs-number">1</span><br><span class="hljs-number">0</span><br><span class="hljs-symbol">1 </span>+ - + <span class="hljs-number">1</span><br><span class="hljs-number">0</span><br><span class="hljs-symbol">1 </span>+ - + + <span class="hljs-number">1</span><br><span class="hljs-number">0</span><br><span class="hljs-symbol">1 </span>+ - + + + - <span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-symbol">1 </span>+ - + + + - + <span class="hljs-number">1</span><br><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>???</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> ary = <span class="hljs-title class_">Array</span>(<span class="hljs-number">3</span>);<br>ary[<span class="hljs-number">0</span>] = <span class="hljs-number">2</span>;<br>ary.<span class="hljs-title function_">map</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">elem</span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;1&#x27;</span>; &#125;);<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[<span class="hljs-string">&quot;1&quot;</span>, empty × 2]</span><br></code></pre></td></tr></table></figure><p>map is only invoked for elements of the Array which have been initialiazed</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sideEffecting</span>(<span class="hljs-params">ary</span>) &#123;<br>ary[<span class="hljs-number">0</span>] = ary[<span class="hljs-number">2</span>];<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">bar</span>(<span class="hljs-params">a, b, c</span>) &#123;<br>c = <span class="hljs-number">10</span>;<br><span class="hljs-title function_">sideEffecting</span>(<span class="hljs-variable language_">arguments</span>);<br><span class="hljs-keyword">return</span> a + b + c;<br>&#125;<br><span class="hljs-title function_">bar</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">21<br></code></pre></td></tr></table></figure><p>variables are tied to the arguments object<br>even not in the same scope<br>changing the variables changes arguments<br>changing arguments changes the local variables even</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">111111111111111110000</span>,<br>b = <span class="hljs-number">1111</span>;<br>a + b<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">111111111111111110000<br></code></pre></td></tr></table></figure><p>lack of precision for numbers in js affects both <strong>small</strong> and <strong>big</strong> numbers</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> x = [].<span class="hljs-property">reverse</span>;<br><span class="hljs-title function_">x</span>();<br></code></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">??</span>?<br></code></pre></td></tr></table></figure><p>[].reverse will return this<br>when invoked without an explicit(明确的) receiver object it will default to the default this AKA window</p><p>ES5???</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Number</span>.<span class="hljs-property">MIN_VALUE</span><br><span class="hljs-number">5e-324</span><br><span class="hljs-title class_">Number</span>.<span class="hljs-property">MIN_VALUE</span> &gt; <span class="hljs-number">0</span><br><span class="hljs-literal">true</span><br>-<span class="hljs-title class_">Number</span>.<span class="hljs-property">MAX_VALUE</span><br>-<span class="hljs-number">1.7976931348623157e+308</span><br>-<span class="hljs-title class_">Number</span>.<span class="hljs-property">MAX_VALUE</span> &gt; <span class="hljs-number">0</span><br><span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span> &lt; <span class="hljs-number">2</span> &lt; <span class="hljs-number">3</span><br><span class="hljs-attribute">true</span><br><span class="hljs-attribute">3</span> &lt; <span class="hljs-number">2</span> &lt; <span class="hljs-number">1</span><br><span class="hljs-attribute">true</span><br></code></pre></td></tr></table></figure><p>true gets intified and is 1<br>false gets intified and become 0</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">// the most classic wtf<br><span class="hljs-number">2</span> == <span class="hljs-string">[[[2]]</span>]<br></code></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>both objects get converted to strings and in both cases the resulting string is “2”</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">3.</span><span class="hljs-title function_">toString</span>()<br><span class="hljs-number">3.</span>.<span class="hljs-title function_">toString</span>()<br><span class="hljs-number">3.</span>..<span class="hljs-title function_">toString</span>()<br></code></pre></td></tr></table></figure><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">error</span><br><span class="hljs-keyword"></span>&quot;3&quot;<br>error<br></code></pre></td></tr></table></figure><p>3.x is a valid syntax to define “3” with a mantissa(尾数) of x<br>toString is not a valid number, but the empty string is<br>???</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">var</span> x = y = <span class="hljs-number">1</span>;<br>&#125;)();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(y);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x);<br></code></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-number">1</span><br><span class="hljs-keyword">error</span><br></code></pre></td></tr></table></figure><p>y is an automatic global, not a function local one</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-regexp">/123/</span>,<br>b = <span class="hljs-regexp">/123/</span>;<br>a == b;<br>a === b;<br></code></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-literal">false</span><br><span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>Per spec Two regular expression literals in a program evaluate to regular expression objects that never compare as &#x3D;&#x3D;&#x3D; to each other even if the two literals’ contents are identical.<br>同一个程序内的正则表达式永不使用&#x3D;&#x3D;&#x3D;相互比较，尽管二者内容一样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>],<br>    b = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>],<br>    c = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>]<br>a ==  b<br>a === b<br>a &gt;   c<br>a &lt;   c<br></code></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-literal">false</span><br><span class="hljs-literal">false</span><br><span class="hljs-literal">false</span><br><span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>Arrays are compared lexicographically with &gt; and &lt;, but not with &#x3D;&#x3D; and &#x3D;&#x3D;&#x3D;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = &#123;&#125;, b = <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>;<br>[a.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> === b, <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getPrototypeOf</span>(a) === b]<br></code></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-literal">false</span><br><span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>Functions have a prototype property but other objects don’t<br>a.prototype is undefined<br>Every Object instead has an internal property accessible via Object.getPrototypeOf</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>) &#123;&#125;<br><span class="hljs-keyword">var</span> a = f.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>, b = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getPrototypeOf</span>(f);<br>a === b<br></code></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>f.prototype is the object that will become the parent of any objects created with new f<br>Object.getPrototypeOf returns the parent in the inheritance hierarchy</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123; &#125;<br><span class="hljs-keyword">var</span> oldName = foo.<span class="hljs-property">name</span>;<br>foo.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;bar&quot;</span>;<br>[oldName, foo.<span class="hljs-property">name</span>]<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[<span class="hljs-string">&quot;foo&quot;</span>, <span class="hljs-string">&quot;foo&quot;</span>]</span><br></code></pre></td></tr></table></figure><p>name is a read only property</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span><span class="hljs-string">&quot;.replace(/\d/g, parseInt)</span><br></code></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">&quot;1 NaN 3&quot;</span><br></code></pre></td></tr></table></figure><p>String.prototype.replace invokes the callback function with multiple arguments where the first is the match<br>then there is one argument for each capturing group<br>then there is the offset of the matched substring<br>finally the original string itself<br>parseInt will be invoked with arguments [1, 0], [2, 2], [3, 4]<br>???</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>) &#123;&#125;<br><span class="hljs-keyword">var</span> parent = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getPrototypeOf</span>(f);<br>f.<span class="hljs-property">name</span><br>parent.<span class="hljs-property">name</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-built_in">eval</span>(f.<span class="hljs-property">name</span>)<br><span class="hljs-keyword">typeof</span> <span class="hljs-built_in">eval</span>(parent.<span class="hljs-property">name</span>)<br></code></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-string">&quot;f&quot;</span><br><span class="hljs-string">&quot;Empty&quot;</span><br><span class="hljs-string">&quot;function&quot;</span><br><span class="hljs-keyword">error</span><br></code></pre></td></tr></table></figure><p>The function prototype object is defined somewhere, has a name, can be invoked<br>but it is not in the current scope</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> lowerCaseOnly = <span class="hljs-regexp">/^[a-z]+$/</span>;<br>[lowerCaseOnly.<span class="hljs-title function_">test</span>(<span class="hljs-literal">null</span>), lowerCaseOnly.<span class="hljs-title function_">test</span>()]<br></code></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">[<span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>]<br></code></pre></td></tr></table></figure><p>the argument is converted to a string with the abstract ToString operation<br>it is “null” and “undefined”</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[,,,].<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;, &quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">&quot;, , &quot;</span><br></code></pre></td></tr></table></figure><p>JS allows a trailing comma(尾随分隔符) when defining arrays<br>It is an array of three undefined<br>join()</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-built_in">var</span> a = &#123;<span class="hljs-keyword">class</span>: <span class="hljs-string">&quot;Animal&quot;</span>, name: <span class="hljs-string">&#x27;Fido&#x27;</span>&#125;;<br>a.<span class="hljs-keyword">class</span><br></code></pre></td></tr></table></figure><p>It depends on brower<br>class is a reserved word<br>accepted as a property name by Chrome,Firefox and Opera<br>fail in IE<br>accept most reserved words (int, private, throws etc) as variable names<br>class is verboten(禁止的)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&quot;epoch&quot;</span>)<br></code></pre></td></tr></table></figure><p>a instanceof Date is true, but invalid<br>time is internally kept as a Number<br>in this case it is a NaN</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-title class_">Function</span>.<span class="hljs-property">length</span>,<br>b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>().<span class="hljs-property">length</span><br>a === b<br></code></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>Function.length is defined to be 1<br>the length property of the Function prototype object is defined to be 0</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-title class_">Date</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">var</span> b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">var</span> c = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>[a === b, b === c, a === c]<br></code></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">[<span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>]<br></code></pre></td></tr></table></figure><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">a<br><span class="hljs-string">&quot;Thu Jan 18 2018 18:25:18 GMT+0800 (中国标准时间)&quot;</span><br><span class="hljs-keyword">b</span><br><span class="hljs-keyword"></span>Thu <span class="hljs-keyword">Jan </span><span class="hljs-number">01</span> <span class="hljs-number">1970</span> <span class="hljs-number">08</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> GMT+<span class="hljs-number">0800</span> (中国标准时间)<br>c<br>Thu <span class="hljs-keyword">Jan </span><span class="hljs-number">18</span> <span class="hljs-number">2018</span> <span class="hljs-number">18</span>:<span class="hljs-number">25</span>:<span class="hljs-number">18</span> GMT+<span class="hljs-number">0800</span> (中国标准时间)<br></code></pre></td></tr></table></figure><p>When it is invoked as a function, it returns a String representation of the current time<br>When Date is invoked as a constructor it returns an object relative to the epoch(Jan 01 1970)<br>When the argument is missing it returns the current date</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> min = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(), max = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>()<br>min &lt; max<br></code></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">min</span><br><span class="hljs-literal">Infinity</span><br><span class="hljs-built_in">max</span><br>-<span class="hljs-literal">Infinity</span><br></code></pre></td></tr></table></figure><p>Math.min returns +Infinity when supplied an empty argument list</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">captureOne</span>(<span class="hljs-params">re, str</span>) &#123;<br>  <span class="hljs-keyword">var</span> match = re.<span class="hljs-title function_">exec</span>(str);<br>  <span class="hljs-keyword">return</span> match &amp;&amp; match[<span class="hljs-number">1</span>];<br>&#125;<br><span class="hljs-keyword">var</span> numRe  = <span class="hljs-regexp">/num=(\d+)/ig</span>,<br>    wordRe = <span class="hljs-regexp">/word=(\w+)/i</span>,<br>    a1 = <span class="hljs-title function_">captureOne</span>(numRe,  <span class="hljs-string">&quot;num=1&quot;</span>),<br>    a2 = <span class="hljs-title function_">captureOne</span>(wordRe, <span class="hljs-string">&quot;word=1&quot;</span>),<br>    a3 = <span class="hljs-title function_">captureOne</span>(numRe,  <span class="hljs-string">&quot;NUM=2&quot;</span>),<br>    a4 = <span class="hljs-title function_">captureOne</span>(wordRe,  <span class="hljs-string">&quot;WORD=2&quot;</span>);<br>[a1 === a2, a3 === a4]<br></code></pre></td></tr></table></figure><p>Regular expressions in JavaScript if defined using the &#x2F;g flag will carry a state across matches, even if they are actually used on different strings (the lastIndex property). This means a3 will be null as the regular expression was applied starting from the index of the last matched string, even if it was a different one.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&quot;2014-03-19&quot;</span>),<br>    b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">2014</span>, <span class="hljs-number">03</span>, <span class="hljs-number">19</span>);<br>[a.<span class="hljs-title function_">getDay</span>() === b.<span class="hljs-title function_">getDay</span>(), a.<span class="hljs-title function_">getMonth</span>() === b.<span class="hljs-title function_">getMonth</span>()]<br></code></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">[<span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>]<br></code></pre></td></tr></table></figure><p>JavaScript inherits 40 years old design from C: days are 1-indexed in C’s struct tm, but months are 0 indexed. In addition to that, getDay returns the 0-indexed day of the week, to get the 1-indexed day of the month you have to use getDate, which doesn’t return a Date object.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;http://giftwrapped.com/picture.jpg&#x27;</span>.<span class="hljs-title function_">match</span>(<span class="hljs-string">&#x27;.gif&#x27;</span>)) &#123;<br>  <span class="hljs-string">&#x27;a gif file&#x27;</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-string">&#x27;not a gif file&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">&quot;a gif file&quot;</span><br></code></pre></td></tr></table></figure><p>String.prototype.match silently converts the string into a regular expression, without escaping it, thus the ‘.’ becomes a metacharacter matching ‘&#x2F;‘.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">a</span>) &#123;<br>    <span class="hljs-keyword">var</span> a;<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">bar</span>(<span class="hljs-params">a</span>) &#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-string">&#x27;bye&#x27;</span>;<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br>[<span class="hljs-title function_">foo</span>(<span class="hljs-string">&#x27;hello&#x27;</span>), <span class="hljs-title function_">bar</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)]<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;bye&quot;</span>]</span><br></code></pre></td></tr></table></figure><p>Variabled declarations are hoisted, but in this case since the variable exists already in the scope, they are removed altogether. In bar() the variable declaration is removed but the assignment remains, so it has effect.</p><p>参考：<a href="http://javascript-puzzlers.herokuapp.com/">http://javascript-puzzlers.herokuapp.com/</a></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js学习笔记——this关键字</title>
    <link href="/wilson-blog-hexo/2018/01/19/js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94this%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <url>/wilson-blog-hexo/2018/01/19/js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94this%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<p>js关键字this用法解析</p><span id="more"></span><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><p>函数运行时自动生成的一个内部对象，只能在函数内部使用（想起了Python函数的self）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> = <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>函数使用场合不同，this的值会发生变化</p><p>但this总指的是<strong>调用函数</strong>的那个<strong>对象</strong></p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ol><li><p>纯粹函数调用（全局调用）</p></li><li><p>函数作为对象方法的调用</p></li><li><p>作为构造函数调用</p></li><li><p>apply调用</p></li></ol><h4 id="1-纯粹函数调用"><a href="#1-纯粹函数调用" class="headerlink" title="1.纯粹函数调用"></a>1.纯粹函数调用</h4><p>全局性调用，this代表全局对象Global</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> = <span class="hljs-number">1</span>;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>);<br>&#125;<br><br><span class="hljs-title function_">test</span>();<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">1<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> x = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>);<br>&#125;<br><br><span class="hljs-title function_">test</span>();<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">1<br></code></pre></td></tr></table></figure><p>不会报错，因为相当于alert(Global.x)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> x = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-title function_">test</span>();<br><span class="hljs-title function_">alert</span>(x);<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">0<br></code></pre></td></tr></table></figure><p>test()之后相当于将全局变量的x重新赋值0，Global.x &#x3D; 0</p><h4 id="2-作为对象方法的调用"><a href="#2-作为对象方法的调用" class="headerlink" title="2.作为对象方法的调用"></a>2.作为对象方法的调用</h4><p>函数作为某个对象o的方法，this指的是这个上级对象o</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>);<br>&#125;<br><br><span class="hljs-keyword">var</span> o = &#123;&#125;;<br>o.<span class="hljs-property">x</span> = <span class="hljs-number">1</span>;<br>o.<span class="hljs-property">m</span> = test;<br>o.<span class="hljs-title function_">m</span>();<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">1<br></code></pre></td></tr></table></figure><p>此时test()函数作为对象o的方法，则test方法中的this指的是o这个对象</p><h4 id="3-作为构造函数调用"><a href="#3-作为构造函数调用" class="headerlink" title="3.作为构造函数调用"></a>3.作为构造函数调用</h4><p>构造函数：通过这个函数生成一个新对象（object），此时this指这个新对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">var</span> o = <span class="hljs-keyword">new</span> <span class="hljs-title function_">test</span>();<br><span class="hljs-title function_">alert</span>(o.<span class="hljs-property">x</span>);<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">1<br></code></pre></td></tr></table></figure><p>this就是当前通过构造函数生成的对象o</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> x = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">var</span> o = <span class="hljs-keyword">new</span> <span class="hljs-title function_">test</span>();<br><span class="hljs-title function_">alert</span>(x);<br><span class="hljs-title function_">alert</span>(o.<span class="hljs-property">x</span>);<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">2<br>1<br></code></pre></td></tr></table></figure><p>构造函数赋值的x是o的变量x，而不是全局变量x</p><p>以上三个很明显都是围绕<strong>调用函数</strong>的<strong>对象</strong></p><h4 id="4-apply调用"><a href="#4-apply调用" class="headerlink" title="4.apply调用"></a>4.apply调用</h4><p>apply是<strong>函数对象</strong>的一个方法，作用是<strong>改变函数的调用对象</strong></p><p>第一个参数表示改变后的调用这个函数的对象，this指的就是这第一个参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> x = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>);<br>&#125;<br><br><span class="hljs-keyword">var</span> o = &#123;&#125;;<br><br>o.<span class="hljs-property">x</span> = <span class="hljs-number">1</span>;<br>o.<span class="hljs-property">m</span> = test;<br>o.<span class="hljs-property">m</span>.<span class="hljs-title function_">apply</span>();<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">0<br></code></pre></td></tr></table></figure><p>apply()参数为空时，默认调用全局对象（此时this指的是全局对象）</p><p>全局对象的x是0</p><p>其实还是实际调用函数的那个对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> x = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>);<br>&#125;<br><br><span class="hljs-keyword">var</span> o = &#123;&#125;;<br><br>o.<span class="hljs-property">x</span> = <span class="hljs-number">1</span>;<br>o.<span class="hljs-property">m</span> = test;<br>o.<span class="hljs-property">m</span>.<span class="hljs-title function_">apply</span>(o);<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">1<br></code></pre></td></tr></table></figure><p>改变调用这个函数的对象，虽然本来调用test函数的对象就是o</p><p>但是如果调用apply函数不填参数，就会变成全局对象去调用test方法</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Is that clear?</p><p>一句话总结：this就是调用函数的那个对象</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js学习笔记——局部变量和全局变量</title>
    <link href="/wilson-blog-hexo/2018/01/19/js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E5%92%8C%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F/"/>
    <url>/wilson-blog-hexo/2018/01/19/js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E5%92%8C%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<p>js的局部变量和全局变量</p><span id="more"></span><h3 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h3><ul><li><p>如何声明局部变量和全局变量</p></li><li><p>js变量作用域基于特有的作用域链</p></li><li><p>js没有块级作用域（ES5-）</p></li><li><p>函数中声明的变量在整个函数中都有定义</p></li></ul><h3 id="声明局部变量和全局变量"><a href="#声明局部变量和全局变量" class="headerlink" title="声明局部变量和全局变量"></a>声明局部变量和全局变量</h3><ul><li><p>全局变量——定义在函数外的变量</p></li><li><p>局部变量——函数内部声明的变量</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-string">&#x27;global&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getLocal</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">var</span> a = <span class="hljs-string">&#x27;local&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br>&#125;<br><br><span class="hljs-title function_">getLocal</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br></code></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-keyword">local</span><br><span class="hljs-keyword">global</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">a = <span class="hljs-string">&#x27;global&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getLocal</span>(<span class="hljs-params"></span>) &#123;<br>a = <span class="hljs-string">&#x27;local&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br>b = <span class="hljs-string">&#x27;local&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);<br>&#125;<br><br><span class="hljs-title function_">getLocal</span>();<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);<br></code></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-keyword">local</span><br><span class="hljs-keyword">local</span><br><span class="hljs-keyword">local</span><br><span class="hljs-keyword">local</span><br></code></pre></td></tr></table></figure><p>疑问：</p><p>函数外的a为什么变成local？</p><p>函数外为什么可以访问b？</p><p>解析：</p><p><strong>函数体内部，局部变量优先级比同名全局变量高</strong></p><p><strong>函数体内声明变量不使用var，会暴露在全局上下文中，和现有变量冲突，并覆盖同名全局变量</strong></p><h3 id="变量作用域链"><a href="#变量作用域链" class="headerlink" title="变量作用域链"></a>变量作用域链</h3><p>每当js执行时会有一个对应的执行环境被创建（每一个方法在自己独有的执行环境中执行）</p><p>执行环境中的重要部分——函数的调用对象（存储相应函数的局部变量）</p><blockquote><p>函数的执行环境包含了调用对象，调用对象的属性就是函数的局部变量，每个函数在这样的执行环境中执行。函数之外的代码在另一个环境中执行，包含了全局变量。</p></blockquote><h4 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h4><p>对象组成的列表或链</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> rain = <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">rainMan</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">var</span> man = <span class="hljs-number">2</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">inner</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">var</span> innerVar = <span class="hljs-number">4</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rain);<br>&#125;<br><br><span class="hljs-title function_">inner</span>();<br>&#125;<br><br><span class="hljs-title function_">rainMan</span>();<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">1<br></code></pre></td></tr></table></figure><p>解析：</p><ol><li>rainMain()</li><li>man和inner()分别是rainMain定义的变量和函数</li><li>执行inner()</li><li>寻找rain</li><li>先在inner内部找，没找到</li><li>继续在rainMain中找，没找到</li><li>在全局对象找，找到，输出1</li><li>若全局对象中还未找到则报错：Uncaught ReferenceError: rain is not defined</li></ol><p>在全局的js执行环境中，作用域链只包含一个对象——全局对象</p><p>在函数的执行环境中，同时包含函数的调用对象</p><p>js的函数可嵌套——每个函数执行环境的作用域链可能包含不同数目个对象</p><p>一个非嵌套的函数的执行环境中，作用域链包含这个函数的调用对象和全局对象</p><p>嵌套的函数的执行环境中，作用域链包含嵌套的每一层函数的调用对象以及全局变量</p><h3 id="JS没有块级作用域"><a href="#JS没有块级作用域" class="headerlink" title="JS没有块级作用域"></a>JS没有块级作用域</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkVariable</span>(<span class="hljs-params">obj</span>) &#123;<br><span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> obj == <span class="hljs-string">&#x27;object&#x27;</span>) &#123;<br><span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">3</span>; k++) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(k);<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(k);<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(j);<br>&#125;<br><br><span class="hljs-title function_">checkVariable</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>());<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs">0<br>1<br>2<br>3<br>0<br></code></pre></td></tr></table></figure><p>i,j,k作用域相同，都在checkVariable()函数内都是全局的</p><p>函数中声明的所有变量，无论在哪里声明，在整个函数中都有定义</p><h3 id="函数中声明的变量在整个函数中都有定义（即使在声明之前）"><a href="#函数中声明的变量在整个函数中都有定义（即使在声明之前）" class="headerlink" title="函数中声明的变量在整个函数中都有定义（即使在声明之前）"></a>函数中声明的变量在整个函数中都有定义（即使在声明之前）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkVariable</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">inner</span>(<span class="hljs-params"></span>) &#123;<br>a = <span class="hljs-number">100</span>;<br>&#125;<br><span class="hljs-title function_">inner</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br>&#125;<br><span class="hljs-title function_">checkVariable</span>();<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">100<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkVariable</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br><span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br>&#125;<br><span class="hljs-title function_">checkVariable</span>();<br></code></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-literal">undefined</span><br><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>原因：checkVariable()内部变量a在整个函数内部有定义（var a &#x3D; 2进行了声明）</p><p>于是在<strong>整个函数内隐藏了同名全局变量a</strong></p><p>相当于</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkVariable</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">var</span> a;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br>a = <span class="hljs-number">2</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br>&#125;<br><br><span class="hljs-title function_">checkVariable</span>();<br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>js变量的域根据方法块划分，而非for、while、if块（因为没有块作用域）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkVariable</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i);<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i);<br><br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br><span class="hljs-keyword">var</span> j = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(j);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br><span class="hljs-keyword">var</span> k = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(k);<br>&#125;<br><br><span class="hljs-title function_">checkVariable</span>();<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(j);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(k);<br></code></pre></td></tr></table></figure><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="hljs-number">0</span><br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br><span class="hljs-number">1</span><br><span class="hljs-number">1</span><br>Uncaught ReferenceError: i <span class="hljs-literal">is</span><span class="hljs-built_in"> not</span> defined<br></code></pre></td></tr></table></figure><p>js在执行前对整个脚本做分析（包括局部变量）以确定变量是局部变量还是全局变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkVariable</span> () &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br>a = <span class="hljs-number">2</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br><span class="hljs-keyword">var</span> a;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br>&#125;<br><span class="hljs-title function_">checkVariable</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br></code></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-literal">undefined</span><br><span class="hljs-number">2</span><br><span class="hljs-number">2</span><br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>函数中声明的变量在整个函数中都有定义（即使在声明之前）</p><p>这里虽然a一开始未使用var声明，但在js一开始的扫描时发现后面有var对a进行声明，所以a不会暴露在全局，覆盖同名全局变量a，所以函数外面的输出1</p><p>由于a在函数内部后面是使用var声明的，所以在前面的输出中能够输出2，此时其实a已经被声明了，整个函数内部是整体分析的，所以才会出现函数中的变量在声明之前被定义（a &#x3D; 2）</p><p>参考：<a href="https://www.w3cplus.com/javascript/the-basics-of-variable-scope-in-javascript.html">https://www.w3cplus.com/javascript/the-basics-of-variable-scope-in-javascript.html</a></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js学习笔记——闭包</title>
    <link href="/wilson-blog-hexo/2018/01/19/js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E9%97%AD%E5%8C%85/"/>
    <url>/wilson-blog-hexo/2018/01/19/js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E9%97%AD%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<p>JS闭包探析。What exactly the Closure is?</p><span id="more"></span><h3 id="计算机术语"><a href="#计算机术语" class="headerlink" title="计算机术语"></a>计算机术语</h3><p>闭包：引用了自由变量的函数。这个被引用的自由变量和这个函数一同存在，即使已经离开了创造它的环境。</p><h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><ul><li><p>全局</p></li><li><p>局部</p></li></ul><h4 id="函数内部可直接读取全局变量"><a href="#函数内部可直接读取全局变量" class="headerlink" title="函数内部可直接读取全局变量"></a>函数内部可直接读取全局变量</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> n1 = <span class="hljs-number">9</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">alert</span>(n1);<br>&#125;<br><br><span class="hljs-title function_">f1</span>();<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">9<br></code></pre></td></tr></table></figure><p>因为变量声明在Global，全局可见，它的子当然可以访问到</p><h4 id="函数外部无法直接读取函数内部的局部变量"><a href="#函数外部无法直接读取函数内部的局部变量" class="headerlink" title="函数外部无法直接读取函数内部的局部变量"></a>函数外部无法直接读取函数内部的局部变量</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">f2</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> n2 = <span class="hljs-number">99</span>;<br>&#125;<br><br><span class="hljs-title function_">alert</span>(n2);<br></code></pre></td></tr></table></figure><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xquery">n2 <span class="hljs-literal">is</span><span class="hljs-built_in"> not</span> defined<br></code></pre></td></tr></table></figure><p>因为函数是子，函数外部是父，父无法直接访问到子的局部变量</p><h4 id="函数内部变量如果未用var声明则为全局变量"><a href="#函数内部变量如果未用var声明则为全局变量" class="headerlink" title="函数内部变量如果未用var声明则为全局变量"></a>函数内部变量如果未用var声明则为全局变量</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">f3</span>(<span class="hljs-params"></span>) &#123;<br>  n3 = <span class="hljs-number">999</span>;<br>&#125;<br><br><span class="hljs-title function_">f3</span>();<br><br><span class="hljs-title function_">alert</span>(n3);<br></code></pre></td></tr></table></figure><p>999</p><p>不管变量是在函数内还是函数外声明，如果没有使用var声明变量，就会是全局可见的</p><p>于是此时的n3是Global.n3</p><h3 id="从外部读取局部变量"><a href="#从外部读取局部变量" class="headerlink" title="从外部读取局部变量"></a>从外部读取局部变量</h3><p><del>想起了Java的反射</del></p><p>方法：在函数内部再定义一个函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">f4</span>(<span class="hljs-params"></span>) &#123;<br><br>  <span class="hljs-keyword">var</span> n4 = <span class="hljs-number">9999</span>;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">f5</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">alert</span>(n4);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>解析：</p><p>f5在f4内部，f4（父）的所有局部变量对f5（子）可见<br>反之，f5（子）的局部变量对f4（父）不可见</p><p>即“链式作用域”结构（chain scope）：子对象会一级一级向上寻找所有父对象的变量</p><p>将f5作为<strong>返回值</strong>，即可在f4外部读取其内部变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">f4</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">var</span> n4 = <span class="hljs-number">9999</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f5</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-title function_">alert</span>(n4);<br>&#125;<br><span class="hljs-keyword">return</span> f5;<br>&#125;<br><br><span class="hljs-keyword">var</span> result = <span class="hljs-title function_">f4</span>();<br><span class="hljs-title function_">result</span>();<span class="hljs-comment">// Bingo! 9999</span><br></code></pre></td></tr></table></figure><p>引用了自由变量的函数（f5）和被引用的自由变量（n4）一同存在，即使自由变量离开了创造它的环境（f4）。</p><p>这个函数（f5）称为闭包</p><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>上面的f5函数就是闭包（能够读取其他函数内部变量的函数——函数内部的子函数）</p><p>闭包是连接函数外部和函数内部的桥梁</p><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><ul><li><p>读取函数内部的变量</p></li><li><p>让这些变量的值始终保持在内存中</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">f6</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">var</span> n6 = <span class="hljs-number">999999</span>;<br>nAdd6 = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;n6+=<span class="hljs-number">1</span>&#125;;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f7</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-title function_">alert</span>(n6);<br>&#125;<br><span class="hljs-keyword">return</span> f7;<br>&#125;<br><span class="hljs-keyword">var</span> result6 = <span class="hljs-title function_">f6</span>();<br><span class="hljs-title function_">result6</span>();<br><span class="hljs-title function_">nAdd6</span>();<br><span class="hljs-title function_">result6</span>();<br></code></pre></td></tr></table></figure><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">999999</span><br><span class="hljs-number">1000000</span><br></code></pre></td></tr></table></figure><p>相当于f6的局部变量n6一直保存在内存中，并没有在f6调用后被自动清除</p><p>nAdd的值是一个匿名函数，也相当于一个闭包，使得在函数外部可以对函数内部的局部变量进行操作</p><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ul><li><p>闭包导致函数中的变量保存在内存中，消耗内存大，易造成性能问题，IE中可能导致内存泄露（解决：退出函数前将不使用的局部变量删除）</p></li><li><p>会在父函数外部改变内部变量的值，若把父函数当作对象（object）使用，把闭包当作其公用方法，把内部变量当作私有属性，切忌随意改变父函数内部变量的值</p></li></ul><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;The Window&quot;</span>;<br><br><span class="hljs-keyword">var</span> object = &#123;<br>name : <span class="hljs-string">&quot;My Object&quot;</span>,<br><br>getNameFunc : <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>;<br>&#125;<br>&#125;<br>&#125;;<br><br><span class="hljs-title function_">alert</span>(object.<span class="hljs-title function_">getNameFunc</span>()());<br></code></pre></td></tr></table></figure><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-built_in">Window</span><br>The <span class="hljs-built_in">Window</span><br></code></pre></td></tr></table></figure><p>没取到对象内部的变量，则this指向window中的变量name（当前匿名函数的this即Window）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;The Window&quot;</span>;<br><br><span class="hljs-keyword">var</span> object = &#123;<br>name : <span class="hljs-string">&quot;My Object&quot;</span>,<br><br>getNameFunc : <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">var</span> that = <span class="hljs-variable language_">this</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">return</span> that.<span class="hljs-property">name</span>;<br>&#125;;<br>&#125;<br>&#125;;<br><br><span class="hljs-title function_">alert</span>(object.<span class="hljs-title function_">getNameFunc</span>()());<br></code></pre></td></tr></table></figure><p>&#x2F;&#x2F; My Object</p><p>剖析：</p><blockquote><p>通过函数getNameFunc内部的匿名函数取得object内部变量name</p></blockquote><blockquote><p>object.getNameFunc()()</p></blockquote><blockquote><p>this即是调用getNameFunc的object</p></blockquote><blockquote><p>把object赋值给that</p></blockquote><blockquote><p>that.name即是My Object</p></blockquote><blockquote><p>that.name，因为当前匿名函数没有that变量，会去其父寻找，找到，发现that的值是this，this又表示当前正在调用函数的对象，即object</p></blockquote><p>参考： <a href="http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html">http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html</a></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>比特币协议是如何工作的（译）</title>
    <link href="/wilson-blog-hexo/2018/01/18/%E6%AF%94%E7%89%B9%E5%B8%81%E5%8D%8F%E8%AE%AE%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84/"/>
    <url>/wilson-blog-hexo/2018/01/18/%E6%AF%94%E7%89%B9%E5%B8%81%E5%8D%8F%E8%AE%AE%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84/</url>
    
    <content type="html"><![CDATA[<p>本文翻译自13年一篇关于比特币协议的深度解析文章</p><p><img src="http://trigolds.com/bg2018010402.png"></p><span id="more"></span><p>成千上万篇文章为了解释比特币这一线上、点对点的货币而撰写。大多数文章对于其底层加密协议都只给出一些简短的解释，却忽略了很多细节。甚至那些文章常常掩盖重点进行更深入的研究。我这篇文章的目的是以一种清晰、容易理解的方式解释隐藏在比特币协议后面的主要思想。我们将从第一原则开始，对于比特币如何工作建立一个广义的理论上的理解，然后再深挖其细节，检查比特币交易的原始数据。</p><p>以细节的方式理解协议是一项困难的工作。人们转而接受比特币，并从事投机关于如何通过比特币致富、比特币吧是否泡沫，比特币是否意味着税收结束的一天等等。这很有趣，但是严重限制你理解它。理解比特币的协议细节打开了难以进入的远景。特别是，理解比特币内建脚本语言的基础会使得使用比特币创造新的金融工具成为可能，比如智能合同。反过来，新的金融工具可以被用来创造新的市场并缔造人类行为新的集合形式。聊聊这些趣事吧！</p><p>我会在后面的文章中描述比特币脚本和一些概念，比如智能合同。这篇文章集中解释比特币协议的核心。理解这篇文章你需要对公钥加密以及与其紧密关联的数字签名概念比较熟悉。我将同样假定你对加密散列概念熟悉。以上这些都没有特别难理解的。基本概念都会在大学的大一数学课程或者计算机课程中教授。这些概念很优雅，所以如果你对于他们不是很熟悉，我建议你先花一点时间熟悉一下。</p><p>也许看上去比较神奇，比特币的基础是密码学。比特币不是一种货币？不是一种发送秘密信息的方式？事实上，比特币需要解决的事情大部分是安全事务——确保人们不能互相窃取，或者伪造等等。在原子世界我们通过一些设备，例如锁、保险箱、签名、银行金库实现安全。在比特世界我们通过加密实现安全。这也是为什么比特币的核心是加密协议。</p><p>我在这篇文章中的策略是分阶段建立起比特币。我会通过解释一种非常简单的数字货币开始，所基于的思想几乎显而易见。我们将称其信息货币（Infocoin），以区分于比特币。当然，我们第一个版本的信息币会有很多不足，然后我们会经过多个迭代，每个迭代介绍仅仅一或两个新的想法。经过多个迭代后，我们将达到完整的比特币协议。我们将重新发明了比特币。</p><p>这种策略比起我一次性解释整个比特币协议要慢。但是当你通过这样一次性解释的方式理解了比特币机制时，再去理解比特币为什么这样设计就会很困难。这种通过慢迭代的解释方式优势在于可以让你对于比特币每一个元素理解得更加犀利。</p><p>最后，我应该提及对于比特币我也是个新手。我从2011年开始松散地关注（在20世纪90年代末开始关注加密数字货币），但直到今年早些时候才着重关注比特币协议的细节。所以我将非常感激对于我误解部分的指正。另外在本篇文章中我还包含了很多“留给读者的问题”——在我写作过程中对于新冒出的问题的一些笔记。你会发现这很有趣，但你也可以把它们全部跳过以免丢失全文的线索。</p><p>第一步：签名意图信</p><p>所以我们该如何设计一个数字货币呢？</p><p>从表面上来看，数字货币听起来是不可能的。假设某个人，让我们称其Alice，她有一些电子钱想花掉。如果Alice想使用一串比特字符作为钱，我们如何才能阻止她反复使用相同的比特字符串呢？否则将意味着会产生无穷无尽的钱。或者假如我们可以通过某种方式解决这个问题，但我们如何才能防止其他人伪造这样一串比特字符并用来偷取Alice的钱呢？</p><p>这些只是众多问题中的两个，必须被克服以为了使用信息作为货币。</p><p>作为信息币的第一个版本，让我们找到一个方法使得Alice可以使用一串字符（非常原始和不完整）作为货币的形式，以某种至少保证她的货币不会被伪造的方式。假设Alice想给Bob一个信息币。为了这么做，Alice写下一行字符串“我，爱丽丝，给Bob一个信息币”。然后她用私钥给这条信息做了数字签名，并告知全世界<br>这段签过名的字符串。</p><p>（顺便提一下，我使用首字母大写的Infocoin表示信息币协议及一般概念，用首字母小写的infocoin特指货币面值，类似用法很常见，虽然在比特币的世界不通用）</p><p>这并不是一个令人非常影响深刻的数字货币原型。但它的确有一些优点。世界上的任何人（包括Bob）可以使用Alice的公钥去确认Alice的确是“我，爱丽丝，给Bob一个信息币”这条信息签名的主人。没有其他人可以造出这条比特信息。但反过来，Alice也可以说“不，我没说要给Bob一个信息币”。所以这个协议建立在Alice真的想给Bob一个信息币。同样的事实——没有其他人可以构造这样一条签名信息——也给予Alice一些防止其他人伪造的有限保护。当然，在Alice创建她的这条信息后也可能其他人复制了这条信息，这样的话伪造是可能的。但无法从头伪造。这两种属性——Alice建立企图的部分和防止伪造的有限保护部分，是这个协议值得注意的特征。</p><p>我在这个协议中没有（非常）准确地讲数字货币是什么。为了使其明确：特指这条信息本身，例如，这行比特字符串展示了数字货币“我，爱丽丝，给Bob一个信息币”。后面的协议类似，我们所有数字货币的形式只是会越来越复杂。</p><h5 id="使用序列号来使得货币被唯一标识"><a href="#使用序列号来使得货币被唯一标识" class="headerlink" title="使用序列号来使得货币被唯一标识"></a>使用序列号来使得货币被唯一标识</h5><p>第一个版本的信息币的问题在于Alice可以一次又一次地继续向Bob发送相同的签名消息。假定Bob收到了十份“我，爱丽丝，给Bob一个信息币”这样的拷贝签名信息。意味着Alice向Bob发送了十个不同的信息币吗？她的信息是巧合复制出来的吗？可能她只是试图戏弄Bob使其相信她给了他十个不同的信息币，当这条信息向全世界证明才表示她真的企图传送一个信息币。</p><p>我们想要的是一种使得信息币唯一的方式。它们需要一个标签或者序列号。Alice将签名“我，爱丽丝，用序列号8740348给Bob一个信息币”这条信息。然后，随后，Alice可以签名“我，爱丽丝，用序列号8770431给Bob一个信息币”消息，然后Bob（还有其他人）将会知道这是另外一个信息币被传送了。</p><p>使得这个方案工作，我们需要一个可信任的序列号源用于信息币。创建这样一个源的方法之一是引用一个银行。这个银行将为信息币提供序列号，并追溯谁拥有了哪一个信息币并确认交易的确合法。</p><p>更详细地说，让我们假设Alice去银行并说“我想从我的账户提取一个信息币”。银行从她的账户余额中扣减一个信息币，并分配给她一个新的、之前从未使用过的序列号，让我们称其1234567。然后当Alice想把她的信息比转移给Bob时，她签名“我，Alice，给Bob一个信息币，使用序列号1234567”这条消息。但Bob并没有就这样接受这个信息币。而是联系了银行以确认：（a）这个序列号的信息币是否属于Alice；（b）Alice已经支付了这个信息币。如果这两者都是真的，然后Bob告诉银行他想接受这个信息币，于是银行更新他们的交易记录并展示这个序列号的信息币现在是Bob的财产，并不再属于Alice。</p><h5 id="使每个人都集中于银行"><a href="#使每个人都集中于银行" class="headerlink" title="使每个人都集中于银行"></a>使每个人都集中于银行</h5><p>上一个解决方案看上去很有前途。然而，事实证明，我们可以做一些更有野心的事情。我们完全可以消除银行的协议。这在很大程度上改变了货币的本质。这意味着不再有任何单一的组织管控货币。当你想到中央银行的巨大力量——控制着货币的供应量——这将是一个非常巨大的变化。</p><p>这个想法是使得每个人（全体地）都是银行。特别是，我们假设每一个人都使用信息币保持着哪些信息币属于哪一个人的完整记录。你可以理解为这是一个展示所有的信息币交易的共享公共平台。我们称这个平台为区块链，因为那就被称为比特币的完整记录，一旦我们得到它。</p><p>现在，假定Alice想转移一个信息币给Bob。她签名了“我，Alice，给Bob一个信息币，以序列号1234567”这条消息并把这条签名消息给了Bob。Bob可以用他拷贝的区块链去校验这的确是Alice给出的。如果校验成功，然后他把这笔交易中Alice发出的消息和他的接收消息广播给整个网络，于是每个人都更新他们的区块链拷贝。</p><p>我们仍然有“序列号从哪来”这个问题，但这变得容易解决，所以我将推迟到后面讲解，在讨论比特币的部分。一个更具挑战的问题是，这个协议允许Alice通过支付她的信息币双倍来作弊。她发送“我，爱丽丝，给了Bob一个信息币，以序列号1234567”给Bob，同时发送“我，爱丽丝，给Charlie一个信息币，以序列号1234567”给Charlie。Bob和Charlie都使用他们拷贝的区块链来检查这个信息币是Alice支付的。只要他们是同一时刻做这个验证（在他们有机会彼此听说之前），他们两个都会发现，是的，区块链显示这个信息币的确属于Alice。于是他们都会接受这笔交易，并广播他们的接受。现在就有了问题，其他人该怎么更新他们的区块链呢？可能没有简单的方法来实现一个一致的共享事务平台。即使每个人都能达成一致的方式去更新他们的区块链，仍会有Bob或者Charlie将被欺骗的问题。</p><p>乍一看Alice支付双份的问题难以解决。毕竟，如果Alice先向Bob发送消息，然后Bob可以确认这条消息，并告诉每个在网络内的人（包括Charlie）去更新他们的区块链。一旦那发生了，Charlie就不再会被Alice欺骗。所以最有可能只有非常短的一段时间内Alice可以支付出双份。然而，显然这样的一段时间是不可理喻的。更糟糕的是，有技术可以被Alice用来延长这一段时间。她可以，举个例子，利用网络流量分析发现Bob和Charlie沟通延迟很多的一段时间。或者她可以做些事情来故意破坏他们的通信。如果她能减慢通信甚至一点都将使得她支付双份更加容易。</p><p>我们怎样才能解决这个双份支付的问题？明显的解决方法是当Alice向Bob发送一个信息币的时候，Bob不应该试图独自确认交易。相反，他应该将可能的交易广播给信息币用户整个网络，并询问他们去判定这笔交易是否合法。如果他们集体决定这笔交易没问题，然后Bob可以接受这个信息币，并告诉每个人更新区块链。这种协议可以避免双份支付，因为如果Alice试图将她的信息币同时支付给Bob和Charlie，其他人会察觉到，并且网络用户会告诉Bob和Charlie这笔交易有问题，于是交易将无法通过。</p><p>更详细地，让我们假设Alice想要给Bob一个信息币。像之前那样，她签名“我，爱丽丝，给Bob一个信息币，以序列号1234567”这条消息，并把这条签名消息发送给Bob。同样如以前那样，Bob做了一个明智的检查，使用他拷贝的区块链检查，的确，当前这个信息币属于爱丽丝。但在这个点上协议被修改了。Bob并没有继续接受这笔交易。取而代之的是，他广播Alice的这条消息给整个网络。网络上的其他成员检查Alice是否拥有这个信息币。如果如此，他们广播消息“是的，Alice拥有信息币1234567，现在这条消息可以发送给Bob”。一旦足够多的人广播这条消息，每个人都更新他们的区块链以显示信息币现在属于Bob，交易将完成。</p><p>目前这个协议有许多不准确的元素。例如，什么是“一旦足够多的人广播了这条消息”？这里的“足够”到底意味着什么？它可以意味着网络里的每一个人，因为我们无法预先知道谁在这个信息币网络里。出于同样的原因，它不能意味着网络内一些固定的用户。我们现在不试着使这些想法变准确。取而代之，在下一个部分我会指出一个严重的问题和方法按照所描述。解决那个问题将同时有良好的副作用可以使得上面的想法更加准确。</p><h5 id="工作证据（Proof-of-work）"><a href="#工作证据（Proof-of-work）" class="headerlink" title="工作证据（Proof-of-work）"></a>工作证据（Proof-of-work）</h5><p>假设Alice想要支付双份，以我刚描述的基于网络的协议。她可以通过接管信息币网络来这么做。让我们假设她使用了一个自动化系统建立了非常大量的独立身份，让我假设是十亿个，在信息币网络上。正如此前，她想支付双份，同时将一个信息币发送给Bob和Charlie。但是当Bob和Charlie询问网络以验证他们对于交易的观点，Alice的傀儡身份在网络中向Bob声称他们验证了这笔交易，并告诉Charlie他们验证了这笔交易，可能同时愚弄一个或二者同时去接受这笔交易。</p><p>有一个聪明的方法可以避免这个问题，使用一个被称为工作证据的想法。这个想法是违反直觉的并且设计到两个概念的结合：（1）去（人工）使得对于网络用户验证交易变得从计算角度花费很大（昂贵）（原文：to (artificially) make it computationally costly for network users to validate transactions）；(2)<br>奖励那些试图帮助验证交易的人。奖励被使用，这样网络上的用户就会努力去帮忙验证交易。虽然那样会导致一个计算非常昂贵的过程。使得验证交易变得昂贵的收益是不再会受网络身份的某些人控制的影响，而只有通过总的计算力量才能施加在验证上（原文：The benefit of making it costly to validate transactions is that validation can no longer be influenced by the number of network identities someone controls, but only by the total computational power they can bring to bear on validation.）我们会看到，用一些聪明的设计我们可以让骗子欺骗需要巨大的计算资源，使得其不切实际。</p><p>这是Proof-of-work的要点。但要真正理解其，我们需要深究细节。</p><p>假定Alice向网络广播一条消息“我，爱丽丝，给Bob一个信息币，以序列号1234567”。</p><p>当别人在网络上听到这条消息，每个人将其添加进一个他们被告知的交易等待队列，但他们还尚未被网络所批准。举个例子，另一个网络用户名叫David可能有以下交易等待队列：</p><p>我，Tom，给Sue一个信息币，以序列号1201174<br>我，Sydney，给Cynthia一个信息币，以序列号1295618<br>我，Alice，给Bob一个信息币，以序列号1234567</p><p>David检查自己的区块链，并可以看到每一笔交易都是有效的。他想通过广播整个网络这个有效性来帮忙。</p><p>然而，在此之前，作为验证协议的一部分，David被要求去解决一个困难的计算难题——the proof-of-work。没有对于这个难题的解决，网络的其他人不会接受他对于这笔交易的验证。</p><p>David需要解决的是一个怎样的难题呢？为了解释它，让h作为一个固定的散列函数，被网络内的每一个人所知道——被建立在协议内。比特币使用著名的SHA-256散列函数，但是任何加密安全散列函数都可以。让我们给David的交易等待队列一个标签l，这样它有了名字可以被用来谈及。假设David为l附上一个数字x（称为nonce）并为其组合求哈希。举个例子，如果我们使用l&#x3D;”Hello,world!”(显然这不是一个交易清单，只是一个用于演示目的的字符串)和临时值（nonce）x&#x3D;0（输出是一个十六进制）</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm">h(<span class="hljs-string">&quot;Hello,world!0&quot;</span>) <span class="hljs-operator">=</span><br><span class="hljs-number">1312</span>af<span class="hljs-number">178</span><span class="hljs-keyword">c</span><span class="hljs-number">253</span>f<span class="hljs-number">84028</span>d<span class="hljs-number">480</span>a<span class="hljs-number">6</span>adc<span class="hljs-number">1e25</span>e<span class="hljs-number">81</span>caa<span class="hljs-number">44</span><span class="hljs-keyword">c</span><span class="hljs-number">749</span>ec<span class="hljs-number">81976192e2</span>ec<span class="hljs-number">934</span><span class="hljs-keyword">c</span><span class="hljs-number">64</span><br></code></pre></td></tr></table></figure><p>David需要解决的难题是——the proof-of-work——去找到一个临时值（nonce）x，这样当我们将x附加于l并求其组合的散列值，输出的哈希值以很长一段0开头。这里的困难可以被变得更加困难或更加简单通过改变解决这个困难所需要的0的数量。一个较为简单的proof-of-work难题可能在哈希值的头部只需要3个或4个0，然而一个较为困难的proof-of-work难题可能需要更长的一串0，比如15个连续的0。在任何一种情况，上述找到合适的临时值尝试，用x&#x3D;0，都是一个失败，因为输出的开头根本就不含任何的0。尝试用x&#x3D;1也没有效果。</p><p>未完待续</p><p>原文链接：<a href="http://www.michaelnielsen.org/ddi/how-the-bitcoin-protocol-actually-works/">http://www.michaelnielsen.org/ddi/how-the-bitcoin-protocol-actually-works/</a></p><p><a href="https://en.bitcoin.it/wiki/Proof_of_work">proof-of-work</a></p>]]></content>
    
    
    <categories>
      
      <category>翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>其他</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>webpack学习笔记</title>
    <link href="/wilson-blog-hexo/2018/01/17/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/wilson-blog-hexo/2018/01/17/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>关于Webpack基础使用的整理</p><span id="more"></span><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><ul><li><p>网站由网页模式进化成Webapp模式</p></li><li><p>网站运行在高级浏览器中，使用HTML5、CSS3、ES6等新技术</p></li><li><p>webapp通常是单页面应用（每一个视图通过异步方式加载，导致页面初始化和使用过程会加载更多的js代码）</p></li><li><p>前端开发基于多语言、多层次编码和组织工作，交付基于浏览器，需要保证代码和资源在浏览器端快速优雅的加载和更新，亟需<strong>模块化系统</strong></p></li></ul><h3 id="传统方式"><a href="#传统方式" class="headerlink" title="传统方式"></a>传统方式</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;module1.js&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">scrpti</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;module2.js&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">scrpti</span>&gt;</span></span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;module3.js&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">scrpti</span>&gt;</span></span></span></span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="language-handlebars">...</span></span></span></span></span></span><br></code></pre></td></tr></table></figure><h4 id="弊端"><a href="#弊端" class="headerlink" title="弊端"></a>弊端</h4><ul><li><p>全局作用域（定义在window对象下）下易造成变量冲突</p></li><li><p>文件只能按照脚本引入的顺序加载</p></li><li><p>需要主观解决模块和代码库的依赖关系</p></li><li><p>大型项目中资源难以管理，长期积累导致代码库混乱不堪</p></li></ul><h3 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h3><p>服务端的Node.js遵循CommonJS规范</p><h4 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h4><ol><li>允许模块通过require方法来<strong>同步加载</strong>要依赖的其他模块</li><li>通过exports或module.exports导出需要暴露的接口</li></ol><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">require(<span class="hljs-string">&quot;module&quot;</span>)<span class="hljs-comment">;</span><br>require(<span class="hljs-string">&quot;../file.js&quot;</span>)<span class="hljs-comment">;</span><br>exports.doStuff <span class="hljs-operator">=</span> function() &#123;&#125;<span class="hljs-comment">;</span><br>module.exports <span class="hljs-operator">=</span> someValue<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><ul><li><p>服务端模块便于重用</p></li><li><p>NPM中已有大量可用模块包（20w）</p></li><li><p>简单易用</p></li></ul><h4 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h4><ul><li><p>同步的模块加载方式不适合在浏览器环境中，同步意味着阻塞加载，浏览器资源是异步加载的</p></li><li><p>不能非阻塞的并行加载多个模块</p></li></ul><h3 id="ES6模块"><a href="#ES6模块" class="headerlink" title="ES6模块"></a>ES6模块</h3><p>ES6标准增加了js语言层面的模块体系定义</p><p>ES6的设计思想是尽量的<strong>静态化</strong>，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。</p><h4 id="优势-1"><a href="#优势-1" class="headerlink" title="优势"></a>优势</h4><ul><li><p>易于进行静态分析</p></li><li><p>面向未来ES标准</p></li></ul><h4 id="缺陷-1"><a href="#缺陷-1" class="headerlink" title="缺陷"></a>缺陷</h4><ul><li><p>原生浏览器未实现该标准</p></li><li><p>全新命令字，新版Node.js才支持</p></li></ul><h3 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h3><p>编译时对整个代码进行静态分析，分析出各模块的<strong>类型</strong>和<strong>依赖关系</strong>，将不同类型的模块交由相应的加载器处理。</p><h3 id="Webpack概念"><a href="#Webpack概念" class="headerlink" title="Webpack概念"></a>Webpack概念</h3><p>Webpack是一个模块打包器。</p><p>根据模块的依赖关系进行静态分析，然后将模块按照指定的规则生成对应的静态资源</p><h3 id="现有模块化工具无法实现"><a href="#现有模块化工具无法实现" class="headerlink" title="现有模块化工具无法实现"></a>现有模块化工具无法实现</h3><ul><li><p>将依赖树拆分成按需加载的块</p></li><li><p>初始化加载的耗时尽量少</p></li><li><p>各种静态资源都可视作模块</p></li><li><p>将第三方库整合成模块</p></li><li><p>自定义打包逻辑</p></li><li><p>适合无论单页或多页的Web应用大项目</p></li></ul><h3 id="Webpack特点"><a href="#Webpack特点" class="headerlink" title="Webpack特点"></a>Webpack特点</h3><ul><li><p>代码拆分</p></li><li><p>Loader</p></li><li><p>智能解析</p></li><li><p>插件系统</p></li><li><p>快速运行</p></li></ul><h4 id="代码拆分"><a href="#代码拆分" class="headerlink" title="代码拆分"></a>代码拆分</h4><ul><li><p>两种组织模块依赖的方式：同步、异步、</p></li><li><p>异步依赖作为分割点，形成新的块</p></li><li><p>优化了依赖树后，每一个异步区块都作为一个文件被打包</p></li></ul><h4 id="Loader"><a href="#Loader" class="headerlink" title="Loader"></a>Loader</h4><ul><li><p>Webpack本身只能处理原生js模块</p></li><li><p>loader转换器可将各种类型的资源转换成js模块</p></li></ul><h4 id="智能解析"><a href="#智能解析" class="headerlink" title="智能解析"></a>智能解析</h4><p>Webpack有一个智能解析器，几乎可以处理任何第三方库</p><p>无论模块形式是CommonJS或是普通js文件</p><p>加载依赖时甚至允许动态表达式</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">require</span><span class="hljs-params">(<span class="hljs-string">&quot;./templates/&quot;</span> + name + <span class="hljs-string">&quot;.jade&quot;</span>)</span></span><br></code></pre></td></tr></table></figure><h4 id="插件系统"><a href="#插件系统" class="headerlink" title="插件系统"></a>插件系统</h4><p>Webpack有一个功能丰富的插件系统</p><p>可开发和使用开源插件满足各式需求</p><h4 id="快速运行"><a href="#快速运行" class="headerlink" title="快速运行"></a>快速运行</h4><p>Webpack使用异步I&#x2F;O和多级缓存提高运行效率</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>Webpack需要Node.js v0.6以上支持</p><p>使用npm全局安装</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> webpack -g<br></code></pre></td></tr></table></figure><p>将Webpack安装到项目的依赖中</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs q">npm install webpack --<span class="hljs-built_in">save</span>-<span class="hljs-built_in">dev</span><br></code></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>index.html</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scritp</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;bundle.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>entry.js</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-built_in">document</span>.write(<span class="hljs-string">&#x27;Hello world&#x27;</span>)<br></code></pre></td></tr></table></figure><p>编译entry.js并打包到bundle.js</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">webpack entry<span class="hljs-number">.</span><span class="hljs-keyword">js</span> bundle<span class="hljs-number">.</span><span class="hljs-keyword">js</span><br></code></pre></td></tr></table></figure><p>访问index.html即可</p><h4 id="添加模块"><a href="#添加模块" class="headerlink" title="添加模块"></a>添加模块</h4><p>module.js</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">module.exports</span> = <span class="hljs-string">&#x27;It works from module.js.&#x27;</span><br></code></pre></td></tr></table></figure><p>entry.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;Hello world&#x27;</span>)<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./module.js&#x27;</span>))<br></code></pre></td></tr></table></figure><p>打包</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">webpack entry<span class="hljs-number">.</span><span class="hljs-keyword">js</span> bundle<span class="hljs-number">.</span><span class="hljs-keyword">js</span><br></code></pre></td></tr></table></figure><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>webpack分析入口文件，解析包含依赖关系的各个文件</p><p>这些文件（模块）都打包到bundle.js</p><p>webpack给每个模块分配一个唯一ID并通过ID索引和访问模块</p><p>页面启动时先执行entry.js，其他模块在运行require时再执行</p><h3 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h3><h4 id="背景-1"><a href="#背景-1" class="headerlink" title="背景"></a>背景</h4><p>webpack本身只能处理js模块，其他类型文件需要loader进行转换</p><p>loader本身一个函数，接受源文件为参数，返回转换结果</p><h4 id="loader特性"><a href="#loader特性" class="headerlink" title="loader特性"></a>loader特性</h4><ul><li><p>可通过管道方式链式调用，每个loader可将资源转换成任意格式并传递给下一个loader，最后一个loader必须返回js</p></li><li><p>可同步或异步执行</p></li><li><p>运行在node.js环境中，可做任何可能的事情</p></li><li><p>可接受参数，以此传递配置给loader</p></li><li><p>可通过文件拓展名（或正则表达式）绑定给不同类型的文件</p></li><li><p>可通过npm发布和安装</p></li><li><p>除了通过package.json和main指定，通常的模块也可导出一个loader来使用</p></li><li><p>可访问配置</p></li><li><p>支持插件</p></li><li><p>可分发出附件的任意文件</p></li></ul><h4 id="loader命名"><a href="#loader命名" class="headerlink" title="loader命名"></a>loader命名</h4><p>一般为xxx-loader，xxx为转换的功能，例如json-loader</p><p>引用loader时可通过全名（json-loader）或短名(json)</p><p>命名规则和搜索优先级顺序在resolveLoader.moduleTemplates API中定义</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-literal">Default</span>: [<span class="hljs-string">&quot;*-webpack-loader&quot;</span>, <span class="hljs-string">&quot;*-web-loader&quot;</span>, <span class="hljs-string">&quot;*-loader&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>]<br></code></pre></td></tr></table></figure><h4 id="添加方式"><a href="#添加方式" class="headerlink" title="添加方式"></a>添加方式</h4><ul><li><p>在require()引用模块时添加</p></li><li><p>webpack全局配置中绑定</p></li><li><p>命令行方式</p></li></ul><h4 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h4><p>在页面引入一个CSS文件style.css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123; <span class="hljs-attribute">background</span>: yellow; &#125;<br></code></pre></td></tr></table></figure><p>entry.js</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// 载入style.css</span><br><span class="hljs-function"><span class="hljs-title">require</span><span class="hljs-params">(<span class="hljs-string">&quot;!style-loader!css-loader!./style.css&quot;</span>)</span></span><br>document<span class="hljs-selector-class">.write</span>(<span class="hljs-string">&#x27;Hello world.&#x27;</span>)<br>document<span class="hljs-selector-class">.write</span>(<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./module.js&#x27;</span>))<br></code></pre></td></tr></table></figure><h4 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h4><p>将style.css看作一个模块</p><p>用css-loader读取</p><p>用style-loader把它插入页面</p><h4 id="安装loader"><a href="#安装loader" class="headerlink" title="安装loader"></a>安装loader</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> css-loader style-loader<br></code></pre></td></tr></table></figure><p>即可</p><h4 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h4><p>根据模块类型（拓展名）自动绑定需要的loader，避免每次require CSS文件时都写loader前缀</p><p>entry.js</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">require</span><span class="hljs-params">(<span class="hljs-string">&quot;!style!css!./style.css&quot;</span>)</span></span><br></code></pre></td></tr></table></figure><p>修改为</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">require</span><span class="hljs-params">(<span class="hljs-string">&quot;./style.css&quot;</span>)</span></span><br></code></pre></td></tr></table></figure><h4 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">webpack entry.<span class="hljs-keyword">js </span><span class="hljs-keyword">bundle.js </span>--module-<span class="hljs-keyword">bind </span><span class="hljs-string">&quot;css=style-loader!css-loader&quot;</span><br></code></pre></td></tr></table></figure><p>Bingo! 效果一样</p><p>只不过是在打包环节根据模块类型绑定需要的loader，不需要在require中写loader前缀</p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>上面通过在命令行在执行webpack时传入参数，可通过指定配置文件来执行</p><p>默认搜索当前目录webpack.config.js</p><p>该文件是一个node.js模块，返回一个json格式的配置信息对象</p><p>可通过–config选项指定配置文件</p><h4 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h4><p>创建package.json添加webpack需要的依赖</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs stata">&#123;<br><span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;my-webpack&quot;</span>,<br><span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;1.0.0&quot;</span>,<br><span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;A simple webpack example&quot;</span>,<br><span class="hljs-string">&quot;main&quot;</span>: <span class="hljs-string">&quot;bundle.js&quot;</span>,<br><span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br><span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;echo \&quot;</span><span class="hljs-keyword">Error</span>: <span class="hljs-keyword">no</span> <span class="hljs-keyword">test</span> specified\<span class="hljs-string">&quot; &amp;&amp; exit 1&quot;</span><br>&#125;,<br><span class="hljs-string">&quot;keywords&quot;</span>: [<br><span class="hljs-string">&quot;webpack&quot;</span><br>],<br><span class="hljs-string">&quot;author&quot;</span>: <span class="hljs-string">&quot;igam&quot;</span>,<br><span class="hljs-string">&quot;license&quot;</span>: <span class="hljs-string">&quot;MIT&quot;</span>,<br><span class="hljs-string">&quot;devDependencies&quot;</span>: &#123;<br><span class="hljs-string">&quot;css-loader&quot;</span>: <span class="hljs-string">&quot;^0.21.0&quot;</span>,<br><span class="hljs-string">&quot;style-loader&quot;</span>: <span class="hljs-string">&quot;^0.13.0&quot;</span>,<br><span class="hljs-string">&quot;webpack&quot;</span>: <span class="hljs-string">&quot;^1.12.2&quot;</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>根据package.json下载依赖模块</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure><p>创建配置文件webpack.config.js</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs lua">var webpack = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack&#x27;</span>)<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>entry: <span class="hljs-string">&#x27;./entry.js&#x27;</span>,<br><span class="hljs-built_in">output</span>: &#123;<br><span class="hljs-built_in">path</span>: __dirname,<br>filename: <span class="hljs-string">&#x27;bundle.js&#x27;</span><br>&#125;,<br><span class="hljs-built_in">module</span>: &#123;<br><span class="hljs-built_in">loaders</span>: [<br>&#123;test: /\.css$/, loader: <span class="hljs-string">&#x27;style-loader!css-loader&#x27;</span>&#125;<br>]<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Bingo again!</p><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>一般在配置文件plugins选项中指定</p><p>webpack内置一些常用插件，还可通过npm安装第三方插件</p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>内置插件BannerPlugin：给输出的文件头部添加注释</p><p>webpack.config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> webpack = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br><span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./entry.js&#x27;</span>,<br><span class="hljs-attr">output</span>: &#123;<br><span class="hljs-attr">path</span>: __dirname,<br><span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;bundle.js&#x27;</span><br>&#125;,<br><span class="hljs-attr">module</span>: &#123;<br><span class="hljs-attr">loaders</span>: [<br>&#123;<span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>, <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;style-loader!css-loader&#x27;</span>&#125;<br>]<br>&#125;,<br><span class="hljs-attr">plugins</span>: [<br><span class="hljs-keyword">new</span> webpack.<span class="hljs-title class_">BannerPlugin</span>(<span class="hljs-string">&#x27;This file is created by igam&#x27;</span>)<br>]<br>&#125;<br></code></pre></td></tr></table></figure><p>在bundle.js文件头可看见效果</p><h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><p>编译时间长，可以通过参数让编译输出内容带有<strong>进度</strong>和<strong>颜色</strong></p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">webpack</span> <span class="hljs-literal">--</span><span class="hljs-comment">progress</span> <span class="hljs-literal">--</span><span class="hljs-comment">colors</span><br></code></pre></td></tr></table></figure><p>若不想每次修改模块后重新编译，可启动<strong>监听模式</strong></p><p>开启后，没有变化的模块会在编译后缓存到内存中，而非每次重新编译</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">webpack</span> <span class="hljs-literal">--</span><span class="hljs-comment">progress</span> <span class="hljs-literal">--</span><span class="hljs-comment">colors</span> <span class="hljs-literal">--</span><span class="hljs-comment">watch</span><br></code></pre></td></tr></table></figure><h4 id="更好选择"><a href="#更好选择" class="headerlink" title="更好选择"></a>更好选择</h4><p>使用webpack-dev-server开发服务</p><p>将在localhost:8080启动一个express静态资源服务器</p><p>以监听模式自动运行webpack</p><p>访问<a href="http://localhost:8080/%E6%88%96http://localhost:8080/webpack-dev-server/%E5%8F%AF%E6%B5%8F%E8%A7%88%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E9%A1%B5%E9%9D%A2%E5%92%8C%E7%BC%96%E8%AF%91%E5%90%8E%E7%9A%84%E8%B5%84%E6%BA%90%E8%BE%93%E5%87%BA%EF%BC%8C%E5%B9%B6%E9%80%9A%E8%BF%87%E4%B8%80%E4%B8%AAsocket.io%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%97%B6%E7%9B%91%E5%90%AC%E5%8F%98%E5%8C%96%E5%B9%B6%E8%87%AA%E5%8A%A8%E5%88%B7%E6%96%B0">http://localhost:8080/或http://localhost:8080/webpack-dev-server/可浏览项目中的页面和编译后的资源输出，并通过一个socket.io服务实时监听变化并自动刷新</a></p><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">npm install webpack-dev-<span class="hljs-keyword">server</span> -g<br></code></pre></td></tr></table></figure><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">webpack</span> <span class="hljs-literal">-</span><span class="hljs-comment">dev</span><span class="hljs-literal">-</span><span class="hljs-comment">server</span> <span class="hljs-literal">--</span><span class="hljs-comment">progress</span> <span class="hljs-literal">--</span><span class="hljs-comment">colors</span><br></code></pre></td></tr></table></figure><h3 id="故障处理"><a href="#故障处理" class="headerlink" title="故障处理"></a>故障处理</h3><p>可通过参数–display-error-deatils打印错误详情</p><p>webpack的配置提供了resovle和resolveLoader参数设置模块解析的处理细节</p><p>resolve配置应用层模块（被打包的模块）解析</p><p>resolveLoader配置loader模块的解析</p><blockquote><p>当引入通过npm安装的node.js模块时，可能出现找不到依赖的错误</p></blockquote><p>Node.js模块的依赖解析算法是通过查看模块的每一层父目录中的node-modules文件夹来查询依赖</p><p>当出现Node.js模块依赖查找失败时可尝试设置resolve.fallback和resolveLoader.fallback解决问题</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">module.exports = &#123;<br>resolve: &#123; fallback: <span class="hljs-type">path</span>.<span class="hljs-keyword">join</span>(__dirname, &quot;node_modules&quot;) &#125;,<br>resolveLoader: &#123; fallback: <span class="hljs-type">path</span>.<span class="hljs-keyword">join</span>(__dirname, &quot;node_modules&quot;) &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>webpack中设计路径配置最好使用绝对路径，建议使用path.resolve(__dirname, “app&#x2F;folder”)或path.join(__dirname, “app”, “folder”)方式配置，以兼容Windows环境</p><p>参考： <a href="http://zhaoda.net/webpack-handbook/index.html">http://zhaoda.net/webpack-handbook/index.html</a></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何设计良好的API并且为什么这很重要（译）</title>
    <link href="/wilson-blog-hexo/2018/01/16/%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E8%89%AF%E5%A5%BD%E7%9A%84API%E5%B9%B6%E4%B8%94%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%99%E5%BE%88%E9%87%8D%E8%A6%81%EF%BC%88%E8%AF%91%EF%BC%89/"/>
    <url>/wilson-blog-hexo/2018/01/16/%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E8%89%AF%E5%A5%BD%E7%9A%84API%E5%B9%B6%E4%B8%94%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%99%E5%BE%88%E9%87%8D%E8%A6%81%EF%BC%88%E8%AF%91%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="为什么API设计很重要？"><a href="#为什么API设计很重要？" class="headerlink" title="为什么API设计很重要？"></a>为什么API设计很重要？</h3><p>本文翻译自Effective Java作者Joshua Bloch撰写的一篇关于API设计的分享</p><span id="more"></span><h4 id="API可以是公司最大的资产之一"><a href="#API可以是公司最大的资产之一" class="headerlink" title="API可以是公司最大的资产之一"></a>API可以是公司最大的资产之一</h4><ul><li>客户投入巨资：购买、撰写、学习（售前一系列培训）</li><li>停止使用API导致的花费令人望而却步（如果不使用API可能要花费更多）</li><li>成功的公共API赢得客户</li></ul><h4 id="也可以成为公司最大的负债之一"><a href="#也可以成为公司最大的负债之一" class="headerlink" title="也可以成为公司最大的负债之一"></a>也可以成为公司最大的负债之一</h4><ul><li>糟糕的APIs将导致无休止的电话技术支持（需要接听很多来自客户的反映）</li></ul><h4 id="公共的APIs是永久的——一次去做正确事情的机会"><a href="#公共的APIs是永久的——一次去做正确事情的机会" class="headerlink" title="公共的APIs是永久的——一次去做正确事情的机会"></a>公共的APIs是永久的——一次去做正确事情的机会</h4><h3 id="为什么API设计对于你来说很重要"><a href="#为什么API设计对于你来说很重要" class="headerlink" title="为什么API设计对于你来说很重要"></a>为什么API设计对于你来说很重要</h3><h4 id="如果你编码，你就是一个API的设计者"><a href="#如果你编码，你就是一个API的设计者" class="headerlink" title="如果你编码，你就是一个API的设计者"></a>如果你编码，你就是一个API的设计者</h4><ul><li>良好的代码应该是模块化的——每一个模块都有一个API</li><li>有用的模块往往被重用</li></ul><h4 id="对于API方面的思考将提高代码的质量"><a href="#对于API方面的思考将提高代码的质量" class="headerlink" title="对于API方面的思考将提高代码的质量"></a>对于API方面的思考将提高代码的质量</h4><h3 id="好的API所具备的特征"><a href="#好的API所具备的特征" class="headerlink" title="好的API所具备的特征"></a>好的API所具备的特征</h3><ul><li>易于学习</li><li>易于使用，甚至无需任何文档</li><li>不易误用</li><li>易于阅读并且对所使用的代码部分易于维护</li><li>足够强大以满足需求</li><li>易于拓展</li><li>适用于大众</li></ul><h3 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h3><ul><li>API设计的过程</li><li>一般原则</li><li>类设计</li><li>方法设计</li><li>异常设计</li><li>API重构设计</li></ul><h2 id="I-API设计的过程"><a href="#I-API设计的过程" class="headerlink" title="I API设计的过程"></a>I API设计的过程</h2><h3 id="收集需求——以一种健康的程度怀疑"><a href="#收集需求——以一种健康的程度怀疑" class="headerlink" title="收集需求——以一种健康的程度怀疑"></a>收集需求——以一种健康的程度怀疑</h3><h4 id="通常你会得到建议的解决方法作为替代方案"><a href="#通常你会得到建议的解决方法作为替代方案" class="headerlink" title="通常你会得到建议的解决方法作为替代方案"></a>通常你会得到建议的解决方法作为替代方案</h4><ul><li>可能存在更好的解决方案</li></ul><h4 id="你的工作是去提取出真正的需求"><a href="#你的工作是去提取出真正的需求" class="headerlink" title="你的工作是去提取出真正的需求"></a>你的工作是去提取出真正的需求</h4><ul><li>应采取用例的形式</li><li>可以更容易、更有意义地建立更普遍的东西</li></ul><h4 id="从简短的规范页开始比较理想"><a href="#从简短的规范页开始比较理想" class="headerlink" title="从简短的规范页开始比较理想"></a>从简短的规范页开始比较理想</h4><ul><li>在这个阶段，敏捷胜过完整性</li><li>和尽可能多的人谈（原文：Bounce spec off as many people as possible）<br>  倾听他们的输入并认真对待</li><li>如果你保持规范简短，那么将易于修改</li><li>充分自信<br>  这涉及到编码时也很必要</li></ul><h3 id="尽早写给你的API"><a href="#尽早写给你的API" class="headerlink" title="尽早写给你的API"></a>尽早写给你的API</h3><h4 id="以下应开始于在你实现API之前"><a href="#以下应开始于在你实现API之前" class="headerlink" title="以下应开始于在你实现API之前"></a>以下应开始于在你实现API之前</h4><ul><li>从你将扔掉的实现中拯救你</li></ul><h4 id="以下应开始于你正确指定出API之前"><a href="#以下应开始于你正确指定出API之前" class="headerlink" title="以下应开始于你正确指定出API之前"></a>以下应开始于你正确指定出API之前</h4><ul><li>从撰写你将扔掉的规范中拯救你</li></ul><h4 id="继续写API因为它充实你"><a href="#继续写API因为它充实你" class="headerlink" title="继续写API因为它充实你"></a>继续写API因为它充实你</h4><ul><li>避免令人讨厌的惊喜</li><li>代码作为例子、单元测试而存在</li></ul><h3 id="关于SPI的内容甚至更重要"><a href="#关于SPI的内容甚至更重要" class="headerlink" title="关于SPI的内容甚至更重要"></a>关于SPI的内容甚至更重要</h3><h4 id="服务提供接口（Service-Provider-Interface-SPI）"><a href="#服务提供接口（Service-Provider-Interface-SPI）" class="headerlink" title="服务提供接口（Service Provider Interface, SPI）"></a>服务提供接口（Service Provider Interface, SPI）</h4><ul><li>插件式接口使得实现多样性</li><li>例如：Java加密拓展接口（Java Cryptography Extension, JCE）</li></ul><h4 id="在发布之前编写多个插件"><a href="#在发布之前编写多个插件" class="headerlink" title="在发布之前编写多个插件"></a>在发布之前编写多个插件</h4><ul><li>如果你只写一个，它可能不支持另一种情况</li><li>如果你写两个，它会很难支持更多</li><li>如果你写三个(原文three应表示多个?)，它会良好工作</li></ul><h4 id="Will-Tracz称之为“三项法则”"><a href="#Will-Tracz称之为“三项法则”" class="headerlink" title="Will Tracz称之为“三项法则”"></a>Will Tracz称之为“三项法则”</h4><p>（曾经以为程序销售员Addision-Wesley,1995的自白）</p><h3 id="保持现实的期望"><a href="#保持现实的期望" class="headerlink" title="保持现实的期望"></a>保持现实的期望</h3><h4 id="大多数API设计的过约束"><a href="#大多数API设计的过约束" class="headerlink" title="大多数API设计的过约束"></a>大多数API设计的过约束</h4><ul><li>你不必取悦每一个人</li><li>旨在平等地使每个人都感到高兴</li></ul><h4 id="期望犯错"><a href="#期望犯错" class="headerlink" title="期望犯错"></a>期望犯错</h4><ul><li>几年真实世界的使用将冲洗它们</li><li>期望发展API</li></ul><h2 id="II-一般原则"><a href="#II-一般原则" class="headerlink" title="II 一般原则"></a>II 一般原则</h2><h3 id="API应该只做一件事并把它做好"><a href="#API应该只做一件事并把它做好" class="headerlink" title="API应该只做一件事并把它做好"></a>API应该只做一件事并把它做好</h3><h4 id="功能应该易于解释"><a href="#功能应该易于解释" class="headerlink" title="功能应该易于解释"></a>功能应该易于解释</h4><ul><li>如果很难命名API，那它通常是一个坏讯号</li><li>良好的命名会驱动开发</li><li>要易于分割和合并</li></ul><h4 id="API应尽可能的小但不能再小"><a href="#API应尽可能的小但不能再小" class="headerlink" title="API应尽可能的小但不能再小"></a>API应尽可能的小但不能再小</h4><h4 id="API应该满足它的初始需求"><a href="#API应该满足它的初始需求" class="headerlink" title="API应该满足它的初始需求"></a>API应该满足它的初始需求</h4><h4 id="当存疑时就抛弃掉"><a href="#当存疑时就抛弃掉" class="headerlink" title="当存疑时就抛弃掉"></a>当存疑时就抛弃掉</h4><ul><li>函数、类、方法、参数等等</li><li>你总可以加些什么，但你永远不能去掉什么</li></ul><h4 id="概念的重量比实体块的重量更重要"><a href="#概念的重量比实体块的重量更重要" class="headerlink" title="概念的重量比实体块的重量更重要"></a>概念的重量比实体块的重量更重要</h4><h4 id="寻找一个好的力量-重量比率（此处应指API的作用和轻重之比）"><a href="#寻找一个好的力量-重量比率（此处应指API的作用和轻重之比）" class="headerlink" title="寻找一个好的力量&#x2F;重量比率（此处应指API的作用和轻重之比）"></a>寻找一个好的力量&#x2F;重量比率（此处应指API的作用和轻重之比）</h4><h3 id="实现不应该影响API"><a href="#实现不应该影响API" class="headerlink" title="实现不应该影响API"></a>实现不应该影响API</h3><h3 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h3><ul><li>迷惑用户</li><li>禁止掉改变API实现的自由</li></ul><h4 id="意识到实现细节是什么"><a href="#意识到实现细节是什么" class="headerlink" title="意识到实现细节是什么"></a>意识到实现细节是什么</h4><ul><li>不要过度指定方法的行为</li><li>例如：不要指定散列函数</li><li>所有的可调整参数都是可疑的</li></ul><h4 id="别让实现细节“泄露”进API"><a href="#别让实现细节“泄露”进API" class="headerlink" title="别让实现细节“泄露”进API"></a>别让实现细节“泄露”进API</h4><ul><li>磁盘上的格式和线上的格式例外</li></ul><h3 id="最小化对于所有的可达性"><a href="#最小化对于所有的可达性" class="headerlink" title="最小化对于所有的可达性"></a>最小化对于所有的可达性</h3><h4 id="将类和方法指定得尽可能私有"><a href="#将类和方法指定得尽可能私有" class="headerlink" title="将类和方法指定得尽可能私有"></a>将类和方法指定得尽可能私有</h4><h4 id="公共类不应该有公共域（除了常量）"><a href="#公共类不应该有公共域（除了常量）" class="headerlink" title="公共类不应该有公共域（除了常量）"></a>公共类不应该有公共域（除了常量）</h4><h4 id="这最大化了信息隐藏"><a href="#这最大化了信息隐藏" class="headerlink" title="这最大化了信息隐藏"></a>这最大化了信息隐藏</h4><h4 id="允许模块被独立使用、理解、构建、测试、调试"><a href="#允许模块被独立使用、理解、构建、测试、调试" class="headerlink" title="允许模块被独立使用、理解、构建、测试、调试"></a>允许模块被独立使用、理解、构建、测试、调试</h4><h3 id="给API命名的事务相当于一种小语言"><a href="#给API命名的事务相当于一种小语言" class="headerlink" title="给API命名的事务相当于一种小语言"></a>给API命名的事务相当于一种小语言</h3><h4 id="名字应大部分不言自明（自解释的）"><a href="#名字应大部分不言自明（自解释的）" class="headerlink" title="名字应大部分不言自明（自解释的）"></a>名字应大部分不言自明（自解释的）</h4><ul><li>避免模糊的缩写</li></ul><h4 id="保持一致——同样的词应表达同样的意思"><a href="#保持一致——同样的词应表达同样的意思" class="headerlink" title="保持一致——同样的词应表达同样的意思"></a>保持一致——同样的词应表达同样的意思</h4><ul><li>贯穿API的整个内容（包括不同平台上的该API）</li></ul><h4 id="定期争取对称"><a href="#定期争取对称" class="headerlink" title="定期争取对称"></a>定期争取对称</h4><h4 id="代码应该读起来像散文"><a href="#代码应该读起来像散文" class="headerlink" title="代码应该读起来像散文"></a>代码应该读起来像散文</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss">if (car.speed() &gt; <span class="hljs-number">2</span> * SPEED_LIMIT)<br><span class="hljs-built_in">generateAlert</span>(&quot;Watch out for cops!&quot;);<br></code></pre></td></tr></table></figure><h3 id="文档相关事宜"><a href="#文档相关事宜" class="headerlink" title="文档相关事宜"></a>文档相关事宜</h3><blockquote><p>重用是一件说起来容易做起来难的事。具体做起来既需要好的设计又需要良好的文档。即使我们看到好的设计，我们仍很少能看到没有好的文档组件被重用。</p></blockquote><blockquote><p>D.L.Parnas, _Software Aging. Proceedings of 16th International Conference Software Engineering, 1994</p></blockquote><h3 id="Document-Religiously"><a href="#Document-Religiously" class="headerlink" title="Document Religiously"></a>Document Religiously</h3><h4 id="为每一个类、接口、方法、构造器、参数和异常制作文档（注释）"><a href="#为每一个类、接口、方法、构造器、参数和异常制作文档（注释）" class="headerlink" title="为每一个类、接口、方法、构造器、参数和异常制作文档（注释）"></a>为每一个类、接口、方法、构造器、参数和异常制作文档（注释）</h4><ul><li>类：实例所表示的东西</li><li>方法：方法和客户之间的契约<ul><li>先决条件、后置条件、副作用</li></ul></li><li>参数：提示性的单位、格式、所有权</li></ul><h4 id="文档要非常认真地陈述"><a href="#文档要非常认真地陈述" class="headerlink" title="文档要非常认真地陈述"></a>文档要非常认真地陈述</h4><h3 id="考虑API设计决定的性能后果"><a href="#考虑API设计决定的性能后果" class="headerlink" title="考虑API设计决定的性能后果"></a>考虑API设计决定的性能后果</h3><h4 id="糟糕的决定会限制性能"><a href="#糟糕的决定会限制性能" class="headerlink" title="糟糕的决定会限制性能"></a>糟糕的决定会限制性能</h4><ul><li>让类型易变</li><li>提供构造器以取代静态工厂</li><li>使用实现类型取代接口</li></ul><h4 id="不要扭曲API来获得性能"><a href="#不要扭曲API来获得性能" class="headerlink" title="不要扭曲API来获得性能"></a>不要扭曲API来获得性能</h4><ul><li>底层性能问题会被修复，但头疼的事会一直伴随着你</li><li>良好的设计通常与良好的性能相吻合</li></ul><h4 id="API设计决策在性能方面的影响是真实并且永久的"><a href="#API设计决策在性能方面的影响是真实并且永久的" class="headerlink" title="API设计决策在性能方面的影响是真实并且永久的"></a>API设计决策在性能方面的影响是真实并且永久的</h4><ul><li>Component.getSize() returns Dimension</li><li>尺寸是易变的</li><li>每一个getSize调用都必然分配Dimension</li><li>将导致非常多不必要的对象分配</li><li>在1.2版本增加替代品，老的客户端代码仍然慢（在新的版本找到解决方案，但不能解决旧代码的性能问题）</li></ul><h3 id="API必须和平台和平共存"><a href="#API必须和平台和平共存" class="headerlink" title="API必须和平台和平共存"></a>API必须和平台和平共存</h3><h4 id="做习惯性的事"><a href="#做习惯性的事" class="headerlink" title="做习惯性的事"></a>做习惯性的事</h4><ul><li>遵守标准的命名约定</li><li>避免过时的参数和返回类型</li><li>模仿核心APIs和语言中的模式</li></ul><h4 id="利用API友好功能"><a href="#利用API友好功能" class="headerlink" title="利用API友好功能"></a>利用API友好功能</h4><ul><li>泛型、可变参数、枚举、默认参数</li></ul><h4 id="了解并避免API陷阱"><a href="#了解并避免API陷阱" class="headerlink" title="了解并避免API陷阱"></a>了解并避免API陷阱</h4><ul><li>常量（Finalizers）、公共静态常量数组</li></ul><h2 id="III-类设计"><a href="#III-类设计" class="headerlink" title="III 类设计"></a>III 类设计</h2><h3 id="最小化可变性"><a href="#最小化可变性" class="headerlink" title="最小化可变性"></a>最小化可变性</h3><h4 id="类应该是不可变的除非有一个好的理由不去这么做"><a href="#类应该是不可变的除非有一个好的理由不去这么做" class="headerlink" title="类应该是不可变的除非有一个好的理由不去这么做"></a>类应该是不可变的除非有一个好的理由不去这么做</h4><ul><li>优点： 简洁、线程安全、可复用</li><li>缺点： 对于每个值都分离了对象</li></ul><h4 id="如果可变，保证状态空间尽可能小并被良好定义"><a href="#如果可变，保证状态空间尽可能小并被良好定义" class="headerlink" title="如果可变，保证状态空间尽可能小并被良好定义"></a>如果可变，保证状态空间尽可能小并被良好定义</h4><ul><li>搞清何时去调用哪一个方法是合法的</li></ul><h4 id="仅在合理的地方建子类"><a href="#仅在合理的地方建子类" class="headerlink" title="仅在合理的地方建子类"></a>仅在合理的地方建子类</h4><h5 id="建子类按时可替代性（Liskov）"><a href="#建子类按时可替代性（Liskov）" class="headerlink" title="建子类按时可替代性（Liskov）"></a>建子类按时可替代性（Liskov）</h5><ul><li>子类仅当is-a关系时存在</li><li>否则，使用组合</li></ul><h5 id="公共类不应该再包含其他公共子类，以保证实现简单"><a href="#公共类不应该再包含其他公共子类，以保证实现简单" class="headerlink" title="公共类不应该再包含其他公共子类，以保证实现简单"></a>公共类不应该再包含其他公共子类，以保证实现简单</h5><p>反例： Properties extends Hashtable<br>             Stack extends Vector</p><p>正例： Set extends Collection</p><h3 id="为继承做设计和文档否则禁止"><a href="#为继承做设计和文档否则禁止" class="headerlink" title="为继承做设计和文档否则禁止"></a>为继承做设计和文档否则禁止</h3><h4 id="继承违反封装（Snyder-86）"><a href="#继承违反封装（Snyder-86）" class="headerlink" title="继承违反封装（Snyder, 86）"></a>继承违反封装（Snyder, 86）</h4><ul><li>子类对于父类的实现细节敏感</li></ul><h4 id="如果你允许建子类，那么就文档自用"><a href="#如果你允许建子类，那么就文档自用" class="headerlink" title="如果你允许建子类，那么就文档自用"></a>如果你允许建子类，那么就文档自用</h4><ul><li>方法如何相互使用</li></ul><h4 id="保守策略：所有具体的类都不可变（final）"><a href="#保守策略：所有具体的类都不可变（final）" class="headerlink" title="保守策略：所有具体的类都不可变（final）"></a>保守策略：所有具体的类都不可变（final）</h4><p>反例：J2SE包中许多的具体类<br>正例：AbstractSet, AbstractMap</p><h2 id="IV-方法设计"><a href="#IV-方法设计" class="headerlink" title="IV 方法设计"></a>IV 方法设计</h2><h3 id="别让客户端把模板能做的事都做了"><a href="#别让客户端把模板能做的事都做了" class="headerlink" title="别让客户端把模板能做的事都做了"></a>别让客户端把模板能做的事都做了</h3><h4 id="减少对样板代码的需要"><a href="#减少对样板代码的需要" class="headerlink" title="减少对样板代码的需要"></a>减少对样板代码的需要</h4><ul><li>通常经cut-and-paste完成</li><li>丑陋、恼人并且易错</li></ul><h3 id="不要违反最小原则"><a href="#不要违反最小原则" class="headerlink" title="不要违反最小原则"></a>不要违反最小原则</h3><h4 id="API的使用者不应该对于某些行为感到惊讶"><a href="#API的使用者不应该对于某些行为感到惊讶" class="headerlink" title="API的使用者不应该对于某些行为感到惊讶"></a>API的使用者不应该对于某些行为感到惊讶</h4><ul><li>值得额外的实现努力</li><li>这甚至值得降低性能</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">Thread</span> <span class="hljs-symbol">implements</span> <span class="hljs-symbol">Runnable</span> &#123;<br><span class="hljs-comment">// Tests whether current thread has been interrupted</span><br><span class="hljs-comment">// Clears the interrupted status of current thread.</span><br><span class="hljs-keyword">public</span> static <span class="hljs-built_in">bool</span>ean <span class="hljs-built_in">int</span>errupted();<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的第二行注释所述的功能就做了额外的没必要的努力，违背了最小原则</p><h3 id="当错误发生尽可能快地产生错误报告"><a href="#当错误发生尽可能快地产生错误报告" class="headerlink" title="当错误发生尽可能快地产生错误报告"></a>当错误发生尽可能快地产生错误报告</h3><h4 id="编译时报错最佳——静态拼写、generics"><a href="#编译时报错最佳——静态拼写、generics" class="headerlink" title="编译时报错最佳——静态拼写、generics"></a>编译时报错最佳——静态拼写、generics</h4><h4 id="在运行时，第一个方法调用失败为最佳"><a href="#在运行时，第一个方法调用失败为最佳" class="headerlink" title="在运行时，第一个方法调用失败为最佳"></a>在运行时，第一个方法调用失败为最佳</h4><ul><li>方法应该是原子性失败（failure-atomic）</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">// A Properties instance maps strings to strings</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Properties</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Hashtable</span> </span>&#123;<br>public <span class="hljs-type">Object</span> put(<span class="hljs-type">Object</span> key, <span class="hljs-type">Object</span> value);<br><br><span class="hljs-comment">// Throws ClassCastException if this Properties</span><br><span class="hljs-comment">// contains any keys or values that are not strings</span><br>public void save(<span class="hljs-type">OutputStream</span> out, <span class="hljs-type">String</span> comments);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="为所有的数据访问提供字符串的形式的编程接口"><a href="#为所有的数据访问提供字符串的形式的编程接口" class="headerlink" title="为所有的数据访问提供字符串的形式的编程接口"></a>为所有的数据访问提供字符串的形式的编程接口</h3><h4 id="否则客户端需要做字符串转换"><a href="#否则客户端需要做字符串转换" class="headerlink" title="否则客户端需要做字符串转换"></a>否则客户端需要做字符串转换</h4><ul><li>对于客户端来说很痛苦</li><li>更糟糕的是，turns strings format into de facto API（无力翻译orz）</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Throwable</span> &#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printStackTrace</span>(<span class="hljs-params">PrintStream s</span>)</span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> StackTraceElement[] <span class="hljs-title">getStackTrace</span>()</span>;<span class="hljs-comment">// Since 1.4</span><br>&#125;<br><br><span class="hljs-keyword">public</span> final <span class="hljs-keyword">class</span> <span class="hljs-title">StackTraceElement</span> &#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getFilaName</span>()</span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">getLineNumber</span>()</span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getClassName</span>()</span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getMethodName</span>()</span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> boolean <span class="hljs-title">isNativeMethod</span>()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="小心重载"><a href="#小心重载" class="headerlink" title="小心重载"></a>小心重载</h3><h4 id="避免模糊的重载"><a href="#避免模糊的重载" class="headerlink" title="避免模糊的重载"></a>避免模糊的重载</h4><ul><li>多个重载适用于相同的情况</li><li>保守策略：没有两个重载拥有同样多的参数个数</li></ul><h4 id="仅仅是因为你可以但不意味着你应当"><a href="#仅仅是因为你可以但不意味着你应当" class="headerlink" title="仅仅是因为你可以但不意味着你应当"></a>仅仅是因为你可以但不意味着你应当</h4><ul><li>通常最好使用不同的名字</li></ul><h4 id="如果你必须提供模糊的重载，请确保相同的参数拥有相同的行为"><a href="#如果你必须提供模糊的重载，请确保相同的参数拥有相同的行为" class="headerlink" title="如果你必须提供模糊的重载，请确保相同的参数拥有相同的行为"></a>如果你必须提供模糊的重载，请确保相同的参数拥有相同的行为</h4><p>反例:</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TreeSet</span><span class="hljs-params">(Collection c)</span></span>;<span class="hljs-comment">// Ignores order</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TreeSet</span><span class="hljs-params">(SortedSet s)</span></span>;<span class="hljs-comment">// Respects order</span><br></code></pre></td></tr></table></figure><h3 id="使用恰当的参数和返回类型"><a href="#使用恰当的参数和返回类型" class="headerlink" title="使用恰当的参数和返回类型"></a>使用恰当的参数和返回类型</h3><h4 id="赞成接口类型作为类的输入"><a href="#赞成接口类型作为类的输入" class="headerlink" title="赞成接口类型作为类的输入"></a>赞成接口类型作为类的输入</h4><ul><li>提供灵活性、性能</li></ul><h4 id="使用最具体的可能的输入参数类型"><a href="#使用最具体的可能的输入参数类型" class="headerlink" title="使用最具体的可能的输入参数类型"></a>使用最具体的可能的输入参数类型</h4><ul><li>把运行时错误提前到编译时</li></ul><h4 id="如果存在更好的类型请别用String类型"><a href="#如果存在更好的类型请别用String类型" class="headerlink" title="如果存在更好的类型请别用String类型"></a>如果存在更好的类型请别用String类型</h4><ul><li>Strings是繁琐的、易错的并且慢的</li></ul><h4 id="不要将浮点数用于货币值"><a href="#不要将浮点数用于货币值" class="headerlink" title="不要将浮点数用于货币值"></a>不要将浮点数用于货币值</h4><ul><li>二进制浮点会导致不精确的结果</li></ul><h4 id="使用double-64位-优于float-32位"><a href="#使用double-64位-优于float-32位" class="headerlink" title="使用double(64位)优于float(32位)"></a>使用double(64位)优于float(32位)</h4><ul><li>精确度损失是真实的，性能损失是可忽略的</li></ul><h3 id="在方法之间使用一致的参数顺序"><a href="#在方法之间使用一致的参数顺序" class="headerlink" title="在方法之间使用一致的参数顺序"></a>在方法之间使用一致的参数顺序</h3><h4 id="如果参数类型相同，尤其重要"><a href="#如果参数类型相同，尤其重要" class="headerlink" title="如果参数类型相同，尤其重要"></a>如果参数类型相同，尤其重要</h4><p>反例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">char</span> *<span class="hljs-title">strcpy</span> <span class="hljs-params">(<span class="hljs-type">char</span> *dest, <span class="hljs-type">char</span> *src)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bcopy</span>  <span class="hljs-params">(<span class="hljs-type">void</span> *src, <span class="hljs-type">void</span> *dst, <span class="hljs-type">int</span> n)</span></span>;<br></code></pre></td></tr></table></figure><p>正例：<br>java.util.Collections——第一个参数总被收集来用于修改或查询</p><p>java.util.concurrent——time总被指定为long delay, TimeUnit unit</p><h3 id="避免长参数列表"><a href="#避免长参数列表" class="headerlink" title="避免长参数列表"></a>避免长参数列表</h3><h4 id="三个或更少参数是比较理想的"><a href="#三个或更少参数是比较理想的" class="headerlink" title="三个或更少参数是比较理想的"></a>三个或更少参数是比较理想的</h4><ul><li>如果存在更多，用户则需参阅文档</li></ul><h4 id="相同类型的长参数列表是有害的"><a href="#相同类型的长参数列表是有害的" class="headerlink" title="相同类型的长参数列表是有害的"></a>相同类型的长参数列表是有害的</h4><ul><li>程序员会错误地转置参数</li><li>程序仍会编译、运行，但行为不端</li></ul><h4 id="两种缩短参数列表的技巧"><a href="#两种缩短参数列表的技巧" class="headerlink" title="两种缩短参数列表的技巧"></a>两种缩短参数列表的技巧</h4><ul><li>拆分方法</li><li>创建辅助类来保存参数</li></ul><p>反例：</p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs hsp"><span class="hljs-comment">// Eleven parameters including four consecutive ints</span><br><span class="hljs-keyword">HWND</span> CreateWindow(LPCTSTR lpClassName, LPCTSTR lpWindowName,<br>DWORD dwStyle, <span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y, <span class="hljs-keyword">int</span> nWidth, <span class="hljs-keyword">int</span> nHeight,<br><span class="hljs-keyword">HWND</span> hWndParent, HMENU hMenu, <span class="hljs-keyword">HINSTANCE</span> <span class="hljs-keyword">hInstance</span>,<br>LPVOID lpParam)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="避免返回值需要异常处理"><a href="#避免返回值需要异常处理" class="headerlink" title="避免返回值需要异常处理"></a>避免返回值需要异常处理</h3><h4 id="返回零长度数组或空集合而非null"><a href="#返回零长度数组或空集合而非null" class="headerlink" title="返回零长度数组或空集合而非null"></a>返回零长度数组或空集合而非null</h4><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">package</span> java.awt.image;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BufferedImageOp</span> </span>&#123;<br><span class="hljs-comment">// Returns the rendering hints for this operation,</span><br><span class="hljs-comment">// or null if no hints have been set.</span><br><span class="hljs-keyword">public</span> <span class="hljs-function">RenderingHints <span class="hljs-title">getRenderingHints</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="V-异常设计"><a href="#V-异常设计" class="headerlink" title="V.异常设计"></a>V.异常设计</h2><h3 id="抛出异常以表明异常的条件"><a href="#抛出异常以表明异常的条件" class="headerlink" title="抛出异常以表明异常的条件"></a>抛出异常以表明异常的条件</h3><h4 id="不要强迫客户端去使用异常来控制流"><a href="#不要强迫客户端去使用异常来控制流" class="headerlink" title="不要强迫客户端去使用异常来控制流"></a>不要强迫客户端去使用异常来控制流</h4><p>反例:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">private</span> <span class="hljs-built_in">byte</span>[] a = <span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[BUF_SIZE];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">processBuffer</span> (<span class="hljs-params">ByteBuffer buf</span>)</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>buf.<span class="hljs-keyword">get</span>(a);<br>processBytes(tmp, BUF_SIZE);<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (BufferUnderflowException e) &#123;<br><span class="hljs-built_in">int</span> remaining = buf.remaining();<br>buf.<span class="hljs-keyword">get</span>(a, <span class="hljs-number">0</span>, remaning);<br>processBytes(bufArray, remaining);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="反过来，不要安静的失败"><a href="#反过来，不要安静的失败" class="headerlink" title="反过来，不要安静的失败"></a>反过来，不要安静的失败</h4><p>例如：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ThreadGroup<span class="hljs-selector-class">.enumerate</span>(Thread<span class="hljs-selector-attr">[]</span> list)<br></code></pre></td></tr></table></figure><h3 id="赞成未经检查的异常"><a href="#赞成未经检查的异常" class="headerlink" title="赞成未经检查的异常"></a>赞成未经检查的异常</h3><h4 id="已检查——客户端必须采取修复措施"><a href="#已检查——客户端必须采取修复措施" class="headerlink" title="已检查——客户端必须采取修复措施"></a>已检查——客户端必须采取修复措施</h4><h4 id="未检查——程序报错"><a href="#未检查——程序报错" class="headerlink" title="未检查——程序报错"></a>未检查——程序报错</h4><h4 id="过度使用已检查的异常会导致样板化"><a href="#过度使用已检查的异常会导致样板化" class="headerlink" title="过度使用已检查的异常会导致样板化"></a>过度使用已检查的异常会导致样板化</h4><p>反例：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">try</span> &#123;<br>Foo f = (Foo) <span class="hljs-keyword">super</span>.clone();<br>...<br>&#125; <span class="hljs-keyword">catch</span> (CloneNotSupportedException e) &#123;<br><span class="hljs-comment">// This can&#x27;t happen, since we&#x27;re Cloneable</span><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-type">AssertionError</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="在异常中包含错误捕获信息"><a href="#在异常中包含错误捕获信息" class="headerlink" title="在异常中包含错误捕获信息"></a>在异常中包含错误捕获信息</h3><h4 id="允许诊断、修复或恢复"><a href="#允许诊断、修复或恢复" class="headerlink" title="允许诊断、修复或恢复"></a>允许诊断、修复或恢复</h4><h4 id="对于未检查的异常，信息就足够了"><a href="#对于未检查的异常，信息就足够了" class="headerlink" title="对于未检查的异常，信息就足够了"></a>对于未检查的异常，信息就足够了</h4><h4 id="对于已检查的异常，提供访问者"><a href="#对于已检查的异常，提供访问者" class="headerlink" title="对于已检查的异常，提供访问者"></a>对于已检查的异常，提供访问者</h4><h2 id="VI-重构API设计"><a href="#VI-重构API设计" class="headerlink" title="VI 重构API设计"></a>VI 重构API设计</h2><h3 id="向量的子列表操作"><a href="#向量的子列表操作" class="headerlink" title="向量的子列表操作"></a>向量的子列表操作</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> Vector &#123;<br><span class="hljs-built_in">public</span> <span class="hljs-type">int</span> indexOf(<span class="hljs-keyword">Object</span> elem, <span class="hljs-type">int</span> <span class="hljs-keyword">index</span>);<br><span class="hljs-built_in">public</span> <span class="hljs-type">int</span> lastIndexOf(<span class="hljs-keyword">Object</span> elem, <span class="hljs-type">int</span> <span class="hljs-keyword">index</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="不够强大——只支持搜索"><a href="#不够强大——只支持搜索" class="headerlink" title="不够强大——只支持搜索"></a>不够强大——只支持搜索</h4><h4 id="没有文档很难使用"><a href="#没有文档很难使用" class="headerlink" title="没有文档很难使用"></a>没有文档很难使用</h4><h3 id="字列表操作重构"><a href="#字列表操作重构" class="headerlink" title="字列表操作重构"></a>字列表操作重构</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-symbol">List</span> &#123;<br>List subList(<span class="hljs-built_in">int</span> fromIndex, <span class="hljs-built_in">int</span> toIndex);<br>...<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="非常强大——支持所有的操作"><a href="#非常强大——支持所有的操作" class="headerlink" title="非常强大——支持所有的操作"></a>非常强大——支持所有的操作</h4><h4 id="接口的使用减少了概念的重量"><a href="#接口的使用减少了概念的重量" class="headerlink" title="接口的使用减少了概念的重量"></a>接口的使用减少了概念的重量</h4><ul><li>高功率重量比</li></ul><h4 id="没有文档也易于使用"><a href="#没有文档也易于使用" class="headerlink" title="没有文档也易于使用"></a>没有文档也易于使用</h4><h3 id="Thread-local变量"><a href="#Thread-local变量" class="headerlink" title="Thread-local变量"></a>Thread-local变量</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-comment">// Broken - inappropriate use of String as capability.</span><br><span class="hljs-comment">// Keys constitue a shared global namespace.</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadLocal</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-title function_">ThreadLocal</span>() &#123; &#125;<span class="hljs-comment">// Non-instantiable</span><br><br><span class="hljs-comment">// Sets current thread&#x27;s value for named variable.</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-built_in">set</span>(<span class="hljs-built_in">String</span> <span class="hljs-built_in">key</span>, <span class="hljs-built_in">Object</span> value);<br><br><span class="hljs-comment">// Returns current thread&#x27;s value for named variable.</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">Object</span> <span class="hljs-built_in">get</span>(<span class="hljs-built_in">String</span> <span class="hljs-built_in">key</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Thread-Local变量重构（1）"><a href="#Thread-Local变量重构（1）" class="headerlink" title="Thread-Local变量重构（1）"></a>Thread-Local变量重构（1）</h4><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadLocal</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-title function_">ThreadLocal</span>() &#123; &#125;  <span class="hljs-comment">// Noninstantiable</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Key</span> &#123;<span class="hljs-title function_">Key</span>() &#123; &#125; &#125;<br><span class="hljs-comment">// Generates a unique, unforgeable key</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-built_in">set</span>(Key <span class="hljs-built_in">key</span>, <span class="hljs-built_in">Object</span> value);<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">Object</span> <span class="hljs-built_in">get</span>(Key <span class="hljs-built_in">key</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="有效，但是需要使用样板代码"><a href="#有效，但是需要使用样板代码" class="headerlink" title="有效，但是需要使用样板代码"></a>有效，但是需要使用样板代码</h3><p>例如:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">static ThreadLocal.Key serialNumberKey = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ThreadLocal</span>.</span></span>get<span class="hljs-constructor">Key()</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ThreadLocal</span>.</span></span>set(serialNumberKey, next<span class="hljs-constructor">SerialNumber()</span>);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ThreadLocal</span>.</span></span>get(serialNumberKey));<br></code></pre></td></tr></table></figure><h4 id="Thread-Local变量重构（2）"><a href="#Thread-Local变量重构（2）" class="headerlink" title="Thread-Local变量重构（2）"></a>Thread-Local变量重构（2）</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ThreadLocal</span> &#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ThreadLocal</span>()</span> &#123; &#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span>(<span class="hljs-params">Object <span class="hljs-keyword">value</span></span>)</span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">get</span>()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="消除API和客户端代码之间的混乱"><a href="#消除API和客户端代码之间的混乱" class="headerlink" title="消除API和客户端代码之间的混乱"></a>消除API和客户端代码之间的混乱</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">static</span> ThreadLocal serialNumber = <span class="hljs-keyword">new</span> ThreadLocal();<br>serialNumber.<span class="hljs-keyword">set</span>(nextSerialNumber());<br>System.<span class="hljs-keyword">out</span>.println(serialNumber.<span class="hljs-keyword">get</span>());<br></code></pre></td></tr></table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><h3 id="API设计是一种高贵且有益的工艺"><a href="#API设计是一种高贵且有益的工艺" class="headerlink" title="API设计是一种高贵且有益的工艺"></a>API设计是一种高贵且有益的工艺</h3><ul><li>改进了很多程序员、最终用户和公司</li></ul><h3 id="这次谈话涵盖了一些启发式的手艺"><a href="#这次谈话涵盖了一些启发式的手艺" class="headerlink" title="这次谈话涵盖了一些启发式的手艺"></a>这次谈话涵盖了一些启发式的手艺</h3><ul><li>不要狂妄地坚持，但…</li><li>不要没有理由的违反</li></ul><h3 id="API设计很难"><a href="#API设计很难" class="headerlink" title="API设计很难"></a>API设计很难</h3><ul><li>不是一个孤独的活动</li><li>完美是无法实现的，但无论如何都要尝试</li></ul><h2 id="个人评价-总结"><a href="#个人评价-总结" class="headerlink" title="个人评价&amp;总结"></a>个人评价&amp;总结</h2><p>本文评价了很多Java语言包以及面向对象的优点和缺点，也包含C语言的部分例子。本文作者Joshua Bloch同时也是Effective Java的作者。本文中有些用词比较晦涩难懂，但通篇整体很好也很全面地剖析了API设计的重要性及一部分技巧和注意事项，值得参考借鉴。</p><p>翻译过程也是磕磕绊绊，很多地方自我感觉翻译的不甚准确，甚至有问题，实在找不到合适的翻译的地方注明了原文或保留原文词句，希望有心读者能指正并反馈。不过翻译的过程的确为了理解作者原意，也会竭尽脑力去思考和体会字里行间所表达的思想，收益良多。<br>其中不乏有些建议的确出现于日常的编程实践，并作为编程规范存在于最佳实践中，一眼就能理解。也有一些目前可能尚未在实际应用中良好实践。</p><p>原文链接：<a href="https://web.archive.org/web/20110903030015/http://lcsd05.cs.tamu.edu/slides/keynote.pdf">https://web.archive.org/web/20110903030015/http://lcsd05.cs.tamu.edu/slides/keynote.pdf</a></p>]]></content>
    
    
    <categories>
      
      <category>翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>API</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vultr账单解析及使用ssr在vultr搭建代理</title>
    <link href="/wilson-blog-hexo/2017/11/28/vultr%E8%B4%A6%E5%8D%95%E8%A7%A3%E6%9E%90%E5%8F%8A%E4%BD%BF%E7%94%A8ssr%E5%9C%A8vultr%E6%90%AD%E5%BB%BA%E4%BB%A3%E7%90%86/"/>
    <url>/wilson-blog-hexo/2017/11/28/vultr%E8%B4%A6%E5%8D%95%E8%A7%A3%E6%9E%90%E5%8F%8A%E4%BD%BF%E7%94%A8ssr%E5%9C%A8vultr%E6%90%AD%E5%BB%BA%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>今天就之前疑惑不解的vultr账单做了一波分析，终于算是破案了。借此也记录一下服务器搭建ssr的详细步骤。</p><span id="more"></span><p>一开始打开vultr账单，我是懵比的</p><p>这里面的加加减减使我很费解，不知道vultr的记账方式，也不知道它的扣款方式（原因是我从开通账户后就毫无规律的充值，但服务器的使用却一直未受影响而断过）</p><hr><p>首先我第一反应是看我总共实际花了多少钱。</p><p>我的vultr是绑定Paypal作为付款方式，而Paypal中绑定了两张银行卡，一张储蓄卡，一张信用卡，在查阅了银行卡关于paypal的消费记录后统计如下</p><p>然后我试着从vultr账单中与之响应对账</p><p>的确找到四笔是通过paypal消费的</p><p>现在证实了一点，我一共在vultr花费了17.65美元，折合人民币123.6元</p><hr><p>那么接下来再通过这四笔明确的消费来反推其他账单记录的含义，发现一笔比较特殊的</p><p>计算得到</p><p>由此可见vultr是按小时计费，一开始承诺的每月5美元，指的是如果你用满一个月（744个小时，31天）为5美元，而使用就是指你的服务器开启着（记录中一开始有十几天没计费应该是我虽然开通了vultr并且也充了值，但是没建立服务器实例，或者说建立的实例没开启）</p><p>归根结底，当服务器开启，每个月还是相当于5美元的，这样再看账单可以清晰一点</p><p>那么更进一步，我回想到之前按照首页提示的奖励金额去关注了vultr的twitter账号，所以有了11月这三笔记录</p><p>这三笔很明显是系统审核我的行为后为我以信用账户（accout credit）的方式分别充值了3美元</p><p>至此，整体应该算是破案了，我们可以用类比的思想（把陌生的事物类比成熟悉的事物，以便理解）可以理解为，vultr在开通账户的时候是需要先付款后消费，不存在试用（先免费用，再补交费用）的情况。</p><p>但是当开通账户并充值以后，它的收费方式是每月1号，结算上个月的消费实际情况，会给你账单记录中发送一枚发票（invoice），你使用paypal进行的主动充值也会有所记录。但是可以先消费，后缴费。具体体现就是你这个月使用的费用是下个月1号结算，如果到时候你的vultr账户余额不足，它就会从你绑定的支付方式（比如paypal或信用卡）中自动扣款。</p><p>最终再次整理账单分析</p><hr><p>下面是在vultr上搭建ssr的步骤（在国外服务器搭建代理）：</p><p>首先，你得有台服务器，国外服务器，国内服务器也可以，不过达不到“代理”的效果</p><p>然后，你得有ssr的客户端 <a href="https://pan.baidu.com/s/1nvdzD37">下载</a></p><p>接着你只需要在你的服务器上安装ssr服务，再通过ssr客户端访问，就可以实现让你电脑上的网络访问经由代理处理。</p><p>代理的作用就是，首先它是国外的服务器，它可以轻松访问很多国外的资源，比如谷歌，比如youtube。然后它作为你的代理帮你拿到这些资源后，你和代理有着亲密的关系（通过ssr），这时你访问谷歌或者youtube，实际是在访问代理替你拿到的资源。（whatever）最终你实现了访问你本来访问不到的资源这样的效果。</p><p>这么看来，关键在于搭建ssr服务这一步（和代理服务器搞好关系），那么其实这个操作也没什么难度，因为已经有大佬写了ssr这个东西，你只是需要安装而已。</p><p>有这样的一键安装脚本</p><p>不检查证书安装shadowsocksR</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget --no-check-certificate https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/teddysun/</span>shadowsocks_install<span class="hljs-regexp">/master/</span>shadowsocksR.sh<br></code></pre></td></tr></table></figure><p>将shadowsocksR设置为可执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x shadowsocksR.sh<br></code></pre></td></tr></table></figure><p>执行shadowsocksR并记录日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./shadowsocksR.sh 2&gt;&amp;1 | <span class="hljs-built_in">tee</span> shadowsocksR.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>安装过程中会提示你输入一些东西（当然，也会提示你如果不填会有默认项）</p><p>密码：设置你通过ssr客户端连接ssr服务的密码</p><p>服务端口：设置你的ssr服务在服务器上开放哪个端口提供外部访问</p><p>以及加密方式等balabala其他参数信息（都可以根据提示填好，提示很清晰，只需英语好）</p><p>最后，重启服务器</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">reboot</span><br></code></pre></td></tr></table></figure><p>在你本地的ssr客户端填入刚才在服务器设置的一系列参数（密码、端口、加密方式及其他）即可愉快地科学上网啦</p><p>拓展：卸载shadowsocksR方法（当然，你要在安装shadowsocks的目录执行该命令）</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">./shadowsocks-<span class="hljs-keyword">go</span>.<span class="hljs-keyword">sh</span> uninstall<br></code></pre></td></tr></table></figure><p>参考链接：</p><p><a href="https://github.com/Alvin9999/new-pac/wiki/%E8%87%AA%E5%BB%BAss%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B">https://github.com/Alvin9999/new-pac/wiki/%E8%87%AA%E5%BB%BAss%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B</a></p>]]></content>
    
    
    <categories>
      
      <category>瞎鼓捣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>其他</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用分支备份hexo博客</title>
    <link href="/wilson-blog-hexo/2017/11/17/%E4%BD%BF%E7%94%A8%E5%88%86%E6%94%AF%E5%A4%87%E4%BB%BDhexo%E5%8D%9A%E5%AE%A2/"/>
    <url>/wilson-blog-hexo/2017/11/17/%E4%BD%BF%E7%94%A8%E5%88%86%E6%94%AF%E5%A4%87%E4%BB%BDhexo%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>使用一台电脑使用hexo创建博文、生成静态文件、发布，没毛病，但由于hexo在本地生成静态文件的模式，如果你换一台电脑呢？很明显你需要把原始电脑上的hexo文件夹拷贝到新电脑。这样带来的问题就是多台电脑上的hexo不能总保持同步，需要通过物理拷贝的方式，很不方便。</p><span id="more"></span><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>实现方式可能有多种，但我看到的主流方式是通过在远端仓库添加分支来保存hexo原始文件来将你的整个博客工程交由git管理。</p><p>hexo本身的确是通过git发布到远端的，也就是借助hexo-deployer-git这个nodejs模块，但其功能是将hexo发布目录（public）里的静态文件上传至远端仓库，因为远端仓库是通过pages服务直接访问仓库文件，需要保证仓库文件符合web可访问结构。</p><p>假如你把hexo原始工程目录上传到你的同名仓库来实现pages服务，是无法正常访问的。</p><p>那么我们可以再建一个仓库来管理hexo原始工程文件，但没必要，这里通过在原仓库上添加分支来保存hexo原始工程文件，达到管理的目的。</p><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><p>hexo主目录默认有一个.gitignore文件，暗示可以通过git管理hexo主目录</p><p>可以在hexo主目录通过git bash here唤出git bash，然后git初始化hexo主目录</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">git <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure><p>这样hexo主目录会多一个隐藏目录.git</p><p>创建本地分支，与远端的分支对应</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> checkout -<span class="hljs-keyword">b</span> source<br></code></pre></td></tr></table></figure><p>然后将hexo主目录的所有文件按照.gitignore文件的配置交由git管理（hexo原主目录中的.gitignore配置即可，过滤了node_modules目录、public目录、deploy目录，node_modules目录是hexo使用到的相关node模块，不必上传，否则会出错，后面两个目录会在hexo g -d时发生变化，也不需要上传）</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">git <span class="hljs-keyword">add</span> .<br>git commmit -m <span class="hljs-string">&quot;commit hexo files to remote&quot;</span><br>git <span class="hljs-keyword">push</span><br></code></pre></td></tr></table></figure><p>添加远程仓库</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">git remote <span class="hljs-built_in">add</span> origin <span class="hljs-built_in">URL</span><br></code></pre></td></tr></table></figure><p>将本地当前分支（source）的文件上传到远端仓库的source分支（此命令会自动在远端仓库创建source分支）</p><p>这样就实现了将hexo工程交由git管理，并在远端仓库进行备份的操作</p><p>接下来就是异地恢复</p><p>首先，我们要下载的是hexo原工程目录的文件，而不是发布后的。当前远端仓库有两个分支，主干分支存储着hexo发布后的文件，source分支存储hexo原始工程文件。所以我们需要将远端仓库的默认分支设置为source（master仅用于访问，而source用于下载）</p><p>然后就是克隆source分支的文件</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">URL</span> 本地仓库名（任意起）<br></code></pre></td></tr></table></figure><p>然后进入本地下载下来的仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> 本地仓库名<br></code></pre></td></tr></table></figure><p>这个时候能看到hexo原始工程的大部分文件，但由于上传的时候.gitignore过滤了一些文件没上传，所以需要在本地自行生成那些文件，方式如下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> hexo<br></code></pre></td></tr></table></figure><p>这个命令可以通过node的包管理器在当前目录下载hexo所需要的模块，即会生成一个node_modules目录</p><p>然后生成一些hexo初始配置文件</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">hexo <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure><p>因为当前目录已经包含一些hexo初始文件，所以敲该命令时会提示有些重复文件未生成，没有问题，我们只需要补全那些没有的初始文件，已存在的当然就用从远端下载下来的，比如主配置文件_config.yml</p><p>然后更新npm并下载发布工具</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span><br>npm <span class="hljs-keyword">install</span> hexo-deployer-git<br></code></pre></td></tr></table></figure><p>这样就完成了本地恢复博客所有结构的操作。</p><p>最后，可以创建新的博文，然后更新到远端，然后在本地发布。</p><p>每次使用前只需要拉下最新的文件，在其基础上操作即可。</p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>其他</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown语法学习整理</title>
    <link href="/wilson-blog-hexo/2017/11/17/Markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%95%B4%E7%90%86/"/>
    <url>/wilson-blog-hexo/2017/11/17/Markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>虽说markdown用了一段时间，但还未曾专门地阅读文档对其进行过相对系统的学习。刚才使用分割线时发现分割线下面的文字变成标题般字体，专门查了一波，发现还是有必要系统学习一下md语法，以节省日后使用时的查阅时间。</p><span id="more"></span><h3 id="宗旨"><a href="#宗旨" class="headerlink" title="宗旨"></a>宗旨</h3><p>易读易写</p><p>一份使用markdown格式撰写的文档理应可以直接以纯文本发布，也就意味着markdown的一系列标签语法对于纯文本来说应该是<strong>低浸入</strong>、无感知的，用户阅读不会因为增加了md标签而变得晦涩。</p><p>这点区别于HTML语言至少还需要掌握HTML编程语法，才能理解部分标签的使用规则。</p><h3 id="灵感"><a href="#灵感" class="headerlink" title="灵感"></a>灵感</h3><p>markdown最大灵感源自纯文本电子邮件的格式（可能人们对于纯文本的电子邮件格式觉得太过单调，于是通过添加一些小标记，来增加丰富的格式）</p><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><ul><li>成为一种适用于网络的书写语言</li></ul><blockquote><p>markdown并非要取代HTML，甚至也没有要和它相近。</p></blockquote><blockquote><p>相比HTML，markdown语法种类少，仅对应HTML标记的一小部分</p></blockquote><ul><li>让文档更容易读、写、随意改</li></ul><blockquote><p>易读的前提就是md的标记需要尽量的没有侵入感，比如一篇纯文本文档增加md标记后不会影响原始阅读感受</p></blockquote><blockquote><p>易写易改的要求则是md的语法标记需要同HTML一样“语义化”，能够见标知意</p></blockquote><h3 id="兼容HTML"><a href="#兼容HTML" class="headerlink" title="兼容HTML"></a>兼容HTML</h3><h4 id="区块标签"><a href="#区块标签" class="headerlink" title="区块标签"></a>区块标签</h4><p>一些HTML区块元素比如<code>&lt;div&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;pre&gt;</code>、<code>&lt;p&gt;</code>等，<strong>必须</strong>在其前后加上空行与其他内容隔开，<strong>并且开始标签与结束标签不能用制表符（Tab）或空格来进行缩进</strong>。<br>（下面实例的缩进实现方式是通过HTML的pre标签，使其内部的markdown语法失效）</p><blockquote><p>比如这里的HTML标签如果我想要以标签的样子显示在屏幕上，那我其实需要在文本里通过md标记来编辑，类似使用code标签、转义字符（通过转义字符来“画出”尖括号，code标签可以使其成为块状文本）</p></blockquote><p>另外，markdown生成器不会在HTML区块标签外加上不必要的<code>&lt;p&gt;</code>标签，区别于对于HTML文本进行编辑时，若你写了大段内容而未加任何标签的话，HTML生成器会为你在内容前后加上<code>&lt;p&gt;</code>标签</p><p>实例如下：</p><pre><code class="hljs">段落A&lt;table&gt;        &lt;tr&gt;                &lt;td&gt;Foo&lt;/td&gt;        &lt;/tr&gt;&lt;/table&gt;段落B</code></pre><blockquote><p>注意！在HTML区块标签区间的Markdown语法将不会被处理</p></blockquote><h4 id="区段（行内）标签"><a href="#区段（行内）标签" class="headerlink" title="区段（行内）标签"></a>区段（行内）标签</h4><p>HTML行内标签比如&lt;span&gt;、&lt;cite&gt;、&lt;del&gt;可以在Markdown的段落、列表或是标题内随意使用，比如直接使用&lt;a&gt;标签撰写超链接、使用&lt;img&gt;标签取代md的</p><pre><code class="hljs">![](图片地址)</code></pre><p>（当想要md标签直接显示在屏幕上，而不被markdown生成器处理，可以将其写在HTML区块标签内）</p><p>总结：HTML区块内的md标签不生效，HTML区段内的md标签生效</p><h3 id="特殊字符自动转换"><a href="#特殊字符自动转换" class="headerlink" title="特殊字符自动转换"></a>特殊字符自动转换</h3><p><a href="https://balabala&balabala">balabala</a></p><p>上面这个a标签超链接href中的<a href="https://balabala&balabala会被解析成https//balabala%26balabala/">https://balabala&amp;balabala会被解析成https://balabala%26balabala/</a></p><p>（这一点我看到的时候，瞬间感觉到头皮发麻，因为我之前博客里的参考链接都是使用HTML的a标签，也就意味着如果连接内包含&amp;字符的话，其实应该要改写成<code>&amp;amp;</code>才能被正确的解析）转义还真是门学问-_-||</p><p>如果你下在页面显示出AT&amp;T，其实需要在md文件中写成AT&amp;amp;T，而想要显示AT&amp;amp;T，则要在md中写成AT**&amp;amp;**apm;T，别绕晕，总之需要通过<code>&amp;amp;</code>这个转义符来“渲染”&amp;符，即遇到想要显示<code>&amp;</code>的地方使用<code>&amp;amp;</code>来转义，理清之后会觉得转义很有意思 : ）</p><p>那么究竟markdown对于<code>&amp;</code>的处理方式是如何的呢？答案是：视情况而定</p><ul><li>不做转换</li></ul><blockquote><p>当<code>&amp;</code>是HTML字符实体的一部分时，它会不做干涉</p></blockquote><blockquote><p>比如你在md内写到&amp;copy;</p></blockquote><blockquote><p>会被解析成&copy;</p></blockquote><p>（注意：当想你的md某段内容包含md标签时，请不要在外部套上HTML区块标签，因为那会使md标签失效）</p><ul><li>转换</li></ul><blockquote><p>而如果你在md中写的<code>&amp;</code>不是HTML字符实体的一部分的话，它就会被转换成&amp;amp;</p></blockquote><p>markdown这么做充分体现其兼容HTML的做法</p><p>（当多行引用标记连续使用时，若其中某一行进行缩进，会在引用的基础上增加层次）</p><p>4 &lt; 5</p><p>4 &lt; 5</p><p>在code范围内，不论是行内还是区块，&lt;和&amp;两个符号都<strong>一定</strong>会被转换成HTML实体，这项特性可以使你轻易地使用md写HTML code，相比在HTML文档中需要把所有的&lt;和&amp;转换为HTML实体才能在HTML文件内写HTML code</p><p>上面这段话的意思就是在html文件里，遇到&amp;或是&lt;，需要以&amp;amp;或是&amp;lt;这样的HTML实体来表示之后，才能正常地编写html code，但是在markdown里不需要这一步，</p><p><code>&lt;span&gt;&lt;code&gt;4 &amp;&lt;/code&gt;&lt;/span&gt;</code></p><p><code>&lt;code&gt;4 &lt; 5&lt;/code&gt;</code></p><p><code>&lt;code&gt;&lt;code&gt;</code></p><p>参考链接：</p><ul><li><a href="http://www.appinn.com/markdown/">http://www.appinn.com/markdown/</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>其他</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git学习总结</title>
    <link href="/wilson-blog-hexo/2017/11/17/git%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/wilson-blog-hexo/2017/11/17/git%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>对于Git学习的一些整理，包含常用命令整理</p><span id="more"></span><p>个人觉得，对于一些开源工具，最好的学习资源还是其官网，我们就先来分析一波Git究竟是做什么的。</p><h3 id="概念解析"><a href="#概念解析" class="headerlink" title="概念解析"></a>概念解析</h3><p>git官网的定义是：Git是一种免费并且开源的分布式版本控制系统，被设计用来快速高效地处理堆积成大工程的每一块小部分。（个人翻译，不喜勿喷）</p><p>Git简单易用、占用空间小并且性能优越。它远超过一些伴有类似廉价的本地分支、方便的阶段区域和多工作流特点的配置管理工具（SCM，Software Configuration Management），比如SVN、CVS、Perforce和ClearCase这些。</p><p>Git允许同一组下的人们同一时刻在相同的文档上工作（通常是代码），并且不会踩到其他人的脚趾（形容两个人同时在相同的文档上工作也不会发生冲突）</p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li><p>小而快速（Small and Fast）</p></li><li><p>分布式（Distributed,这也是它比SVN优势明显的地方）</p></li><li><p>数据保证（Data Assurance）</p></li><li><p>分阶段区域（Staging Area）</p></li><li><p>免费并开源（Free and Open Source）</p></li></ul><h3 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h3><p>初级教程：<a href="https://try.github.io/levels/1/challenges/1">Try Git</a></p><p>高级教程：<a href="http://gitreal.codeschool.com/levels/1/challenges/1">gitreal</a></p><p>官方书籍：<a href="https://git-scm.com/book/zh/v2">Pro Git</a></p><h3 id="使用步骤（包含常见命令）"><a href="#使用步骤（包含常见命令）" class="headerlink" title="使用步骤（包含常见命令）"></a>使用步骤（包含常见命令）</h3><p>1.初始化</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">git <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure><p>init命令会创建一系列git结构的文件</p><p>仅对一个制定目录创建git结构时使用，用于将某个目录交给git管理</p><p>2.查看git状态</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git status</span><br></code></pre></td></tr></table></figure><p>可在任何时间阶段使用， 以查看当前git管理下的文件状态</p><p>3.将文件交予git管理</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git <span class="hljs-built_in">add</span> filename<br></code></pre></td></tr></table></figure><p>对于在git init后的目录里的每一个文件都有tracked和untracked两种状态，也就是<strong>是否被git追溯（管理）</strong></p><p>对于每一个文件，要么通过git add交由git管理，要么加入ignore行列，不然新创建的文件就会处于不受git管理的“游离”状态。</p><p>当对于新创建的文件操作git add之后，文件就会处于Staging Area（阶段区域），在commit之前还尚未放进git的仓库（repository），所以在文件到仓库之前，我们可以将文件添加（add）进或是移出Staging Area（暂存区）</p><p>当然我们也可以对文件进行批量添加到暂存区，比如git add ‘*.txt’来将所有后缀为txt的文件添加进暂存区（注意引号）</p><p>4.将暂存区的文件提交到仓库</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> commit -m <span class="hljs-string">&quot;提交注释&quot;</span><br></code></pre></td></tr></table></figure><p>5.查看提交历史</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">git <span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>6.将本地仓库与远端仓库建立关联<br>为了将本地仓库推到远端Github服务器中（Push local Repo to Github Server），我们需要添加一个远端仓库（add a remote repository）</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">git remote <span class="hljs-built_in">add</span> origin `Remote Repository <span class="hljs-built_in">URL</span>`<br></code></pre></td></tr></table></figure><p>这条命令初学者看起来晦涩难懂，我也是研究了很多遍才大致理解，首先这与普通的git add不同的是，git add是将本地新建的文件添加到git的暂存区，而git remote add是表示添加一个远端仓库，与本地的仓库建立关联。</p><p>默认取名origin，直观易懂，后面的URL也就是远端仓库的地址，虽然在远端（Github）创建仓库的时候我们创建了名字，但现在毕竟本地还没有那个仓库，所以相当于先在本地创建一个空名字，以备和远端的实体仓库对应。</p><blockquote><p>当你使用git remote命令时，可以看到你add的“虚拟”远端仓库，它们的地址就是你add时最后的URL</p></blockquote><p>7.将本地仓库内容推到远端</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span> -u <span class="hljs-built_in">origin</span> master<br></code></pre></td></tr></table></figure><p>我们表示远端仓库的代号是origin，默认的本地分支名是master，-u是告诉git去记住这两个参数（origin master），这样下次提交就可以简化为git push</p><hr><p>经过上面的7个步骤，我们就完成了在本地创建git仓库，并创建文件交由git管理，并将本地仓库与远端仓库进行关联，再将本地仓库的文件上推到远端仓库</p><hr><p>接下来是关于远端发生变更，本地来查看（比如其他人fork了你的仓库，并且commit了内容，并pull request）</p><p>8.将远端仓库的最新文件拉到本地</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git pull origin <span class="hljs-literal">master</span><br></code></pre></td></tr></table></figure><p>看懂git push origin master再来看这条命令就好理解一些，git pull是拉（下载）代码，也就是从远端往本地拉，然而其实本地的origin其实就是一个关联了远端仓库的钩子，你从origin拉代码就是从远端仓库拉代码，而拉下来的代码要放在哪个分支，这里选择了master主干分支</p><p>9.对比拉下来的远端仓库最新代码和本地的区别</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git diff HEAD</span><br></code></pre></td></tr></table></figure><p>HEAD是一个指针，指向我们最新commit的地方，不加HEAD，默认也是与HEAD对比</p><h4 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h4><p>10.使用diff命令对比暂存区文件之间的区别</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">git diff <span class="hljs-comment">--staged</span><br></code></pre></td></tr></table></figure><p>前面提到过git add命令是将文件添加入暂存区，即add to stage</p><p>11.回撤add行为</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git reset</span><br></code></pre></td></tr></table></figure><p>我们可以通过git add将文件交由git管理，同样也可以通过git reset将文件脱离git管理，即移出暂存区（unstage file）。<br>当执行完git reset somefile后，somefile会脱离git管理，但文件依旧会在那里。</p><p>12.Undo</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">git checkout</span> <span class="hljs-literal">--</span> <span class="hljs-comment">somefile（注意破折号与文件名之间有一个空格，否则会提示“未定义的选项‘</span><span class="hljs-literal">--</span><span class="hljs-comment">文件名’”）</span><br></code></pre></td></tr></table></figure><p>可以通过git checkout命令将文件恢复成它们上一次提交前的样子</p><p>13.创建分支（branch out）</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git branch branchname</span><br></code></pre></td></tr></table></figure><p>当需要在主分支之外开发新功能或者修改bug，需要拉另外的分支以与主分支分离，来进行提交，当工作完成后可以再将其分支合并回主分支（merge back to master）<br>当直接输入git branch命令是查看当前分支情况，当git branch后面加任意名字即为创建新的分支</p><p>14.切换分支</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git checkout branchname</span><br></code></pre></td></tr></table></figure><p>15.清除文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">rm</span> filename<br></code></pre></td></tr></table></figure><p>git rm命令不仅会删除你本地的实体文件，还会同时将这些删除行为追溯到git（stage these removal）<br>删除时同样可以使用通配符（wildcard）来一次清扫多个文件，例如git rm ‘*.txt’<br>当然这些删除行为也需要通过commit来通知仓库，尽管是删除文件，但对于git来说都是新增一次操作<br>此时在新建的分支，将所有的文件删除并提交，仅是对本分支的操作，当切换到主分支时，主分支依然是原样（分支相当于对主分支的拷贝，然而实际实现并不是通过拷贝实现）</p><p>16.合并分支</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos">git <span class="hljs-keyword">merge</span> branchname<br></code></pre></td></tr></table></figure><p>git merge是将输入的分支合并到当前分支，一般是切回到主分支，执行合并命令，来将其他某一个分支合并到主分支</p><p>17.删除分支</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git branch -d branchname</span><br></code></pre></td></tr></table></figure><p>当分支合并回主分支后，就没用了，可以进行删除</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>1.先在本地通过git创建工程，然后上传到远程新建的空仓库(Github)</p><p>2.在远端仓库（Github）创建文件或工程，克隆到本地，进行修改后再提交到远端仓库</p><p>3.fork其他人的仓库，若符合工程结构，则下载到本地可直接运行，修改，提交</p><p>参考链接：</p><ul><li><a href="https://git-scm.com/">git官网</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于centos的iptables以及firewalld的总结</title>
    <link href="/wilson-blog-hexo/2017/11/16/%E5%85%B3%E4%BA%8Ecentos%E7%9A%84iptables%E4%BB%A5%E5%8F%8Afirewalld%E7%9A%84%E6%80%BB%E7%BB%93/"/>
    <url>/wilson-blog-hexo/2017/11/16/%E5%85%B3%E4%BA%8Ecentos%E7%9A%84iptables%E4%BB%A5%E5%8F%8Afirewalld%E7%9A%84%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>centos内置一个非常强劲的防火墙，统称为iptables，实际原理是iptables是用户空间的模块，在内核中存在一个netfilter核心模块用于实现iptables中设置的规则，进行底层的实际过滤。</p><span id="more"></span><h3 id="iptables"><a href="#iptables" class="headerlink" title="iptables"></a>iptables</h3><h4 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h4><ul><li><p>IP地址</p></li><li><p>协议（TCP、UDP、ICMP）</p></li><li><p>端口</p></li></ul><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>iptables将规则放入缺省规则链（INPUT、FORWARD、OUTPUT），所有流量（IP封包）会被相关的规则链检查，根据规则处理每个封包（ACCEPT&#x2F;REJECT），这些动作称为目标（target）,实例如下图：</p><p><img src="http://trigolds.com/iptables0.png"></p><p>INPUT：以主机为目的地的封包<br>FORWARD：封包的目的地和来源地都不是主机，途经主机（由其选路），比如主机是路由器，这条规则链将被应用<br>OUTPUT：源自主机的封包</p><p>每个封包会逐一匹配每条规则，若符合某一条规则，响应动作将被执行（ACCEPT&#x2F;REJECT），一旦吻合一条规则，则不再被其他规则检查。若所有规则都不匹配，将会执行这条规则链的缺省动作（即括号内的缺省策略）</p><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><p>白名单方式：即规则链缺省规则设为REJECT，仅对符合某些条件的封包进行放行，例如：bittorrent、FTP服务器、网页服务器、Samba文件服务器</p><p>黑名单方式：规则链缺省策略设置为ACCEPT，对需要拦截的封包做拦截REJECT</p><p>一般白名单用于INPUT规则链，用于控制目的地为主机的封包，黑名单用于OUTPUT规则链，用于控制由主机流出的封包</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>iptables需要root用户操作</p><p>iptables是缺省安装在centos5.x及6.x上，而centos7.x使用firewalld取代之</p><p>先使用rpm -q iptables查看iptables是否安装在系统上</p><p>lsmod | grep ip_table检查iptables模块是否被装入，例如下图场景，iptables安装在系统上，但模块并未被装入</p><p><img src="http://trigolds.com/iptables1.png"></p><p>当iptables模块被装入后可通过iptables -L查看活动规则</p><p><img src="http://trigolds.com/iptables0.png"></p><p>更多使用策略参考链接：</p><ul><li><a href="https://wiki.centos.org/zh/HowTos/Network/IPTables">https://wiki.centos.org/zh/HowTos/Network/IPTables</a></li></ul><h3 id="firewalld"><a href="#firewalld" class="headerlink" title="firewalld"></a>firewalld</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>firewalld是centos7预装的动态防火墙<strong>后台</strong>程序，用以支持网络“zones”，以分配对一个网络及其相关链接和界面的一定程度的信任。</p><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><ul><li><p>具备对IPV4和IPV6防火墙设置的支持</p></li><li><p>支持以太网桥</p></li><li><p>有运行时（runtime）和永久性（permanent）两种配置方式</p></li><li><p>具备一个通向服务或者应用程序的接口，以直接增加防火墙规则</p></li><li><p>动态生效，不需要保存或执行配置改变，会随时执行</p></li></ul><h4 id="对比firewalld和iptables"><a href="#对比firewalld和iptables" class="headerlink" title="对比firewalld和iptables"></a>对比firewalld和iptables</h4><ul><li>配置存储</li></ul><p>iptables service存储在&#x2F;etc&#x2F;sysconfig&#x2F;iptables</p><p>firewalld配置存储在&#x2F;usr&#x2F;lib&#x2F;firewalld和&#x2F;etc&#x2F;firewalld&#x2F;中的各种XML文件中</p><blockquote><p>注意！当firewalld在RHEL(Red Hat Enterprise Linux)上安装失败时，&#x2F;etc&#x2F;sysconfig&#x2F;iptables文件将不存在</p></blockquote><ul><li>规则修改</li></ul><p>iptables service每一个单独修改意味着清除所有原有规则，重新从&#x2F;etc&#x2F;sysconfig&#x2F;iptables中中读取规则</p><p>firewalld不会创建新的规则，仅运行规则中的不同之处（因为可以在运行时修改而不丢失现有连接）</p><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><p>上图可看出对于iptables防火墙centos有两种实现方式，即iptables service(service)或firewalld(daemon&amp;service)</p><p>实际场景分别如下：</p><p>centos5.x或centos6.x默认使用iptables-services</p><p>centos7默认使用firewalld</p><blockquote><p>Tip：若安装了systemctl，使用”service 服务名 status”查看服务状态会被重定向为”systemctl status 服务名”</p></blockquote><h4 id="将firewalld切换至iptables-service"><a href="#将firewalld切换至iptables-service" class="headerlink" title="将firewalld切换至iptables.service"></a>将firewalld切换至iptables.service</h4><p>1.以root身份，先禁用并停止firewalld服务</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl disabled firewalld<br><span class="hljs-params">system</span>ctl stop firewalld<br></code></pre></td></tr></table></figure><p>2.查看iptables是否安装在系统上，若不存在则安装iptables-services程序包</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">rpm -q iptables<br>yum <span class="hljs-keyword">install</span> iptables-services<br></code></pre></td></tr></table></figure><p>iptables-services包含iptables和ip6tables服务</p><p>3.启动服务</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs smali">systemctl start iptables<span class="hljs-keyword"></span><br><span class="hljs-keyword">system</span>ctl start ip6tables<span class="hljs-keyword"></span><br><span class="hljs-keyword">system</span>ctl enable iptables<span class="hljs-keyword"></span><br><span class="hljs-keyword">system</span>ctl enable ip6tables<br></code></pre></td></tr></table></figure><h4 id="使用firewalld取代iptables-service"><a href="#使用firewalld取代iptables-service" class="headerlink" title="使用firewalld取代iptables.service"></a>使用firewalld取代iptables.service</h4><p>1.查看firewalld服务运行情况</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">systemctl <span class="hljs-built_in">status</span> firewalld<br>firewall-cmd <span class="hljs-comment">--state</span><br></code></pre></td></tr></table></figure><p>2.安装firewalld（可选：图形化用户接口工具firewall-config）</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">yum <span class="hljs-keyword">install </span>firewalld<br>yum <span class="hljs-keyword">install </span>firewall-<span class="hljs-built_in">config</span><br></code></pre></td></tr></table></figure><p>3.配置防火墙三种方式</p><ul><li><p>命令行接口工具firewall-cmd</p></li><li><p>图形化接口工具firewall-config</p></li><li><p>编辑相应XML文件</p></li></ul><blockquote><p>注意：在Runtime模式下更改防火墙设置会立即生效，应注意本系统上的其他用户使用情况；Permanent模式下更改设置，仅在重新加载防火墙或重启系统后生效</p></blockquote><p>重启防火墙命令</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">firewall-cmd <span class="hljs-comment">--reload</span><br></code></pre></td></tr></table></figure><p>参考链接：</p><ul><li><p><a href="https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/7/html/security_guide/sec-using_firewalls">https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux&#x2F;7&#x2F;html&#x2F;security_guide&#x2F;sec-using_firewalls</a></p></li><li><p><a href="http://havee.me/linux/2015-01/using-firewalls-on-centos-7.html">http://havee.me/linux/2015-01/using-firewalls-on-centos-7.html</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于StackExchange和Quora的区别</title>
    <link href="/wilson-blog-hexo/2017/11/14/%E5%85%B3%E4%BA%8EStackExchange%E5%92%8CQuora%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/wilson-blog-hexo/2017/11/14/%E5%85%B3%E4%BA%8EStackExchange%E5%92%8CQuora%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>今天在查问题的时候偶然进了一篇StackExchange的帖子，无论是站点名字还是首页界面，第一反应都是：StackOverFlow？</p><p>查阅相关说明之后了解了二者的关系，StackExchange是在StackOverFlow成功推出以后，在其基础上将仅仅讨论编程问题的网站拓展成话题更丰富的论坛。</p><span id="more"></span><p>当更加深入了解二者关系之余发现一篇关于对比StackExchange和Quora二者区别的帖子写得很清楚，特将其翻译如下：</p><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>简短版本：<br>StackExchange是你的助教<br>Quora是你的酒保</p><p>Quora是你认识的那个足迹遍布很多角落，品尝过城市每一家餐厅的人<br>StackExchange是一个受过专业训练的专业帮助者</p><p>StackExchange是一个指导手册（详细，包含有用的例子）<br>Quora是一个著名的在其演讲后回答问题的知识分子</p><p>详细版本：<br>想真正理解这二者，你需要从the lens of purpose（目标透镜）看这个问题，从那里你能了解到一个专门的推送（see pull request at github?），它会从本质上讲清楚二者的区别。你会知道以下绝非偶然——Quora不想成为StackExchange，StackExchange也不想成为Quora，并且它们按照各自的方式建设以促进它们各自的目的。</p><p>正如Manish所述，Quora是关于“消费”,但它也关乎好奇。也就是，我在阅读问题的时候更多的是被动的，大多时候我可能会在Quora的邮件中看到一个有趣的问题之后发现自己想要的。我会阅读问题的答案（或者不止几个），然后查看站点上推荐给我的相关问题，同时我也会阅读它们。这些问题中很少数曾“逼迫”我去寻找一个答案，但我就是充满好奇并且想要了解更多。</p><p>StackExchange不同于其他在于其基于目的或者基于问题。我来到StackExchange大多情况是通过搜索引擎，因为我在处理某些事情上遇到问题并且需要答案。它绝大多数时候当然充当了一个技术支持，经常可以处理……(未完待续)</p><h3 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h3><p>通篇下来个人觉得充满了蹩脚的翻译，这篇文章看起来大体可以理解作者的意思，但落实翻译对于我而言是不小的挑战。</p><h3 id="个人比拟"><a href="#个人比拟" class="headerlink" title="个人比拟"></a>个人比拟</h3><table><thead><tr><th align="left">国外网站</th><th align="left">对应</th><th align="left">国内网站</th></tr></thead><tbody><tr><td align="left">StackExchange</td><td align="left">&lt;—&gt;</td><td align="left">暂无</td></tr><tr><td align="left">Quora</td><td align="left">&lt;—&gt;</td><td align="left">知乎</td></tr><tr><td align="left">StackOverFlow</td><td align="left">&lt;—&gt;</td><td align="left">SegamentFault</td></tr></tbody></table><h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><ul><li><p><a href="https://www.quora.com/What-is-the-difference-between-Quora-and-Stack-Exchange/answer/Harry-Simperingham">原文链接</a></p></li><li><p><a href="">StackExchange官网</a></p></li><li><p><a href="">StackOverFlow官网</a></p></li><li><p><a href="">Quora官网</a></p></li><li><p><a href="">SegamentFault官网</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>其他</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于负载均衡的理解小结</title>
    <link href="/wilson-blog-hexo/2017/11/09/%E5%85%B3%E4%BA%8E%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%9A%84%E7%90%86%E8%A7%A3%E5%B0%8F%E7%BB%93/"/>
    <url>/wilson-blog-hexo/2017/11/09/%E5%85%B3%E4%BA%8E%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%9A%84%E7%90%86%E8%A7%A3%E5%B0%8F%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>均衡，存乎万物之间</p><p>负载均衡（Load Balance）是指将请求<strong>均匀</strong>分摊到多个操作单元上执行，关键在于<strong>均匀</strong></p><p>本来在学习过<strong>反向代理</strong>这个概念以后以为负载均衡就是反向代理在服务端将来自客户端短时大量的访问请求做分发，将其分配到多台提供相同服务的服务器上。<br>看了负载均衡以后发现其实<strong>负载均衡</strong>是一个很宏观的概念，上述的理解存在一定偏差。</p><p>负载均衡旨在将特定的业务分担给多个服务器或网络设备，从而提高业务处理能力，保证业务的高可用性。</p><span id="more"></span><p>（负载均衡用于缓解极大量的访问请求，所以下面的场景都基于同时来自客户端大量的访问请求）</p><p>首先，我上面的理解在实际的负载均衡中其实表述的是【DNS层】（客户端-&gt;反向代理层）的负载均衡，这一层的负载均衡由DNS服务器实现。</p><p>具体也就是当用户通过网站域名访问服务时，为了<strong>负载均衡</strong>，同一域名会配置多个解析IP，每当DNS解析请求来访问DNS服务器时，它会轮询这些IP，并保证每个IP的解析概率相同（均匀），这些IP就是nginx的外网IP。</p><p>然后拿到某台nginx的IP也就结束了第一层的负载均衡</p><p>接下来，来到【反向代理层—&gt;站点层】，这一层的负载均衡通过nginx的配置实现，策略有很多种：比如轮询、IP哈希、URL哈希、权重等</p><ol><li><p>请求轮询：类似DNS轮询，请求依次被路由到每一个web服务器</p></li><li><p>最少连接路由：将请求路由到连接数最少的web服务器</p></li><li><p>IP哈希：通过客户端IP的哈希值来路由到某一个web服务器（只要用户IP分布均匀，理论上路由的路径就是均匀的），这样同一个用户的请求会固定路由到固定的某一台web服务器上，该策略适合有状态服务，比如session（但不建议这么做，因为站点层无状态是分布式架构设计的基本原则之一，session最好放在数据层存储）</p></li></ol><p>然后是【站点层-&gt;服务层】的负载均衡，该层通过服务连接池实现</p><p>上游连接池与下游服务建立多个连接，每次请求会“随机”选取连接访问下游服务</p><p>最后是【数据层】负载均衡</p><p>当数据量十分庞大的时候，数据层（db，cache）可能会进行数据的水平切分，于是该层的负载均衡包含“数据均衡”和“请求均衡”两部分</p><p>数据均衡指：水平切分后的每个服务（db，cache），彼此之间<strong>数据量</strong>均匀</p><p>请求均衡指：水平切分后的每个服务（db，cache），彼此之间<strong>请求量</strong>均匀</p><p>常见水平切分法如下：</p><ol><li>按照数据范围切分：每个数据服务存储一定范围内的数据</li></ol><p>DataServiceA：存储uid为[1-1kw)内的数据<br>DataServiceB：存储uid为[1kw-2kw)内的数据</p><p>优点：</p><ul><li><p>规则简单，来自服务层的访问仅根据uid范围即可路由到对应的存储服务</p></li><li><p>数据均衡性良好（除最后一份，其他均为等分）</p></li><li><p>易拓展，可随时添加uid为2kw以后的数据服务</p></li></ul><p>缺点：</p><ul><li>请求均衡不一定到位，例如新注册的用户会比老用户更活跃，即uid数值大的服务请求压力更大</li></ul><ol start="2"><li>按照ID的哈希值切分：每个数据服务存储uid哈希后的<strong>部分数据</strong></li></ol><p>DataServiceA：存储uid哈希后的部分数据<br>DataServiceB：存储uid哈希后的另一部分数据</p><p>优点：</p><ul><li><p>规则简单，来自服务层的访问仅根据uid进行哈希计算即可路由到对应的存储服务</p></li><li><p>数据均衡性良好</p></li><li><p>请求均衡性良好</p></li></ul><p>缺点：</p><ul><li>不易拓展，拓展一个数据服务时，哈希方法改变，可能需要进行数据迁移</li></ul><p>总结：</p><p>各层负载均衡实现方式</p><p>【客户端-&gt;反向代理】：DNS轮询</p><p>【反向代理-&gt;Web站点】：nginx</p><p>【Web站点-&gt;服务】：服务连接池</p><p>【服务-&gt;数据】：数据均衡+请求均衡</p><p>参考链接：<a href="http://developer.51cto.com/art/201609/517313.htm">一分钟了解负载均衡</a></p>]]></content>
    
    
    <categories>
      
      <category>架构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>其他</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于职业规划</title>
    <link href="/wilson-blog-hexo/2017/11/09/%E5%85%B3%E4%BA%8E%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92/"/>
    <url>/wilson-blog-hexo/2017/11/09/%E5%85%B3%E4%BA%8E%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92/</url>
    
    <content type="html"><![CDATA[<p>最近几天开发任务不甚紧张，每天可能一部分是在读博客或者写博客。在此过程中，突然想给自己炖一锅鸡汤醒醒脑。</p><p>作为一个软件工程毕业的人，或许更宏观的讲，作为一个计算机专业毕业的人，该怎么规划自己的职业生涯呢？</p><span id="more"></span><p>（这里不讨论想转行的同学们，我很幸运当初坚持了自己的选择和判断，由于兴趣，入行了计算机，如今应该称呼为“互联网”领域）</p><p>过程在我看来是先易后难的</p><h3 id="第一阶段"><a href="#第一阶段" class="headerlink" title="第一阶段"></a>第一阶段</h3><p>刚毕业的两三年，甚至五年，可能都是知识储备期，也就是技术积淀期。当然，打牢基础并不意味着沉迷基础，走走停停，及时看清楚技术风向标，是避免徒劳无功的基本意识。</p><p>在打牢基础的这几年应该做什么？或者说应该培养哪些能力</p><p>专业基础自然不用说，那是最基本的敲门砖，可能在学生时代，每个人的专业能力还都参差不齐，但步入职场后，对于每个从事技术工作的人，在技术基础方面的要求都是“一视同仁”的，也就是对于从事各个不同技术方向的人，你的技术栈都应该是完整的。为什么说这些是最基本的呢，因为这些东西大多是“死”的，也就是不管量有多少，甚至还在不断增加，但它的本质几乎不会发生质的变化，所以关乎技术的东西，你可以从学校、书籍或者人那里都可以习得，而后面要讲的第二阶段的技能可能不是单纯靠“学习”便可拥有的。</p><p>那么能力方面应该涉及哪些呢？个人总结如下（其实在不管大型还是初创的各个互联网公司招聘中也能经常看到这些字眼）：</p><ul><li>学习能力：首屈一指必然是学习的能力，因为这一点决定你“可拓展性”有多强，这里的学习能力指的是活学活用以及持续学习的能力。假如你是以初高中某些死记硬背或者应试手段的学习方法，我不敢保证那样的收益如何，因为我不曾有过以那样的方式的学习经历。另外就是<strong>持续学习</strong>的概念，这种需求其实是由时代滋生的，因为如今的时代决定了你很难（我没有说“不可能”的字眼）以固定的知识量驾驭你的整个职业生涯。</li></ul><p>综合上面两种学习的能力其实也就自然带来你上手新事物的能力，比如公司派你去负责完成一项新的任务，使用的是一项你从未接触过的技术，那么此时如果你是拥有<strong>学习的能力</strong>，而不是仅仅拥有<strong>定量的知识</strong>，那么任何新事物你自然都能搞定。</p><ul><li><p>理解能力：这是一个输入+分析的过程（Input &amp; Process），理工一点的说法类似计算机的核心（CPU）处理任务方式。理解能力决定你在学习一项新事物时的效率，比如如果你对一个事物在最初认识的时候发生了偏差，那可能你用的劲越多，就越偏离理解它的正规。另外逻辑思维也在此体现出重要的作用，可能单纯的理性思维并不能帮助你快速地认识到新事物的本质，有时候可能还需要一些感性思维，Maybe想象力.etc</p></li><li><p>沟通能力：这是一个输出的过程（Output &amp; Translate），有时候单纯一味地输入未必可以发挥你所掌握知识的最大价值，技术需要分享，而交流就是一个有效媒介。但是有时候知识的传递在一些糟糕的表达后会变得晦涩难懂，所以良好的表达能力才会成为知识传播的有效大使。另外，有效的沟通势必带来1+1&gt;2的收益，这样既节省时间又提高效率的多赢结果是大家都希望看到的。</p></li></ul><h3 id="第二阶段"><a href="#第二阶段" class="headerlink" title="第二阶段"></a>第二阶段</h3><p>这些技能大多基于经验主义，并且没有标准答案</p><ul><li><p>判断力：“错与对”、“进与退”、“黑与白”（太极思想，黑中有白，白中有黑）的判断是永恒的难题（突然想到明天即将上映“马爸爸”的《攻守道》）</p></li><li><p>趋势&#x2F;形势判断：趋势的判断往往决定你路程的远近，这东西可大可小，小在一笔小额的投资，大在一个集团的定位，如果仅有埋头苦干的踏实，而没有远瞻未来的判断，想必很难成为一位成功的管理者。而形势的判断其实就是一句“识时务者为俊杰”，何时放手一搏，主动出击，何时及时止损，这里的学问也是需要经验的不断积累来沉淀所得。</p></li><li><p>决策能力：如果你进行统计，其实我们每一天的所有行为串起来就是一颗巨大的决策树，每一个分支的两种选择都会带来不同的结果，而如此累积，将会因为每一步的不同而带来巨大差异的结果，这也就是所谓<code>世界上没有两片相同的叶子</code>，两个人尽管处于相同的环境，接收相同的知识，完成相同的任务，也会在日积月累的微小差异中变成两个独一无二的个体。</p></li></ul><p>能否做出正确的决策，能否果断地做出决策，能否预知不同决策带来的结果，能否对结果负责，这一点其实在AlphaGo与人类围棋对决中就已经证明了计算机在决策方面已经掌握非常强大的能力，人类如果不增强自己的优势，可能等待你的只是“智能危机”。</p><p>前面三项能力或多或少都和<strong>选择</strong>有关，这也是为什么讲“有时候，选择比努力更重要”</p><ul><li><p>是否注重细节：每个领域都会有大量的同类竞争，能够另辟蹊径的毕竟是少数，那么如何在“大家都差不多的”的情况下脱颖而出，<strong>细节</strong>方面至关重要</p></li><li><p>能否抵抗诱惑：新手大多急于求成，急功近利，而老手则懂得放长线钓大鱼</p></li></ul><p>这些能力没有人能教的了你，同时也是决定你能否成为一个拥有独立完整人格的个体。</p><h3 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h3><p>未来毕竟还是很难预知的，所以我也不想给自己太远的未来做太过具体的规划，每个人都有自己的想法和规划，我的观点不一定适用别人，所以本篇博文也仅仅是一篇与自己灵魂的对话，仅此而已。</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用hexo搭建个人博客教程</title>
    <link href="/wilson-blog-hexo/2017/11/08/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/"/>
    <url>/wilson-blog-hexo/2017/11/08/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>用了一段时间的hexo，本着“授人以鱼，不如授人以渔”的理念，决定整理一篇hexo使用教程，分享大家。</p><p>hexo是一种快速、简单并且强大的博客框架，你可以通过使用markdown或者其他语言撰写post（帖子），然后hexo引擎将其生成静态网页文件（当然，官网的说法是“在数秒内生成伴有漂亮主题的静态文件”）并以博文的形式显现出来。</p><span id="more"></span><h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>本文定位于面向非专业人士角度撰写的科普式教程，有专业基础的人可跳过大多步骤，仅阅读标*部分</p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>应@JXY邀，要我教他搭建个人博客，于是也就找了一个足够的理由来回顾一波如何使用hexo搭建个人博客。</p><p>既然给别人讲东西，那自然要先对讲的东西深入了解，不然就是误人子弟了。于是打开<a href="https://hexo.io">hexo官网</a>，发现！竟然！被！墙！了！好吧，后来发现是9点多被墙了一段时间（貌似是hexo使用的CDN服务Cloudflare被block了），介于避免日后再想参考官网文档时无法及时访问，索性这次就把官网的一些精华翻译下来，留作日后参考。</p><h3 id="核心步骤"><a href="#核心步骤" class="headerlink" title="*核心步骤"></a>*核心步骤</h3><p>先看官方给出的安装步骤</p><h3 id="准备篇"><a href="#准备篇" class="headerlink" title="准备篇"></a>准备篇</h3><p>首先你要做好准备掌握以下几项东西：</p><ul><li>git</li><li>nodejs</li><li>bash命令</li></ul><p>好吧，这样讲未免显得门槛略高，其实hexo是一种非常零门槛的工具，只要你想学，任何没有专业知识的人都能用起来，只要照着做就可以了</p><h3 id="环境搭建篇"><a href="#环境搭建篇" class="headerlink" title="环境搭建篇"></a>环境搭建篇</h3><h4 id="第一步：在电脑安装git（如果下载不了-可以通过我的网盘下载git）"><a href="#第一步：在电脑安装git（如果下载不了-可以通过我的网盘下载git）" class="headerlink" title="第一步：在电脑安装git（如果下载不了,可以通过我的网盘下载git）"></a>第一步：在电脑安装<a href="https://git-scm.com/download/win">git</a>（如果下载不了,可以通过我的网盘下载<a href="http://pan.baidu.com/s/1bpJapbx">git</a>）</h4><p>git是一个伟大的版本控制软件，它的作用在于作为一个代码提交工具，将你编写的每一行代码（或文字）存放到一个代码仓库，它在其中起到记录你每一次提交历史的作用，这样你就可以对自己的每一次提交历史有直观的查看，并且可以对比不同版本之间的区别，还可以回退到某一个提交历史节点，还有balabala很多好处。</p><h4 id="第二步：安装nodejs"><a href="#第二步：安装nodejs" class="headerlink" title="第二步：安装nodejs"></a>第二步：安装nodejs</h4><p>当你安装好了git以后，可以鼠标右键唤出git</p><h5 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h5><p>然后你就可以很方便的安装nodejs了，通过如下命令先安装nvm（此方式适用于专业人士，非专业人士请参考后面下载安装包的方式二）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl -o- https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/creationix/</span>nvm<span class="hljs-regexp">/v0.33.2/i</span>nstall.sh | bash<br></code></pre></td></tr></table></figure><p>nvm是nodejs version manager，nodejs版本管理器，用以在机器上安装并维护多个node的版本</p><p>如果执行失败（看到很多error）,也可以通过我网盘的安装包进行<a href="http://pan.baidu.com/s/1c2KunAC">下载</a></p><p>当安装完成后，通过cmd窗口键入nvm</p><h5 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h5><p>如果你想在电脑尚未安装git的情况下安装nodejs，或者安装nvm失败，你也可以通过传统的方式安装nodejs，如下：</p><p>访问<a href="https://nodejs.org/en/">nodejs官网</a>下载，或者通过我的网盘<a href="http://pan.baidu.com/s/1kV5SIR9">下载</a>安装包，安装方式如同安装其他软件一样</p><p>安装成功后打开cmd窗口，键入node –version</p><p>nodejs是一个基于谷歌的<strong>V8</strong> Javascript引擎的Javascript运行环境。它利用一个事件驱动的、非阻塞I&#x2F;O的模型使得其轻量并且高效。另外，nodejs的包生态系统<a href="https://www.npmjs.com/">npm</a>是世界上最大的开源库生态系统。</p><p>（包生态系统通俗来讲就是，一个会编程的你，某天写了一段代码，觉得其功能可被大家重复使用，并且很好用，于是你就把这段代码打了个包丢到网上，于是大家就都可以通过下载你这个包来使用这个功能了）</p><blockquote><p>V8是谷歌的一个开源高性能Javascript引擎，使用C++编写，并应用于Google Chrome浏览器（来自谷歌的开源浏览器）、Node.js等等。它按照ECMA-262标准实现了ECMAScript，并可运行在windows7及更高版本、macOS10.5及更高版本和使用IA-32、ARM或者MIPS处理器的linux系统。V8可以单独运行，或者被嵌入任何C++程序。（以上内容由本人翻译自<a href="https://developers.google.com/v8/">V8官网首页</a>，如有不准确之处请指正）</p></blockquote><p>p.s. 关于nodejs和Javascript的关联，个人理解就是Javascript本来是运行在客户端（浏览器）的脚本语言，如果想要Javascript脚本在服务器端运行怎么办呢，此时就有了nodejs，由于V8引擎的存在，使得通过Nodejs可以在服务器端模拟出客户端的环境，从而来运行Javascript脚本</p><h3 id="安装篇"><a href="#安装篇" class="headerlink" title="安装篇"></a>安装篇</h3><p>在你的电脑有了git和nodejs以后，就可以正式安装hexo了</p><p>接下来你只需要在任何一个地方（比如桌面）右键鼠标唤出git bash</p><p>然后粘贴这段命令</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm install -g hexo-<span class="hljs-keyword">cli</span><br><br></code></pre></td></tr></table></figure><blockquote><p>解释：这就是通过你刚才安装的nodejs里自带的包管理器npm安装了一个叫做hexo-cli的包（在npm里管这叫模块module）</p></blockquote><blockquote><p>npm意思是使用npm执行命令</p></blockquote><blockquote><p>install意思是要通过npm进行安装模块行为</p></blockquote><blockquote><p>-g是对于install动作添加的参数，意思是global，全局安装</p></blockquote><blockquote><p>hexo-cli是你已知需要安装的模块名称</p></blockquote><p>安装成功后你就可以正式进行使用了</p><h3 id="使用篇"><a href="#使用篇" class="headerlink" title="使用篇"></a>使用篇</h3><p>此时你可以选电脑上的任何一个目录（文件夹）作为自己博客的存放地</p><p>然后在这里右键唤出git bash</p><p>这个时候就用到<strong>准备篇</strong>里讲的git和bash命令的知识了，不过不要怕，其实经常用的也就那么几个命令，比如ls（就是list，列出当前目录的所有文件）、cd(change directory，切换目录)</p><p>首先，我们通过</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">hexo <span class="hljs-keyword">init</span> 任意名称（比如 hexo <span class="hljs-keyword">init</span> blog）<br></code></pre></td></tr></table></figure><p>这就是通过刚才安装的hexo里的hexo init（初始化）命令创建了一个hexo式的文件夹，点进去看看都有什么</p><p>当然，你鼠标点进去只是在你的windows界面系统你这个当前用户进入到blog这个目录了，但git bash还停留在刚才的myblog那个目录，所以你需要在git bash里键入cd blog，来切换到blog目录，你可以再键入pwd（print working directory，打印出当前工作目录）来确认自己是否进到了blog目录</p><p>然后输入npm install，会根据博客既定的依赖安装依赖包</p><blockquote><p>Tip: 既然步入程序世界，理应准备一个好用（高效）的文本编辑器，总不能使用windows自带记事本来编辑这些东西吧，此处我推荐<a href="https://atom.io/">Atom</a>、<a href="https://code.visualstudio.com/">Visual Studio Code、<a href="http://www.sublimetext.com/">Sublime Text</a>都是主流的文本编辑器，具体下载使用请自行查阅</p></blockquote><h3 id="结构解释篇"><a href="#结构解释篇" class="headerlink" title="结构解释篇"></a>结构解释篇</h3><p>_config.yml：主配置文件（博客写到一半时突然获知YAML原来是一种新型的配置文件语言，是一种比JSON还简洁和强大的格式，而yml则是这种配置文件的后缀）</p><p>package.json：应用数据，EJS、Stylus和Markdown渲染器已默认安装，当然你也可以卸载掉它们，如果你想</p><p>scaffolds（脚手架）：当你新建一篇帖子时，hexo会基于这个里面的模板生成一个文件</p><p>source（源）：这是你放置网站内容的地方，hexo会忽略隐藏文件或者以下划线 _ 开头的文件夹，除了_post这个目录。可渲染的文件，例如markdown文件、HTML文件会被hexo处理并放入public（发布）目录，其他文件将会被原样拷贝过去。</p><p>themes（主题）：Hexo会结合主题的网页内容和你的博文生成静态站点</p><p>当你第一次hexo init之后生成的一系列文件其实包含了hexo最核心的一些东西，其中包含如上所介绍的，包括主配置文件_config.yml、source目录里的_post（帖子）里放了一篇示例博文“hello-world.md”、themes里提供了默认主题landscape、scaffolds里提供了post文件的初始模子。这一切就足以让你快速体验如何部署一个博客在放在网上提供别人来访问。</p><h3 id="博客部署"><a href="#博客部署" class="headerlink" title="博客部署"></a>博客部署</h3><p>那么博文已经有了，怎么把它放到网上让所有人都能访问呢，这时候你需要把它部署到服务器，并提供访问地址，理论上来讲，你可能需要租服务器，并把博客丢上去，然后还要配域名，因为你总不可能让别人通过IP地址访问你的博客，这样看来，还有balabala很多事情要做，涉及到web应用部署发布的一系列知识。</p><p>但是一般hexo的使用都是联合<a href="https://pages.github.com/">Github Pages</a>或者<a href="https://pages.coding.net/">Coding Pages</a>一起使用的，Github和Coding都是在线代码仓库，（二者的区别在于前者是国际的，后者是国内的）可以远程寄存你的代码或文件，他们都各自提供了一种叫Pages的服务，可以使得你的<strong>用户名同名仓库</strong>可以作为域名对外公布访问，这样你相当于拥有了一个免费个人网站，并且还不需要注册域名和备案。</p><p>有了这个技术，我们就可以通过git把本地生成的博客静态文件（public目录里的）上传到这个仓库里，然后别人就可以通过访问这个仓库的方式来访问你的博客（只要你的代码结构符合网站基本结构）</p><h3 id="快速上手篇"><a href="#快速上手篇" class="headerlink" title="快速上手篇"></a>快速上手篇</h3><p>所以一切都配置好之后（按照个性化配置好你的_config.yml文件），你发布一篇博客到网上只需要三步：</p><h4 id="第一步：创建博文"><a href="#第一步：创建博文" class="headerlink" title="第一步：创建博文"></a>第一步：创建博文</h4><p>在你的博客主目录下通过git bash键入hexo new 博客标题</p><h4 id="第二步：按照hexo的渲染方式将你的博文渲染成静态文件"><a href="#第二步：按照hexo的渲染方式将你的博文渲染成静态文件" class="headerlink" title="第二步：按照hexo的渲染方式将你的博文渲染成静态文件"></a>第二步：按照hexo的渲染方式将你的博文渲染成静态文件</h4><p>继上一步之后，hexo g（完整命令是hexo generate，即生成文件的意思）</p><h4 id="第三步：按照-config-yml里配置的发布方式，将public里的静态文件上传至你的线上代码仓库（Github或Coding）"><a href="#第三步：按照-config-yml里配置的发布方式，将public里的静态文件上传至你的线上代码仓库（Github或Coding）" class="headerlink" title="第三步：按照_config.yml里配置的发布方式，将public里的静态文件上传至你的线上代码仓库（Github或Coding）"></a>第三步：按照_config.yml里配置的发布方式，将public里的静态文件上传至你的线上代码仓库（Github或Coding）</h4><p>hexo d（完整命令是hexo deploy，即发布的意思）</p><p>仅此而已，这时打开浏览器，输入符合你pages的域名，看看自己的博客是不是显现出来了。</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>其实hexo本身还是有不少的东西，如果想要成为一名高级玩家，需要你自己去进一步了解学习，本文仅初步安装做如此介绍，后续如果有精力的话，我会再继续出其他关于hexo其他配置的使用教程。</p><p>不过，<code>大道至简</code>，看穿事物的本质，即能快速掌握其核心。hexo说白了就是一个基于nodejs的工程，它定义了自己的一套文件格式，你只要按照一系列模板进行个性化编辑，并添加个人用户内容，然后使用它的一套命令，就可以把这些文件渲染成浏览器可访问的格式。剩下的就是关乎WEB原理的东西了。</p><p>本文中后部可能略去了一些详细的操作步骤，不过整体性上应该达到了教学的目的，希望读者都可以借助互联网自己完成剩余的部分。</p><h3 id="END"><a href="#END" class="headerlink" title="END"></a>END</h3><p>过程中由于<code>天时·地利·人和</code>都不同，所以可能遇到与我教程中所写不同的情况，但作为一个非专业人士，只要你肯耐着性子折腾，这些东西你也玩得转，而如果作为一个专业人士，钻研，是你的天职。比如博主写这篇教程也是通过先学习很多知识点，才“负责任”地整理出这篇博文。</p><p>参考链接：</p><ul><li><p><a href="https://hexo.io/docs/setup.html">hexo官方文档</a></p></li><li><p><a href="https://nodejs.org/en/">nodejs官网</a></p></li><li><p><a href="https://developers.google.com/v8/">V8引擎官网</a></p></li><li><p><a href="https://www.npmjs.com/">npm官网</a></p></li><li><p><a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434501436552e03ec6cc152b4c84959f14d0ea278488000">廖雪峰Javascript教程</a></p></li><li><p><a href="http://www.ruanyifeng.com/blog/2016/01/npm-install.html">阮一峰的网络日志</a></p></li><li><p><a href="http://www.ruanyifeng.com/blog/2016/07/yaml.html?f=tt">YAML语言教程</a></p></li><li><p><a href="https://github.com/hexojs/hexo">Hexo源码</a></p></li></ul><p><code>知识是理应无私分享的，而智慧是分享不了的。</code></p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>其他</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于反向代理的整理</title>
    <link href="/wilson-blog-hexo/2017/11/07/%E5%85%B3%E4%BA%8E%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E7%9A%84%E6%95%B4%E7%90%86/"/>
    <url>/wilson-blog-hexo/2017/11/07/%E5%85%B3%E4%BA%8E%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E7%9A%84%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>之前一直对<strong>反向代理</strong>这个概念理解的很模糊，网上参阅了很多解释，看完也是觉得不够信服，相比较而言觉得解释的还算良好的是知乎上看到的一个回答<a href="https://www.zhihu.com/question/24723688">https://www.zhihu.com/question/24723688</a>，但看了之后也仅限于“当时理解，过后就忘”，于是今天再次在stackoverflow看到的解释版本，特此翻译整理，留作备忘。</p><span id="more"></span><p>原文链接：<a href="https://stackoverflow.com/questions/224664/difference-between-proxy-server-and-reverse-proxy-server/366212#366212">https://stackoverflow.com/questions/224664/difference-between-proxy-server-and-reverse-proxy-server/366212#366212</a></p><p>如果当你访问不了这个链接的时候，也就说明，GFW限制了大陆网络内的主机访问stackoverflow的网站内容，此时你即需要通过<strong>代理服务器</strong>来作为你的代理，帮你取拿到远端stackoverflow网站上的内容取回给你，这就是正向代理的使用实例。</p><p>而反向代理其实更常见，因为它充斥在我们每一天的网上冲浪之中，<strong>只不过你意识不到罢了</strong>（注意！这也就是正向代理和反向代理很大的特征区别之一：正向代理需要你去寻得一个代理来帮助你访问你访问不了的服务器资源，而反向代理是服务器端使用的代理，来处理你提交的访问请求，所以作为客户端的你是意识不到代理的存在的）。</p><p>比如你通过浏览器访问百度网搜索一个条目，或者直接在地址栏输入stackoverflow.com，然而这个行为在互联网中有太多用户在做，所以百度或者stackoverflow的服务器不一定能够驾驭这么大的访问量，此时他们可能会把相同的服务部署在N多台服务器节点上，然后你其实访问到的是那些提供反向代理的服务器，反向代理服务器将大量的请求做了负载均衡处理，再把这些请求均衡合理地分配到那些提供相同服务的不同服务器节点上，这就是反向代理的实例。</p><p>接下来是本人对于stackoverflow上精彩回答的翻译，如有不准确之处请指正</p><blockquote><p>前面的回答都很准确，但可能太过于精简了。我会试着增加一些例子。<br>首先，“代理”这个词描述了某个人或者某个事物扮演着代表另一个人的角色。在计算机领域，我们讨论的即是一台服务器扮演着代表另一台计算机的角色。为了保证观点可达性（即观点可以被很容易的理解）这一目的（这句感觉翻译的不太好），我会限制我的讨论仅限于“web代理”，然而“代理”这一思想其实不仅限于web网站。</p></blockquote><h4 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h4><blockquote><p>大多数关于web代理的讨论都指的是”正向代理”（这句感觉翻译得不甚准确）。这种情况下的代理事件其实就是“正向代理”代表请求者从另一个web站点取得数据。</p></blockquote><blockquote><p>举个栗子，我会列举三台接入互联网的计算机。</p></blockquote><blockquote><p>X &#x3D; 你的计算机，或者说互联中的“客户机”</p></blockquote><blockquote><p>Y &#x3D; 代理站点，proxy.example.org</p></blockquote><blockquote><p>Z &#x3D; 你想要访问的网站，<a href="http://www.example.net/">www.example.net</a></p></blockquote><blockquote><p>通常，你可能是类似 X –&gt; Z 这样的直连。</p></blockquote><blockquote><p>然而，在一些场景下，Y –&gt; Z 来代表X（去访问Z）更好，链条如下：X –&gt; Y –&gt; Z</p></blockquote><blockquote><p>为什么X需要使用代理服务器的原因：</p></blockquote><blockquote><p>X无法直接访问到Z:</p></blockquote><blockquote><p>a)在X的互联网连接中某个拥有管理权限的人决定拦截所有X到Z站点的访问（比如GFW : ) ）</p></blockquote><blockquote><p>实例：</p></blockquote><blockquote><ol><li>风暴蠕虫病毒蔓延，它欺骗人们去访问familypostcards2008.com，所以系统管理员封锁了对于这个网站的访问来保护用户们以避免其因为不小心而感染病毒。</li></ol></blockquote><blockquote><ol start="2"><li>一家大型公司的员工花费了太多的时间用在facebook.com的访问上，所以管理者想要这些访问在工作时间被屏蔽掉。</li></ol></blockquote><blockquote><ol start="3"><li>一家当地小学禁止了其对于playboy.com这个网站的互联网访问</li></ol></blockquote><blockquote><ol start="4"><li>政府无法控制人们发布新闻，所以它控制了新闻的访问取而代之，通过封锁类似wikipedia.org这样的网站，更多请查阅**<a href="http://www.onion-router.net/">TOR</a><strong>或者</strong><a href="http://freenetproject.org/">FreeNet</a>**</li></ol></blockquote><blockquote><p>b) Z点的管理员禁止了来自X的访问</p></blockquote><blockquote><p>实例：</p></blockquote><blockquote><ol><li>Z站点的管理员被告知可能存在来自于X的黑客攻击尝试行为，所以管理员决定禁掉X的IP地址（<a href="http://www.netrange.com/">http://www.netrange.com/</a>）</li></ol></blockquote><blockquote><ol start="2"><li>Z是一个论坛网站，X正在该论坛刷屏。Z禁掉了X。</li></ol></blockquote><h4 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h4><blockquote><p>X &#x3D; 你的计算机，或者说互联中的“客户机”</p></blockquote><blockquote><p>Y &#x3D; 反向代理站点，proxy.example.org</p></blockquote><blockquote><p>Z &#x3D; 你想要访问的网站，<a href="http://www.example.net/">www.example.net</a></p></blockquote><blockquote><p>通常，你可能是类似 X –&gt; Z 这样的直连。</p></blockquote><blockquote><p>然而，在一些场景，对于Z的管理员限制掉或者不允许这样的直连更好，同时强迫访问者先去访问Y。所以，如同往常，我们通过 Y –&gt; Z 代表X取得想要访问的数据，链条如下： X –&gt; Y –&gt; Z</p></blockquote><blockquote><p>相比“正向代理”不同的是，这次用户X并不知道他在访问Z，因为他只能看到他在和Y通信。Z服务端对于客户端来说不可见并且只有反向代理Y对于外部是可见的。所以一个反向代理是不需要在客户端做配置的。</p></blockquote><blockquote><p>客户端X认为他只是在和Y进行通信（即X –&gt; Y），但事实上是Y在传导所有的通信（再一次成为X –&gt; Y –&gt; Z这样的通信结构）</p></blockquote><blockquote><p>为什么Z想要设置一个代理服务器的原因：</p></blockquote><blockquote><p>1）Z想要强迫所有对于它的通信访问都先经过Y。<br>a)Z有一个成千上万人想要访问的巨大web站点，但仅仅一个web服务器不能处理所有的网络请求。所以Z架设了许多许多的服务器，并在互联网放置一个反向代理，以便当用户想要访问Z的时候把他们的访问请求派发到离他们最近的服务器去。这也是<strong>内容分发网络</strong>（CDN）概念如何工作的一部分。</p></blockquote><blockquote><p>实例：</p></blockquote><blockquote><ol><li><a href="http://trailers.apple.com/trailers/">Apple Trailers</a>使用<a href="https://www.akamai.com/">Akamai</a></li></ol></blockquote><blockquote><ol start="2"><li>Jquery.com使用<a href="http://aws.amazon.com/s3/">CloudFront CDN</a>来存放它的javascript文件（例如：<a href="http://static.jquery.com/files/rocker/scripts/custom.js">sample</a>）</li></ol></blockquote><blockquote><ol start="3"><li>等等</li></ol></blockquote><blockquote><p>2）Z的管理员担心来自于对其网站内容的报复行为，并且不想直接向大众暴露其主服务器。</p></blockquote><blockquote><ol><li>类似”Canadian Pharmacy”这样的垃圾品牌的拥有者看上去拥有成千上万的服务器，然而实际上它大多数网站都只部署在比看上去少得多的服务器上。另外，关于刷屏的abuse complaints实际上只会关掉那些公共服务器，而非主服务器。（最后这段实在无力翻译，自己都看着难受 :( ）</li></ol></blockquote><blockquote><p>在如上的场景，Z决定选择Y（作为反向代理）</p></blockquote><h3 id="END"><a href="#END" class="headerlink" title="END"></a>END</h3>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于matlab冒号定义矩阵的小栗子</title>
    <link href="/wilson-blog-hexo/2017/11/01/%E5%85%B3%E4%BA%8Ematlab%E5%86%92%E5%8F%B7%E5%AE%9A%E4%B9%89%E7%9F%A9%E9%98%B5%E7%9A%84%E5%B0%8F%E6%A0%97%E5%AD%90/"/>
    <url>/wilson-blog-hexo/2017/11/01/%E5%85%B3%E4%BA%8Ematlab%E5%86%92%E5%8F%B7%E5%AE%9A%E4%B9%89%E7%9F%A9%E9%98%B5%E7%9A%84%E5%B0%8F%E6%A0%97%E5%AD%90/</url>
    
    <content type="html"><![CDATA[<blockquote><p>冒号是MATLAT中最有用的操作符之一。它用于创建向量，下标数组，并为迭代指定。</p></blockquote><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>怎么解释？作为初学者可能一下子看不懂，但是研究后你会发现，作为老手，你也不应该看懂，因为，这是个印刷错误！</p><p>借此学习一下MATLAB的冒号符和矩阵定义</p><span id="more"></span><h3 id="冒号符（-：）"><a href="#冒号符（-：）" class="headerlink" title="冒号符（ ：）"></a>冒号符（ ：）</h3><h4 id="创建行向量"><a href="#创建行向量" class="headerlink" title="创建行向量"></a>创建行向量</h4><p>包含从1到10的整数行向量</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">octave</span>:<span class="hljs-number">2</span>&gt; <span class="hljs-number">1</span>:<span class="hljs-number">10</span><br><span class="hljs-attribute">ans</span> =<br><br>    <span class="hljs-attribute">1</span>    <span class="hljs-number">2</span>    <span class="hljs-number">3</span>    <span class="hljs-number">4</span>    <span class="hljs-number">5</span>    <span class="hljs-number">6</span>    <span class="hljs-number">7</span>    <span class="hljs-number">8</span>    <span class="hljs-number">9</span>   <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p>指定增量值</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">octave</span>:<span class="hljs-number">3</span>&gt; <span class="hljs-number">100</span>:-<span class="hljs-number">5</span>:<span class="hljs-number">50</span><br><span class="hljs-attribute">ans</span> =<br><br>   <span class="hljs-attribute">100</span>    <span class="hljs-number">95</span>    <span class="hljs-number">90</span>    <span class="hljs-number">85</span>    <span class="hljs-number">80</span>    <span class="hljs-number">75</span>    <span class="hljs-number">70</span>    <span class="hljs-number">65</span>    <span class="hljs-number">60</span>    <span class="hljs-number">55</span>    <span class="hljs-number">50</span><br></code></pre></td></tr></table></figure><p>one more 栗子</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">octave</span>:<span class="hljs-number">4</span>&gt; <span class="hljs-number">0</span>:pi/<span class="hljs-number">8</span>:pi<br><span class="hljs-attribute">ans</span> =<br><br> <span class="hljs-attribute">Columns</span> <span class="hljs-number">1</span> through <span class="hljs-number">7</span>:<br><br>    <span class="hljs-attribute">0</span>.<span class="hljs-number">00000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">39270</span>    <span class="hljs-number">0</span>.<span class="hljs-number">78540</span>    <span class="hljs-number">1</span>.<span class="hljs-number">17810</span>    <span class="hljs-number">1</span>.<span class="hljs-number">57080</span>    <span class="hljs-number">1</span>.<span class="hljs-number">96350</span>    <span class="hljs-number">2</span>.<span class="hljs-number">35619</span><br><br> <span class="hljs-attribute">Columns</span> <span class="hljs-number">8</span> and <span class="hljs-number">9</span>:<br><br>    <span class="hljs-attribute">2</span>.<span class="hljs-number">74889</span>    <span class="hljs-number">3</span>.<span class="hljs-number">14159</span><br></code></pre></td></tr></table></figure><p>因吹斯汀（pi为π）</p><h4 id="使用冒号运算符创建索引向量，以选择数组的行、列或元素"><a href="#使用冒号运算符创建索引向量，以选择数组的行、列或元素" class="headerlink" title="使用冒号运算符创建索引向量，以选择数组的行、列或元素"></a>使用冒号运算符创建索引向量，以选择数组的行、列或元素</h4><style>table th:first-of-type {    width: 100px;}</style><table><thead><tr><th>格式</th><th>目的</th></tr></thead><tbody><tr><td>A(:,j)</td><td>A的第j列</td></tr><tr><td>A(i,:)</td><td>A的第i行</td></tr><tr><td>A(:,:)</td><td>等效的二维数组。对于矩阵，与A相同</td></tr><tr><td>A(j:k)</td><td>A(j), A(j+1),…,A(k)</td></tr><tr><td>A(:,j:k)</td><td>A(:,j), A(:,j+1),…,A(:,k)</td></tr><tr><td>A(:,:,k)</td><td>三维数组A的第k页</td></tr><tr><td>A(i,j,k,:)</td><td>四维数组A中的向量。向量包括A(i，j，k，1)，A(i，j，k，2)，A(i，j，k，3)等</td></tr><tr><td>A(:)</td><td>A的所有要素，被视为单列。在赋值语句的左侧，A(:)填充A，从之前保留其形状。在这种情况下，右侧必须包含与A相同数量的元素</td></tr></tbody></table><p>前四个比较好理解</p><p>实例解析</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs tap">octave:5&gt; A = [1<span class="hljs-number"> 2 </span>3 4;<span class="hljs-number"> 4 </span>5<span class="hljs-number"> 6 </span>7;<span class="hljs-number"> 7 </span>8<span class="hljs-number"> 9 </span>10]<br>A =<br><br>   <span class="hljs-number"> 1 </span>  <span class="hljs-number"> 2 </span>  <span class="hljs-number"> 3 </span>   4<br>   <span class="hljs-number"> 4 </span>  <span class="hljs-number"> 5 </span>  <span class="hljs-number"> 6 </span>   7<br>   <span class="hljs-number"> 7 </span>  <span class="hljs-number"> 8 </span>  <span class="hljs-number"> 9 </span>  10<br></code></pre></td></tr></table></figure><p>上面为直接创建矩阵的最基本方式，直接定义矩阵每行的元素并以分号为行分隔符</p><p>下面解释冒号作为索引来获取矩阵元素的方式</p><p>这个矩阵也就是一个二维数组，每一个元素则是A（i，j），i为矩阵的行，j为矩阵的列，以此为索引定位每个元素，当i或者j为冒号时表示ALL<br>例如：A(:,j)等同于A(1,j)、A(2,j)、A(3,j)，矩阵有几行，则遍历全部行，取全部行的第j个元素，最后即是取这个矩阵的第j列</p><p>所以A(:,:)也就是遍历矩阵的每一行每一列的全部元素，也就相当于等效的二维数组</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">octave</span>:<span class="hljs-number">7</span>&gt; A =<span class="hljs-meta"> [1 2 3 4; 4 5 6 7; 7 8 9 10]</span><br><span class="hljs-attribute">A</span>(:,<span class="hljs-number">2</span>)      % second column of A<br><span class="hljs-attribute">A</span>(:,<span class="hljs-number">2</span>:<span class="hljs-number">3</span>)    % second and third column of A<br><span class="hljs-attribute">A</span>(<span class="hljs-number">2</span>:<span class="hljs-number">3</span>,<span class="hljs-number">2</span>:<span class="hljs-number">3</span>)  % second and third rows and second and third columns<br><span class="hljs-attribute">A</span> =<br><br>    <span class="hljs-attribute">1</span>    <span class="hljs-number">2</span>    <span class="hljs-number">3</span>    <span class="hljs-number">4</span><br>    <span class="hljs-attribute">4</span>    <span class="hljs-number">5</span>    <span class="hljs-number">6</span>    <span class="hljs-number">7</span><br>    <span class="hljs-attribute">7</span>    <span class="hljs-number">8</span>    <span class="hljs-number">9</span>   <span class="hljs-number">10</span><br><br><span class="hljs-attribute">ans</span> =<br><br>   <span class="hljs-attribute">2</span><br>   <span class="hljs-attribute">5</span><br>   <span class="hljs-attribute">8</span><br><br><span class="hljs-attribute">ans</span> =<br><br>   <span class="hljs-attribute">2</span>   <span class="hljs-number">3</span><br>   <span class="hljs-attribute">5</span>   <span class="hljs-number">6</span><br>   <span class="hljs-attribute">8</span>   <span class="hljs-number">9</span><br><br><span class="hljs-attribute">ans</span> =<br><br>   <span class="hljs-attribute">5</span>   <span class="hljs-number">6</span><br>   <span class="hljs-attribute">8</span>   <span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><p>看到了吗，A（:,2:3）相当于A(（ALL:ALL,2:3），如果是二维数组，则逗号左右即为定位元素的行、列索引，所有逗号左边的是行，逗号右边的是列，当逗号左边是冒号，即表示取所有的行，也就是该二维数组（矩阵）的第2列和第3列的没一行上的元素，也就矩阵的第2、3列</p><p>回到第一种用法，冒号用于创建向量</p><p>行向量：a&#x3D;[1,2,3,4,5]（直接创建向量，写出每个元素，以逗号分隔元素，即生成行向量）<br>列向量：a&#x3D;[1;2;3;4;5]（分号用以分隔向量的行，所以这样创建出的是列向量）</p><p>a&#x3D;J:K 生成的行向量是a&#x3D;[J,J+1,…,K]<br>a&#x3D;J:D:K 生成行向量a&#x3D;[J,J+D,…,J+m*D],m&#x3D;fix((K-J)&#x2F;D)（生成以D为步长的行向量，D默认为1,可以不写，即为上面的形式）<br>若J&gt;K，则需要D&gt;0，否则得到空矩阵[]<br>同理，若J&lt;K，则需要D&lt;0，否则为空矩阵</p><p>例如：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">octave</span>:<span class="hljs-number">13</span>&gt; <span class="hljs-number">1</span>:<span class="hljs-number">5</span>:<span class="hljs-number">11</span><br><span class="hljs-attribute">ans</span> =<br><br>    <span class="hljs-attribute">1</span>    <span class="hljs-number">6</span>   <span class="hljs-number">11</span><br></code></pre></td></tr></table></figure><p>中括号用于创建向量<br>小括号用于提取向量中的元素</p><h4 id="比较特殊的"><a href="#比较特殊的" class="headerlink" title="比较特殊的"></a>比较特殊的</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">octave</span>:<span class="hljs-number">3</span>&gt; A=[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>;<span class="hljs-number">4</span>:<span class="hljs-number">6</span>;<span class="hljs-number">7</span>:<span class="hljs-number">9</span>]<br><span class="hljs-attribute">A</span> =<br><br>   <span class="hljs-attribute">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span><br>   <span class="hljs-attribute">4</span>   <span class="hljs-number">5</span>   <span class="hljs-number">6</span><br>   <span class="hljs-attribute">7</span>   <span class="hljs-number">8</span>   <span class="hljs-number">9</span><br><br><span class="hljs-attribute">octave</span>:<span class="hljs-number">2</span>&gt; A(<span class="hljs-number">1</span>:<span class="hljs-number">2</span>)<br><span class="hljs-attribute">ans</span> =<br><br>   <span class="hljs-attribute">1</span>   <span class="hljs-number">4</span><br><br><span class="hljs-attribute">octave</span>:<span class="hljs-number">3</span>&gt; A(<span class="hljs-number">2</span>:<span class="hljs-number">1</span>)<br><span class="hljs-attribute">ans</span> =<span class="hljs-meta"> [](1x0)</span><br><span class="hljs-meta">octave:4&gt; A(1:3)</span><br><span class="hljs-meta">ans =</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">   1   4   7</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">octave:5&gt; A(1:2,2)</span><br><span class="hljs-meta">ans =</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">   2</span><br><span class="hljs-meta">   5</span><br><span class="hljs-meta"></span><br></code></pre></td></tr></table></figure><p>类似这样的取值的方式，MATLAB帮助文档没有给出这样的语法，但使用起来不报错<br>按照测试规律，只能暂且猜测其编译方式为按照（1:2:1）：3这样的结合律，即1:3</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">octave</span>:<span class="hljs-number">4</span>&gt; A=[<span class="hljs-number">1</span>:<span class="hljs-number">2</span>:<span class="hljs-number">5</span>;<span class="hljs-number">7</span>:<span class="hljs-number">2</span>:<span class="hljs-number">11</span>;<span class="hljs-number">13</span>:<span class="hljs-number">2</span>:<span class="hljs-number">17</span>]<br><span class="hljs-attribute">A</span> =<br><br>    <span class="hljs-attribute">1</span>    <span class="hljs-number">3</span>    <span class="hljs-number">5</span><br>    <span class="hljs-attribute">7</span>    <span class="hljs-number">9</span>   <span class="hljs-number">11</span><br>   <span class="hljs-attribute">13</span>   <span class="hljs-number">15</span>   <span class="hljs-number">17</span><br></code></pre></td></tr></table></figure><p>类似这样的取值</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">octave</span>:<span class="hljs-number">5</span>&gt; A(<span class="hljs-number">1</span>:<span class="hljs-number">2</span>:<span class="hljs-number">3</span>)<br><span class="hljs-attribute">ans</span> =<br><br>    <span class="hljs-attribute">1</span>   <span class="hljs-number">13</span><br></code></pre></td></tr></table></figure><p>A(1:2:3)会被解释为1和3，而这次索引没有加逗号，作为二维数组，会将其认为是行索引，即第一、三行，列索引未指定，则会默认取第一列</p><hr><p>在MATLAB编译器中，这种不规范的向量创建方式（空向量;非空向量）会成功创建后面的正常向量。</p><p>致谢：问题提出者，同时也是本文校对者@Fan同学</p><p>参考链接：<a href="http://www.cnblogs.com/haore147/p/3633050.html">http://www.cnblogs.com/haore147/p/3633050.html</a></p><p>附：**<a href="http://octave-online.net">MATLAB在线解释器</a>**</p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>其他</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于SQL性能评估的一些分析</title>
    <link href="/wilson-blog-hexo/2017/10/31/%E5%85%B3%E4%BA%8ESQL%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%88%86%E6%9E%90/"/>
    <url>/wilson-blog-hexo/2017/10/31/%E5%85%B3%E4%BA%8ESQL%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>继<a href="https://magi.getshell.cn/2017/10/31/%E5%85%B3%E4%BA%8Emysql%E4%B8%ADmax%E5%87%BD%E6%95%B0%E5%92%8Cgroupby%E8%81%94%E5%90%88%E4%BD%BF%E7%94%A8%E7%9A%84%E5%9D%91/#more">《关于mysql中max函数和groupby联合使用的坑》</a>后进一步关于SQL性能的探究</p><span id="more"></span><style>table th:first-of-type {    width: 100px;}</style><table><thead><tr><th>类型</th><th>解释</th></tr></thead><tbody><tr><td>id</td><td>select查询的序列号</td></tr><tr><td>select_type</td><td>select查询的类型，主要是区别普通查询和联合查询、子查询之类的复杂查询</td></tr><tr><td>table</td><td>输出的行所引用的表</td></tr><tr><td>type</td><td>联合查询所使用的类型</td></tr><tr><td>possible_keys</td><td>MySQL能使用哪个索引在该表中找到行</td></tr><tr><td>key</td><td>MySQL实际决定使用的键</td></tr><tr><td>key_len</td><td>MySQL决定使用的键长</td></tr><tr><td>ref</td><td>哪个字段或常数与key一起被使用</td></tr><tr><td>rows</td><td>mysql要遍历多少数据才能找到，在innodb上是不准确的</td></tr><tr><td>Extra</td><td>-</td></tr></tbody></table><p>实例解释</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">desc</span> t3;<br><span class="hljs-operator">+</span><span class="hljs-comment">-------+--------------+------+-----+---------+----------------+</span><br><span class="hljs-operator">|</span> Field <span class="hljs-operator">|</span> Type         <span class="hljs-operator">|</span> <span class="hljs-keyword">Null</span> <span class="hljs-operator">|</span> Key <span class="hljs-operator">|</span> <span class="hljs-keyword">Default</span> <span class="hljs-operator">|</span> Extra          <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------+--------------+------+-----+---------+----------------+</span><br><span class="hljs-operator">|</span> id    <span class="hljs-operator">|</span> <span class="hljs-type">int</span>(<span class="hljs-number">11</span>)      <span class="hljs-operator">|</span> <span class="hljs-keyword">NO</span>   <span class="hljs-operator">|</span> PRI <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> auto_increment <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> other <span class="hljs-operator">|</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-operator">|</span> YES  <span class="hljs-operator">|</span>     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span>                <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------+--------------+------+-----+---------+----------------+</span><br><span class="hljs-number">2</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs SQL">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t3 <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">3952602</span>) a) b;<br><span class="hljs-operator">+</span><span class="hljs-comment">---------+-------+</span><br><span class="hljs-operator">|</span> id      <span class="hljs-operator">|</span> other <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------+-------+</span><br><span class="hljs-operator">|</span> <span class="hljs-number">3952602</span> <span class="hljs-operator">|</span> sth   <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------+-------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs SQL">mysql<span class="hljs-operator">&gt;</span> explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t3 <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">3952602</span>) a) b;<br><span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+------------+--------+-------------------+---------+---------+-------+------+-------+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> select_type <span class="hljs-operator">|</span> <span class="hljs-keyword">table</span>      <span class="hljs-operator">|</span> type   <span class="hljs-operator">|</span> possible_keys     <span class="hljs-operator">|</span> key     <span class="hljs-operator">|</span> key_len <span class="hljs-operator">|</span> <span class="hljs-keyword">ref</span>   <span class="hljs-operator">|</span> <span class="hljs-keyword">rows</span> <span class="hljs-operator">|</span> Extra <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+------------+--------+-------------------+---------+---------+-------+------+-------+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">PRIMARY</span>     <span class="hljs-operator">|</span> <span class="hljs-operator">&lt;</span>derived2<span class="hljs-operator">&gt;</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">system</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>              <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>  <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>  <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">2</span> <span class="hljs-operator">|</span> DERIVED     <span class="hljs-operator">|</span> <span class="hljs-operator">&lt;</span>derived3<span class="hljs-operator">&gt;</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">system</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>              <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>  <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>  <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">3</span> <span class="hljs-operator">|</span> DERIVED     <span class="hljs-operator">|</span> t3         <span class="hljs-operator">|</span> const  <span class="hljs-operator">|</span> <span class="hljs-keyword">PRIMARY</span>,idx_t3_id <span class="hljs-operator">|</span> <span class="hljs-keyword">PRIMARY</span> <span class="hljs-operator">|</span> <span class="hljs-number">4</span>       <span class="hljs-operator">|</span> const <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>  <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+------------+--------+-------------------+---------+---------+-------+------+-------+</span><br><span class="hljs-number">3</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs SQL">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">show</span> index <span class="hljs-keyword">from</span> t3;<br><span class="hljs-operator">+</span><span class="hljs-comment">-------+------------+-----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+</span><br><span class="hljs-operator">|</span> <span class="hljs-keyword">Table</span> <span class="hljs-operator">|</span> Non_unique <span class="hljs-operator">|</span> Key_name  <span class="hljs-operator">|</span> Seq_in_index <span class="hljs-operator">|</span> Column_name <span class="hljs-operator">|</span> <span class="hljs-keyword">Collation</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">Cardinality</span> <span class="hljs-operator">|</span> Sub_part <span class="hljs-operator">|</span> Packed <span class="hljs-operator">|</span> <span class="hljs-keyword">Null</span> <span class="hljs-operator">|</span> Index_type <span class="hljs-operator">|</span> Comment <span class="hljs-operator">|</span> Index_comment <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------+------------+-----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+</span><br><span class="hljs-operator">|</span> t3    <span class="hljs-operator">|</span>          <span class="hljs-number">0</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">PRIMARY</span>   <span class="hljs-operator">|</span>            <span class="hljs-number">1</span> <span class="hljs-operator">|</span> id          <span class="hljs-operator">|</span> A         <span class="hljs-operator">|</span>           <span class="hljs-number">1</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>   <span class="hljs-operator">|</span>      <span class="hljs-operator">|</span> BTREE      <span class="hljs-operator">|</span>         <span class="hljs-operator">|</span>               <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> t3    <span class="hljs-operator">|</span>          <span class="hljs-number">1</span> <span class="hljs-operator">|</span> idx_t3_id <span class="hljs-operator">|</span>            <span class="hljs-number">1</span> <span class="hljs-operator">|</span> id          <span class="hljs-operator">|</span> A         <span class="hljs-operator">|</span>           <span class="hljs-number">1</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>   <span class="hljs-operator">|</span>      <span class="hljs-operator">|</span> BTREE      <span class="hljs-operator">|</span>         <span class="hljs-operator">|</span>               <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------+------------+-----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+</span><br><span class="hljs-number">2</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span><br></code></pre></td></tr></table></figure><h4 id="id"><a href="#id" class="headerlink" title="id"></a>id</h4><ul><li><p>从里往外执行，从id为3往上执行</p></li><li><p>同时作为一个解释序号，比如id为2中的table中的derived3就是指id为3的那个DERIVED（衍生表）</p></li></ul><h4 id="select-type"><a href="#select-type" class="headerlink" title="select_type"></a>select_type</h4><p>SIMPLE | PRIMARY | UNION | DEPENDENT UNION | UNION RESULT | SUBQUERY | DEPENDENT SUBQUERY | DERIVED | 共7种</p><p>逐个分析</p><h6 id="SIMPLE"><a href="#SIMPLE" class="headerlink" title="SIMPLE"></a>SIMPLE</h6><p>简单查询，即不使用UNION或子查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs SQL">mysql<span class="hljs-operator">&gt;</span> explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t3 <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">3952602</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+-------+-------------------+---------+---------+-------+------+-------+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> select_type <span class="hljs-operator">|</span> <span class="hljs-keyword">table</span> <span class="hljs-operator">|</span> type  <span class="hljs-operator">|</span> possible_keys     <span class="hljs-operator">|</span> key     <span class="hljs-operator">|</span> key_len <span class="hljs-operator">|</span> <span class="hljs-keyword">ref</span>   <span class="hljs-operator">|</span> <span class="hljs-keyword">rows</span> <span class="hljs-operator">|</span> Extra <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+-------+-------------------+---------+---------+-------+------+-------+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> SIMPLE      <span class="hljs-operator">|</span> t3    <span class="hljs-operator">|</span> const <span class="hljs-operator">|</span> <span class="hljs-keyword">PRIMARY</span>,idx_t3_id <span class="hljs-operator">|</span> <span class="hljs-keyword">PRIMARY</span> <span class="hljs-operator">|</span> <span class="hljs-number">4</span>       <span class="hljs-operator">|</span> const <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>  <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+-------+-------------------+---------+---------+-------+------+-------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span><br></code></pre></td></tr></table></figure><p>####### PRIMARY</p><p>最外层的主查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><br>mysql<span class="hljs-operator">&gt;</span> explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t3 <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">3952602</span>) a;<br><span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+------------+--------+-------------------+---------+---------+-------+------+-------+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> select_type <span class="hljs-operator">|</span> <span class="hljs-keyword">table</span>      <span class="hljs-operator">|</span> type   <span class="hljs-operator">|</span> possible_keys     <span class="hljs-operator">|</span> key     <span class="hljs-operator">|</span> key_len <span class="hljs-operator">|</span> <span class="hljs-keyword">ref</span>   <span class="hljs-operator">|</span> <span class="hljs-keyword">rows</span> <span class="hljs-operator">|</span> Extra <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+------------+--------+-------------------+---------+---------+-------+------+-------+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">PRIMARY</span>     <span class="hljs-operator">|</span> <span class="hljs-operator">&lt;</span>derived2<span class="hljs-operator">&gt;</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">system</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>              <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>  <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>  <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">2</span> <span class="hljs-operator">|</span> DERIVED     <span class="hljs-operator">|</span> t3         <span class="hljs-operator">|</span> const  <span class="hljs-operator">|</span> <span class="hljs-keyword">PRIMARY</span>,idx_t3_id <span class="hljs-operator">|</span> <span class="hljs-keyword">PRIMARY</span> <span class="hljs-operator">|</span> <span class="hljs-number">4</span>       <span class="hljs-operator">|</span> const <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>  <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+------------+--------+-------------------+---------+---------+-------+------+-------+</span><br><span class="hljs-number">2</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span><br></code></pre></td></tr></table></figure><h6 id="UNION"><a href="#UNION" class="headerlink" title="UNION"></a>UNION</h6><p>union中的第二个或者后面的select语句</p><h6 id="UNION-RESULT"><a href="#UNION-RESULT" class="headerlink" title="UNION RESULT"></a>UNION RESULT</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs SQL">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t3 <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">3952602</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t3;<br><span class="hljs-operator">+</span><span class="hljs-comment">---------+-------+</span><br><span class="hljs-operator">|</span> id      <span class="hljs-operator">|</span> other <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------+-------+</span><br><span class="hljs-operator">|</span> <span class="hljs-number">3952602</span> <span class="hljs-operator">|</span> sth   <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">3952602</span> <span class="hljs-operator">|</span> sth   <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------+-------+</span><br><span class="hljs-number">2</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs SQL">mysql<span class="hljs-operator">&gt;</span> explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t3 <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">3952602</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t3;<br><span class="hljs-operator">+</span><span class="hljs-comment">------+--------------+------------+-------+-------------------+---------+---------+-------+------+-----------------+</span><br><span class="hljs-operator">|</span> id   <span class="hljs-operator">|</span> select_type  <span class="hljs-operator">|</span> <span class="hljs-keyword">table</span>      <span class="hljs-operator">|</span> type  <span class="hljs-operator">|</span> possible_keys     <span class="hljs-operator">|</span> key     <span class="hljs-operator">|</span> key_len <span class="hljs-operator">|</span> <span class="hljs-keyword">ref</span>   <span class="hljs-operator">|</span> <span class="hljs-keyword">rows</span> <span class="hljs-operator">|</span> Extra           <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+--------------+------------+-------+-------------------+---------+---------+-------+------+-----------------+</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">PRIMARY</span>      <span class="hljs-operator">|</span> t3         <span class="hljs-operator">|</span> const <span class="hljs-operator">|</span> <span class="hljs-keyword">PRIMARY</span>,idx_t3_id <span class="hljs-operator">|</span> <span class="hljs-keyword">PRIMARY</span> <span class="hljs-operator">|</span> <span class="hljs-number">4</span>       <span class="hljs-operator">|</span> const <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>            <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">2</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">UNION</span>        <span class="hljs-operator">|</span> t3         <span class="hljs-operator">|</span> <span class="hljs-keyword">ALL</span>   <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>              <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>  <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>            <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">UNION</span> <span class="hljs-keyword">RESULT</span> <span class="hljs-operator">|</span> <span class="hljs-operator">&lt;</span>union1,<span class="hljs-number">2</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">ALL</span>   <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>              <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>  <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">Using</span> temporary <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+--------------+------------+-------+-------------------+---------+---------+-------+------+-----------------+</span><br><span class="hljs-number">3</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span><br></code></pre></td></tr></table></figure><h6 id="DEPENDENT-UNION"><a href="#DEPENDENT-UNION" class="headerlink" title="DEPENDENT UNION"></a>DEPENDENT UNION</h6><p>union的结果</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs SQL">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t3 <span class="hljs-keyword">where</span> id <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> t3 <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">3952602</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">select</span> id<br> <span class="hljs-keyword">from</span> t3);<br><span class="hljs-operator">+</span><span class="hljs-comment">---------+-------+</span><br><span class="hljs-operator">|</span> id      <span class="hljs-operator">|</span> other <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------+-------+</span><br><span class="hljs-operator">|</span> <span class="hljs-number">3952602</span> <span class="hljs-operator">|</span> sth   <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------+-------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs SQL">mysql<span class="hljs-operator">&gt;</span> explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t3 <span class="hljs-keyword">where</span> id <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> t3 <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">3952602</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> t3);<br><span class="hljs-operator">+</span><span class="hljs-comment">------+--------------------+------------+--------+-------------------+---------+---------+-------+------+-----------------+</span><br><span class="hljs-operator">|</span> id   <span class="hljs-operator">|</span> select_type        <span class="hljs-operator">|</span> <span class="hljs-keyword">table</span>      <span class="hljs-operator">|</span> type   <span class="hljs-operator">|</span> possible_keys     <span class="hljs-operator">|</span> key     <span class="hljs-operator">|</span> key_len <span class="hljs-operator">|</span> <span class="hljs-keyword">ref</span>   <span class="hljs-operator">|</span> <span class="hljs-keyword">rows</span> <span class="hljs-operator">|</span> Extra           <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+--------------------+------------+--------+-------------------+---------+---------+-------+------+-----------------+</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">PRIMARY</span>            <span class="hljs-operator">|</span> t3         <span class="hljs-operator">|</span> <span class="hljs-keyword">ALL</span>    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>              <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>  <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">Using</span> <span class="hljs-keyword">where</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">2</span> <span class="hljs-operator">|</span> DEPENDENT SUBQUERY <span class="hljs-operator">|</span> t3         <span class="hljs-operator">|</span> const  <span class="hljs-operator">|</span> <span class="hljs-keyword">PRIMARY</span>,idx_t3_id <span class="hljs-operator">|</span> <span class="hljs-keyword">PRIMARY</span> <span class="hljs-operator">|</span> <span class="hljs-number">4</span>       <span class="hljs-operator">|</span> const <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">Using</span> index     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">3</span> <span class="hljs-operator">|</span> DEPENDENT <span class="hljs-keyword">UNION</span>    <span class="hljs-operator">|</span> t3         <span class="hljs-operator">|</span> eq_ref <span class="hljs-operator">|</span> <span class="hljs-keyword">PRIMARY</span>,idx_t3_id <span class="hljs-operator">|</span> <span class="hljs-keyword">PRIMARY</span> <span class="hljs-operator">|</span> <span class="hljs-number">4</span>       <span class="hljs-operator">|</span> func  <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">Using</span> index     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">UNION</span> <span class="hljs-keyword">RESULT</span>       <span class="hljs-operator">|</span> <span class="hljs-operator">&lt;</span>union2,<span class="hljs-number">3</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">ALL</span>    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>              <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>  <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">Using</span> temporary <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+--------------------+------------+--------+-------------------+---------+---------+-------+------+-----------------+</span><br><span class="hljs-number">4</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span><br></code></pre></td></tr></table></figure><h6 id="SUBQUERY"><a href="#SUBQUERY" class="headerlink" title="SUBQUERY"></a>SUBQUERY</h6><p>子查询的第一个select</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs SQL">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t3 <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> (<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> t3 <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">3952602</span>);<br><span class="hljs-operator">+</span><span class="hljs-comment">---------+-------+</span><br><span class="hljs-operator">|</span> id      <span class="hljs-operator">|</span> other <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------+-------+</span><br><span class="hljs-operator">|</span> <span class="hljs-number">3952602</span> <span class="hljs-operator">|</span> sth   <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------+-------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs SQL">mysql<span class="hljs-operator">&gt;</span> explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t3 <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> (<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> t3 <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">3952602</span>);<br><span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+-------+-------------------+---------+---------+-------+------+-------------+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> select_type <span class="hljs-operator">|</span> <span class="hljs-keyword">table</span> <span class="hljs-operator">|</span> type  <span class="hljs-operator">|</span> possible_keys     <span class="hljs-operator">|</span> key     <span class="hljs-operator">|</span> key_len <span class="hljs-operator">|</span> <span class="hljs-keyword">ref</span>   <span class="hljs-operator">|</span> <span class="hljs-keyword">rows</span> <span class="hljs-operator">|</span> Extra       <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+-------+-------------------+---------+---------+-------+------+-------------+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">PRIMARY</span>     <span class="hljs-operator">|</span> t3    <span class="hljs-operator">|</span> const <span class="hljs-operator">|</span> <span class="hljs-keyword">PRIMARY</span>,idx_t3_id <span class="hljs-operator">|</span> <span class="hljs-keyword">PRIMARY</span> <span class="hljs-operator">|</span> <span class="hljs-number">4</span>       <span class="hljs-operator">|</span> const <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>        <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">2</span> <span class="hljs-operator">|</span> SUBQUERY    <span class="hljs-operator">|</span> t3    <span class="hljs-operator">|</span> const <span class="hljs-operator">|</span> <span class="hljs-keyword">PRIMARY</span>,idx_t3_id <span class="hljs-operator">|</span> <span class="hljs-keyword">PRIMARY</span> <span class="hljs-operator">|</span> <span class="hljs-number">4</span>       <span class="hljs-operator">|</span> const <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">Using</span> index <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+-------+-------------------+---------+---------+-------+------+-------------+</span><br><span class="hljs-number">2</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span><br></code></pre></td></tr></table></figure><h6 id="DEPENDENT-SUBQUERY"><a href="#DEPENDENT-SUBQUERY" class="headerlink" title="DEPENDENT SUBQUERY"></a>DEPENDENT SUBQUERY</h6><p>子查询的第一个查询，取决于外面的查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs SQL">mysql<span class="hljs-operator">&gt;</span> explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t3 <span class="hljs-keyword">where</span> id <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> t3 <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">3952602</span>);<br><span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+-------+-------------------+---------+---------+-------+------+-------------+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> select_type <span class="hljs-operator">|</span> <span class="hljs-keyword">table</span> <span class="hljs-operator">|</span> type  <span class="hljs-operator">|</span> possible_keys     <span class="hljs-operator">|</span> key     <span class="hljs-operator">|</span> key_len <span class="hljs-operator">|</span> <span class="hljs-keyword">ref</span>   <span class="hljs-operator">|</span> <span class="hljs-keyword">rows</span> <span class="hljs-operator">|</span> Extra       <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+-------+-------------------+---------+---------+-------+------+-------------+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> SIMPLE      <span class="hljs-operator">|</span> t3    <span class="hljs-operator">|</span> const <span class="hljs-operator">|</span> <span class="hljs-keyword">PRIMARY</span>,idx_t3_id <span class="hljs-operator">|</span> <span class="hljs-keyword">PRIMARY</span> <span class="hljs-operator">|</span> <span class="hljs-number">4</span>       <span class="hljs-operator">|</span> const <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>        <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> SIMPLE      <span class="hljs-operator">|</span> t3    <span class="hljs-operator">|</span> const <span class="hljs-operator">|</span> <span class="hljs-keyword">PRIMARY</span>,idx_t3_id <span class="hljs-operator">|</span> <span class="hljs-keyword">PRIMARY</span> <span class="hljs-operator">|</span> <span class="hljs-number">4</span>       <span class="hljs-operator">|</span> const <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">Using</span> index <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+-------+-------------------+---------+---------+-------+------+-------------+</span><br><span class="hljs-number">2</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span><br></code></pre></td></tr></table></figure><h6 id="DERIVED"><a href="#DERIVED" class="headerlink" title="DERIVED"></a>DERIVED</h6><p>派生表的select（from子句的子查询）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs SQL">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t3 <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">3952602</span>);<br><span class="hljs-number">1248</span> <span class="hljs-operator">-</span> <span class="hljs-keyword">Every</span> derived <span class="hljs-keyword">table</span> must have its own alias<br><br><br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t3 <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">3952602</span>) a;<br><span class="hljs-operator">+</span><span class="hljs-comment">---------+-------+</span><br><span class="hljs-operator">|</span> id      <span class="hljs-operator">|</span> other <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------+-------+</span><br><span class="hljs-operator">|</span> <span class="hljs-number">3952602</span> <span class="hljs-operator">|</span> sth   <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------+-------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span><br><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br>mysql<span class="hljs-operator">&gt;</span> explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t3 <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">3952602</span>) a;<br><span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+------------+--------+-------------------+---------+---------+-------+------+-------+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> select_type <span class="hljs-operator">|</span> <span class="hljs-keyword">table</span>      <span class="hljs-operator">|</span> type   <span class="hljs-operator">|</span> possible_keys     <span class="hljs-operator">|</span> key     <span class="hljs-operator">|</span> key_len <span class="hljs-operator">|</span> <span class="hljs-keyword">ref</span>   <span class="hljs-operator">|</span> <span class="hljs-keyword">rows</span> <span class="hljs-operator">|</span> Extra <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+------------+--------+-------------------+---------+---------+-------+------+-------+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">PRIMARY</span>     <span class="hljs-operator">|</span> <span class="hljs-operator">&lt;</span>derived2<span class="hljs-operator">&gt;</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">system</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>              <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>  <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>  <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">2</span> <span class="hljs-operator">|</span> DERIVED     <span class="hljs-operator">|</span> t3         <span class="hljs-operator">|</span> const  <span class="hljs-operator">|</span> <span class="hljs-keyword">PRIMARY</span>,idx_t3_id <span class="hljs-operator">|</span> <span class="hljs-keyword">PRIMARY</span> <span class="hljs-operator">|</span> <span class="hljs-number">4</span>       <span class="hljs-operator">|</span> const <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>  <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+------------+--------+-------------------+---------+---------+-------+------+-------+</span><br><span class="hljs-number">2</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span><br></code></pre></td></tr></table></figure><h4 id="table"><a href="#table" class="headerlink" title="table"></a>table</h4><p>该行数据是关于哪张表的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t3 <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">3952602</span>) a) b;<br><span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+------------+--------+-------------------+---------+---------+-------+------+-------+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> select_type <span class="hljs-operator">|</span> <span class="hljs-keyword">table</span>      <span class="hljs-operator">|</span> type   <span class="hljs-operator">|</span> possible_keys     <span class="hljs-operator">|</span> key     <span class="hljs-operator">|</span> key_len <span class="hljs-operator">|</span> <span class="hljs-keyword">ref</span>   <span class="hljs-operator">|</span> <span class="hljs-keyword">rows</span> <span class="hljs-operator">|</span> Extra <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+------------+--------+-------------------+---------+---------+-------+------+-------+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">PRIMARY</span>     <span class="hljs-operator">|</span> <span class="hljs-operator">&lt;</span>derived2<span class="hljs-operator">&gt;</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">system</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>              <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>  <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>  <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">2</span> <span class="hljs-operator">|</span> DERIVED     <span class="hljs-operator">|</span> <span class="hljs-operator">&lt;</span>derived3<span class="hljs-operator">&gt;</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">system</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>              <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>  <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>  <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">3</span> <span class="hljs-operator">|</span> DERIVED     <span class="hljs-operator">|</span> t3         <span class="hljs-operator">|</span> const  <span class="hljs-operator">|</span> <span class="hljs-keyword">PRIMARY</span>,idx_t3_id <span class="hljs-operator">|</span> <span class="hljs-keyword">PRIMARY</span> <span class="hljs-operator">|</span> <span class="hljs-number">4</span>       <span class="hljs-operator">|</span> const <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>  <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+------------+--------+-------------------+---------+---------+-------+------+-------+</span><br><span class="hljs-number">3</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span><br></code></pre></td></tr></table></figure><h4 id="type"><a href="#type" class="headerlink" title="type"></a>type</h4><p>重要指标，查询类型&#x2F;访问类型</p><p>从好到坏依次是：</p><p><strong>system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL</strong></p><p>一般来说，得保证查询至少达到range级别，最好能达到ref</p><h6 id="null"><a href="#null" class="headerlink" title="null"></a>null</h6><p>MySQL在优化过程中分解语句，执行时甚至不用访问表或索引</p><h6 id="system"><a href="#system" class="headerlink" title="system"></a>system</h6><p>system是const连接类型的一个特例，即当查询的表中仅有一行满足条件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t3 <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">3952602</span>) a;<br><span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+------------+--------+-------------------+---------+---------+-------+------+-------+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> select_type <span class="hljs-operator">|</span> <span class="hljs-keyword">table</span>      <span class="hljs-operator">|</span> type   <span class="hljs-operator">|</span> possible_keys     <span class="hljs-operator">|</span> key     <span class="hljs-operator">|</span> key_len <span class="hljs-operator">|</span> <span class="hljs-keyword">ref</span>   <span class="hljs-operator">|</span> <span class="hljs-keyword">rows</span> <span class="hljs-operator">|</span> Extra <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+------------+--------+-------------------+---------+---------+-------+------+-------+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">PRIMARY</span>     <span class="hljs-operator">|</span> <span class="hljs-operator">&lt;</span>derived2<span class="hljs-operator">&gt;</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">system</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>              <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>  <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>  <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">2</span> <span class="hljs-operator">|</span> DERIVED     <span class="hljs-operator">|</span> t3         <span class="hljs-operator">|</span> const  <span class="hljs-operator">|</span> <span class="hljs-keyword">PRIMARY</span>,idx_t3_id <span class="hljs-operator">|</span> <span class="hljs-keyword">PRIMARY</span> <span class="hljs-operator">|</span> <span class="hljs-number">4</span>       <span class="hljs-operator">|</span> const <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>  <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+------------+--------+-------------------+---------+---------+-------+------+-------+</span><br><span class="hljs-number">2</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span><br></code></pre></td></tr></table></figure><h6 id="const"><a href="#const" class="headerlink" title="const"></a>const</h6><p>表最多有一个匹配行，它将在查询开始时被读取。因为仅有一行，在这行的列值可被优化器剩余部分认为是常数。const表很快，因为只读取一次</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t3 <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">3952602</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+-------+-------------------+---------+---------+-------+------+-------+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> select_type <span class="hljs-operator">|</span> <span class="hljs-keyword">table</span> <span class="hljs-operator">|</span> type  <span class="hljs-operator">|</span> possible_keys     <span class="hljs-operator">|</span> key     <span class="hljs-operator">|</span> key_len <span class="hljs-operator">|</span> <span class="hljs-keyword">ref</span>   <span class="hljs-operator">|</span> <span class="hljs-keyword">rows</span> <span class="hljs-operator">|</span> Extra <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+-------+-------------------+---------+---------+-------+------+-------+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> SIMPLE      <span class="hljs-operator">|</span> t3    <span class="hljs-operator">|</span> const <span class="hljs-operator">|</span> <span class="hljs-keyword">PRIMARY</span>,idx_t3_id <span class="hljs-operator">|</span> <span class="hljs-keyword">PRIMARY</span> <span class="hljs-operator">|</span> <span class="hljs-number">4</span>       <span class="hljs-operator">|</span> const <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>  <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+-------+-------------------+---------+---------+-------+------+-------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span><br></code></pre></td></tr></table></figure><h6 id="eq-ref"><a href="#eq-ref" class="headerlink" title="eq_ref"></a>eq_ref</h6><p>唯一性索引扫描，对于每个索引键，表中只有一条记录与之匹配。常见于主键或唯一索引扫描</p><p>对于每个来自前面的表的行组合，从该表中读取一行。是除了const最好的连接类型，用在一个索引的所有部分被连接使用并且索引是UNIQUE或PRIMARY KEY</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t3,t4 <span class="hljs-keyword">where</span> t3.id <span class="hljs-operator">=</span> t4.accountId;<br><span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+--------+-------------------+---------+---------+-----------------+------+-------+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> select_type <span class="hljs-operator">|</span> <span class="hljs-keyword">table</span> <span class="hljs-operator">|</span> type   <span class="hljs-operator">|</span> possible_keys     <span class="hljs-operator">|</span> key     <span class="hljs-operator">|</span> key_len <span class="hljs-operator">|</span> <span class="hljs-keyword">ref</span>             <span class="hljs-operator">|</span> <span class="hljs-keyword">rows</span> <span class="hljs-operator">|</span> Extra <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+--------+-------------------+---------+---------+-----------------+------+-------+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> SIMPLE      <span class="hljs-operator">|</span> t3    <span class="hljs-operator">|</span> <span class="hljs-keyword">ALL</span>    <span class="hljs-operator">|</span> <span class="hljs-keyword">PRIMARY</span>,idx_t3_id <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>            <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>  <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> SIMPLE      <span class="hljs-operator">|</span> t4    <span class="hljs-operator">|</span> eq_ref <span class="hljs-operator">|</span> <span class="hljs-keyword">PRIMARY</span>           <span class="hljs-operator">|</span> <span class="hljs-keyword">PRIMARY</span> <span class="hljs-operator">|</span> <span class="hljs-number">4</span>       <span class="hljs-operator">|</span> localtest.t3.id <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>  <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+--------+-------------------+---------+---------+-----------------+------+-------+</span><br><span class="hljs-number">2</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span><br></code></pre></td></tr></table></figure><h6 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h6><p>非唯一性索引扫描，返回匹配某个单独值的所有行。常见于使用非唯一索引及唯一索引的非唯一前缀进行的查找</p><h6 id="ref-or-null"><a href="#ref-or-null" class="headerlink" title="ref_or_null"></a>ref_or_null</h6><p>该类型如同ref，但是添加了MySQL可以专门搜索包含null值的行</p><h6 id="index-merge"><a href="#index-merge" class="headerlink" title="index_merge"></a>index_merge</h6><p>该连接类型表示使用了索引合并优化方法。这种情况下，key列包含了使用的索引清单，key_len包含了使用的索引最长的关键元素</p><h6 id="unique-subquery"><a href="#unique-subquery" class="headerlink" title="unique_subquery"></a>unique_subquery</h6><p>子查询中的返回结果字段组合是主键或唯一索引，可以完全替换子查询，效率更高</p><h6 id="index-subquery"><a href="#index-subquery" class="headerlink" title="index_subquery"></a>index_subquery</h6><p>类似于unique_subquery，可以替换IN子查询，但只适合子查询中的返回结果字段组合是非唯一索引</p><h6 id="range"><a href="#range" class="headerlink" title="range"></a>range</h6><p>只检索给定范围的行，使用一个索引来选择行。</p><p>key显示使用了哪个索引，key_len包含所使用索引的最长关键元素。</p><p>在该类型中的ref列为null</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t3 <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">3952602</span> <span class="hljs-keyword">or</span> id <span class="hljs-operator">=</span> <span class="hljs-number">3952603</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+-------+-------------------+---------+---------+------+------+-------------+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> select_type <span class="hljs-operator">|</span> <span class="hljs-keyword">table</span> <span class="hljs-operator">|</span> type  <span class="hljs-operator">|</span> possible_keys     <span class="hljs-operator">|</span> key     <span class="hljs-operator">|</span> key_len <span class="hljs-operator">|</span> <span class="hljs-keyword">ref</span>  <span class="hljs-operator">|</span> <span class="hljs-keyword">rows</span> <span class="hljs-operator">|</span> Extra       <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+-------+-------------------+---------+---------+------+------+-------------+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> SIMPLE      <span class="hljs-operator">|</span> t3    <span class="hljs-operator">|</span> <span class="hljs-keyword">range</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">PRIMARY</span>,idx_t3_id <span class="hljs-operator">|</span> <span class="hljs-keyword">PRIMARY</span> <span class="hljs-operator">|</span> <span class="hljs-number">4</span>       <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span>    <span class="hljs-number">2</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">Using</span> <span class="hljs-keyword">where</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+-------+-------------------+---------+---------+------+------+-------------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span><br></code></pre></td></tr></table></figure><h6 id="index"><a href="#index" class="headerlink" title="index"></a>index</h6><p>该连接类型与ALL相同，但只有索引树被扫描。通常比ALL快，因为索引文件通常比数据文件小</p><h6 id="ALL"><a href="#ALL" class="headerlink" title="ALL"></a>ALL</h6><p>对于每个来自于先前的表的行组合，进行完整的表扫描。</p><p>通常可以增加更多的索引而不要使用ALL</p><h4 id="possible-keys"><a href="#possible-keys" class="headerlink" title="possible_keys"></a>possible_keys</h4><p>指出MySQL能使用哪个索引在该表中找到行</p><p>如果是空的，则表示没有相关的索引。这时要提高性能，可通过检验WHERE子句，看是否它引用某些列或适合索引的列来提高查询性能。</p><h4 id="key"><a href="#key" class="headerlink" title="key"></a>key</h4><p>MySQL实际决定使用的键（索引）</p><p>若没有选择索引，值是null</p><p>若想强制MySQL使用或忽视possible_keys中的索引，查询中可用FORCE INDEX、USE INDEX、IGNORE INDEX</p><h4 id="key-len"><a href="#key-len" class="headerlink" title="key_len"></a>key_len</h4><p>MySQL决定使用的键长度，在不损失精确性的情况下，长度越短越好。特别注意这个值可以得出一个多重主键里mysql实际使用了哪一部分</p><h4 id="ref-1"><a href="#ref-1" class="headerlink" title="ref"></a>ref</h4><p>表示MySQL使用哪个列或常数与key一起从表中选择行</p><h4 id="rows"><a href="#rows" class="headerlink" title="rows"></a>rows</h4><p>MySQL认为其执行查询时必须检查的行数</p><h4 id="extra"><a href="#extra" class="headerlink" title="extra"></a>extra</h4><p>包含MySQL解决查询的详细信息</p><h6 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h6><p>一旦找到与行相联合匹配的行就不再搜索了</p><h6 id="not-exists"><a href="#not-exists" class="headerlink" title="not exists"></a>not exists</h6><p>MySQL优化了left join，一旦找到了匹配left join标准的行，就不再搜索了</p><h6 id="range-checked-for-each-Record-index-map"><a href="#range-checked-for-each-Record-index-map" class="headerlink" title="range checked for each Record(index map:#)"></a>range checked for each Record(index map:#)</h6><p>没有找到理想的索引，这是使用索引的最慢连接之一</p><h6 id="using-filesort"><a href="#using-filesort" class="headerlink" title="using filesort"></a>using filesort</h6><p>出现这种情况需要优化，因为MySQL需要进行额外的步骤来发现如何对返回的行排序。它根据连接类型以及存储排序键值和匹配条件的全部行的行指针来排序全部行。</p><h6 id="using-temporary"><a href="#using-temporary" class="headerlink" title="using temporary"></a>using temporary</h6><p>MySQL需要建立一个临时表来存储结果，通常发生在对不同的列集进行order by而不是group by上。</p><p>如果此信息显示Using filesort或者Using temporary的话会很吃力，WHERE和ORDER BY的索引经常无法兼顾，如果按照WHERE来确定索引，那么在ORDER BY时，就必然会引起Using filesort，这就要看是先过滤再排序划算，还是先排序再过滤划算。</p><h6 id="using-index"><a href="#using-index" class="headerlink" title="using index"></a>using index</h6><p>不读数据文件，只从索引文件获取数据</p><h6 id="Only-index"><a href="#Only-index" class="headerlink" title="Only index"></a>Only index</h6><p>这意味着信息只用索引树中的信息检索出的，这比扫描整个表要快。</p><h6 id="where-used"><a href="#where-used" class="headerlink" title="where used"></a>where used</h6><p>就是使用上了where限制。</p><p>如果是impossible where 表示用不着where，一般就是没查出来啥。</p><h3 id="END"><a href="#END" class="headerlink" title="END"></a>END</h3><p>这篇博客写了好几天，中间断断续续，东拼西凑，内容有待改进。参考了很多，但都找不到完整详细的解释，关于参考的实例都进行了本地验证，特此整理</p><p>主要参考链接：<a href="http://www.cnitblog.com/aliyiyi08/archive/2008/09/09/48878.html">http://www.cnitblog.com/aliyiyi08/archive/2008/09/09/48878.html</a></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于mysql中max函数和groupby联合使用的坑</title>
    <link href="/wilson-blog-hexo/2017/10/31/%E5%85%B3%E4%BA%8Emysql%E4%B8%ADmax%E5%87%BD%E6%95%B0%E5%92%8Cgroupby%E8%81%94%E5%90%88%E4%BD%BF%E7%94%A8%E7%9A%84%E5%9D%91/"/>
    <url>/wilson-blog-hexo/2017/10/31/%E5%85%B3%E4%BA%8Emysql%E4%B8%ADmax%E5%87%BD%E6%95%B0%E5%92%8Cgroupby%E8%81%94%E5%90%88%E4%BD%BF%E7%94%A8%E7%9A%84%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>关于朋友随手抛出的一段SQL，发现MySQL中关于max()和group by联合使用中的一个坑，特此整理。</p><span id="more"></span><p><img src="http://trigolds.com/yh1.png"><br>YH:老铁们，这段hql对不对啊</p><p>我扫了一眼，总觉得看着别扭，自己试着去掉字符串拼接，还原出SQL来看，依然感觉不对，然后自己试着写了查询，在本地建个表，造了些数据，用简化后的SQL做测试时，<br>当我定睛检查以下这句SQL</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> predictId, <span class="hljs-built_in">max</span>(evaluateDate) evalDate, productId <span class="hljs-keyword">from</span> productcashpredict <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> productId;<br></code></pre></td></tr></table></figure><p>抛出一个疑问，MySQL是从后往前执行，先分组再求分组结果中evaluateDate最大的记录呢？还是先找出evaluateDate的最大记录，再分组呢？</p><p>网上查了查，发现，都不是！这里有个坑！如果直接这么结合max和group by使用，查出的结果，除了求max的字段和分组条件productId字段，其他字段的值都是错的！</p><p>会是这样：<img src="http://trigolds.com/yh4.png"></p><p>首先我在本地验证了一下是不是的确如此</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs mysql">desc productcashpredict;<br><br>predictIdint(11)NOPRIauto_increment<br>evaluateDatedatetimeYESon update CURRENT_TIMESTAMP<br>othervarchar(255)YES<br>productIdint(11)YES<br><br>select * from productcashpredict<br><br>+-----------+---------------------+-------+-----------+<br>| predictId | evaluateDate        | other | productId |<br>+-----------+---------------------+-------+-----------+<br>|         1 | 2017-10-31 18:14:37 | NULL  |     10001 |<br>|         2 | 2017-10-31 18:14:45 | NULL  |     10002 |<br>|         3 | 2017-10-31 18:14:59 | NULL  |     10002 |<br>|         4 | 2017-10-31 18:15:09 | NULL  |     10003 |<br>|         5 | 2017-10-31 18:15:22 | NULL  |     10001 |<br>+-----------+---------------------+-------+-----------+<br><br><br>select predictId, max(evaluateDate) evalDate, productId from productcashpredict group by productId;<br><br>+-----------+---------------------+-----------+<br>| predictId | evalDate            | productId |<br>+-----------+---------------------+-----------+<br>|         1 | 2017-10-31 18:15:22 |     10001 |<br>|         2 | 2017-10-31 18:14:59 |     10002 |<br>|         4 | 2017-10-31 18:15:09 |     10003 |<br>+-----------+---------------------+-----------+<br><br></code></pre></td></tr></table></figure><p>直接这样查的确是错的，看predictId可以看出</p><p><img src="http://trigolds.com/yh3.png"></p><p>我们可以看出来，MySQL其实是把以下两种查询揉在了一起，结果的确是按照productId进行分组的，查询结果也是从取自分组后，排序则是默认按照主键排序，但evalDate也的确取的是每一个productId组内最大的那一项，但这样揉起来，数据就不对了。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">select</span> * from productcashpredict group by productId;<br><br><span class="hljs-attribute">1</span><span class="hljs-number">2017</span>-<span class="hljs-number">10</span>-<span class="hljs-number">31</span> <span class="hljs-number">18</span>:<span class="hljs-number">14</span>:<span class="hljs-number">37</span><span class="hljs-number">10001</span><br><span class="hljs-attribute">2</span><span class="hljs-number">2017</span>-<span class="hljs-number">10</span>-<span class="hljs-number">31</span> <span class="hljs-number">18</span>:<span class="hljs-number">14</span>:<span class="hljs-number">45</span><span class="hljs-number">10002</span><br><span class="hljs-attribute">4</span><span class="hljs-number">2017</span>-<span class="hljs-number">10</span>-<span class="hljs-number">31</span> <span class="hljs-number">18</span>:<span class="hljs-number">15</span>:<span class="hljs-number">09</span><span class="hljs-number">10003</span><br><br><span class="hljs-attribute">select</span> max(evaluateDate) evalDate, productId from productcashpredict;<br><br><span class="hljs-attribute">2017</span>-<span class="hljs-number">10</span>-<span class="hljs-number">31</span> <span class="hljs-number">18</span>:<span class="hljs-number">15</span>:<span class="hljs-number">22</span><span class="hljs-number">10001</span><br><br></code></pre></td></tr></table></figure><p>既然这样，那总得有解决方案，我又问了抛问者YH，他们实际的使用场景是怎么查的，他甩出一张图。<br>我看了半天，很是理解不了，至少觉得逻辑不甚清晰，我开始质疑这样查询的结果是否正确，于是又去寻求max和group by联合使用的正确写法，得到下面两种方案：</p><p>于是我又建了一张表，来模拟真实场景</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">desc product_cash_predict;<br><br>idint(11)NOPRIauto_increment<br>add_timedatetimeYESon update CURRENT_TIMESTAMP<br>deletedvarchar(255)YES<br>update_timedatetimeYESon update CURRENT_TIMESTAMP<br>versionvarchar(255)YES<br>evaluated_datedatetimeYESon update CURRENT_TIMESTAMP<br>othervarchar(255)YES<br>product_idint(11)YES<br><br>SELECT <span class="hljs-symbol">*</span> FROM `product_cash_predict`;<br><br>+----+----------+---------+-------------+---------+---------------------+-------+------------+<br>|<span class="hljs-string"> id </span>|<span class="hljs-string"> add_time </span>|<span class="hljs-string"> deleted </span>|<span class="hljs-string"> update_time </span>|<span class="hljs-string"> version </span>|<span class="hljs-string"> evaluated_date      </span>|<span class="hljs-string"> other </span>|<span class="hljs-string"> product_id </span>|<br>+----+----------+---------+-------------+---------+---------------------+-------+------------+<br>|<span class="hljs-string">  1 </span>|<span class="hljs-string"> NULL     </span>|<span class="hljs-string"> NULL    </span>|<span class="hljs-string"> NULL        </span>|<span class="hljs-string"> NULL    </span>|<span class="hljs-string"> 2017-10-31 18:14:37 </span>|<span class="hljs-string"> NULL  </span>|<span class="hljs-string">      10001 </span>|<br>|<span class="hljs-string">  2 </span>|<span class="hljs-string"> NULL     </span>|<span class="hljs-string"> NULL    </span>|<span class="hljs-string"> NULL        </span>|<span class="hljs-string"> NULL    </span>|<span class="hljs-string"> 2017-10-31 18:14:45 </span>|<span class="hljs-string"> NULL  </span>|<span class="hljs-string">      10002 </span>|<br>|<span class="hljs-string">  3 </span>|<span class="hljs-string"> NULL     </span>|<span class="hljs-string"> NULL    </span>|<span class="hljs-string"> NULL        </span>|<span class="hljs-string"> NULL    </span>|<span class="hljs-string"> 2017-10-31 18:14:59 </span>|<span class="hljs-string"> NULL  </span>|<span class="hljs-string">      10002 </span>|<br>|<span class="hljs-string">  4 </span>|<span class="hljs-string"> NULL     </span>|<span class="hljs-string"> NULL    </span>|<span class="hljs-string"> NULL        </span>|<span class="hljs-string"> NULL    </span>|<span class="hljs-string"> 2017-10-31 18:15:09 </span>|<span class="hljs-string"> NULL  </span>|<span class="hljs-string">      10003 </span>|<br>|<span class="hljs-string">  5 </span>|<span class="hljs-string"> NULL     </span>|<span class="hljs-string"> NULL    </span>|<span class="hljs-string"> NULL        </span>|<span class="hljs-string"> NULL    </span>|<span class="hljs-string"> 2017-10-31 18:15:22 </span>|<span class="hljs-string"> NULL  </span>|<span class="hljs-string">      10001 </span>|<br>+----+----------+---------+-------------+---------+---------------------+-------+------------+<br></code></pre></td></tr></table></figure><p>先按YH的业务场景查询方式查一下：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">SELECT<br>p2.<span class="hljs-symbol">*</span><br>FROM<br>(<br>SELECT<br>max(evaluated_date) evaluated_date,<br>product_id<br>FROM<br>product_cash_predict<br>GROUP BY<br>product_id<br>) p1<br>LEFT JOIN product_cash_predict p2 ON p1.product_id = p2.product_id<br>AND p1.evaluated_date = p2.evaluated_date<br><br>-- 0.034s<br>--<br>+----+----------+---------+-------------+---------+---------------------+-------+------------+<br>|<span class="hljs-string"> id </span>|<span class="hljs-string"> add_time </span>|<span class="hljs-string"> deleted </span>|<span class="hljs-string"> update_time </span>|<span class="hljs-string"> version </span>|<span class="hljs-string"> evaluated_date      </span>|<span class="hljs-string"> other </span>|<span class="hljs-string"> product_id </span>|<br>+----+----------+---------+-------------+---------+---------------------+-------+------------+<br>|<span class="hljs-string">  3 </span>|<span class="hljs-string"> NULL     </span>|<span class="hljs-string"> NULL    </span>|<span class="hljs-string"> NULL        </span>|<span class="hljs-string"> NULL    </span>|<span class="hljs-string"> 2017-10-31 18:14:59 </span>|<span class="hljs-string"> NULL  </span>|<span class="hljs-string">      10002 </span>|<br>|<span class="hljs-string">  4 </span>|<span class="hljs-string"> NULL     </span>|<span class="hljs-string"> NULL    </span>|<span class="hljs-string"> NULL        </span>|<span class="hljs-string"> NULL    </span>|<span class="hljs-string"> 2017-10-31 18:15:09 </span>|<span class="hljs-string"> NULL  </span>|<span class="hljs-string">      10003 </span>|<br>|<span class="hljs-string">  5 </span>|<span class="hljs-string"> NULL     </span>|<span class="hljs-string"> NULL    </span>|<span class="hljs-string"> NULL        </span>|<span class="hljs-string"> NULL    </span>|<span class="hljs-string"> 2017-10-31 18:15:22 </span>|<span class="hljs-string"> NULL  </span>|<span class="hljs-string">      10001 </span>|<br>+----+----------+---------+-------------+---------+---------------------+-------+------------+<br></code></pre></td></tr></table></figure><p>那么这个结果对不对呢</p><p>先来看一下错误的查询方式：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">select</span> id, add_time, deleted, update_time, version, max(evaluated_date) evalDate, other, product_id from product_cash_predict group by product_id;<br><span class="hljs-attribute">1</span><span class="hljs-number">2017</span>-<span class="hljs-number">10</span>-<span class="hljs-number">31</span> <span class="hljs-number">18</span>:<span class="hljs-number">15</span>:<span class="hljs-number">22</span><span class="hljs-number">10001</span><br><span class="hljs-attribute">2</span><span class="hljs-number">2017</span>-<span class="hljs-number">10</span>-<span class="hljs-number">31</span> <span class="hljs-number">18</span>:<span class="hljs-number">14</span>:<span class="hljs-number">59</span><span class="hljs-number">10002</span><br><span class="hljs-attribute">4</span><span class="hljs-number">2017</span>-<span class="hljs-number">10</span>-<span class="hljs-number">31</span> <span class="hljs-number">18</span>:<span class="hljs-number">15</span>:<span class="hljs-number">09</span><span class="hljs-number">10003</span><br><br></code></pre></td></tr></table></figure><p>由于数据量少，上面查询的错误肉眼可以用识别</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><br><span class="hljs-comment">-- 解决方案一：先排序再分组</span><br><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> product_cash_predict <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> evaluated_date <span class="hljs-keyword">desc</span><br><br><span class="hljs-number">5</span><span class="hljs-number">2017</span><span class="hljs-number">-10</span><span class="hljs-number">-31</span> <span class="hljs-number">18</span>:<span class="hljs-number">15</span>:<span class="hljs-number">22</span><span class="hljs-number">10001</span><br><span class="hljs-number">4</span><span class="hljs-number">2017</span><span class="hljs-number">-10</span><span class="hljs-number">-31</span> <span class="hljs-number">18</span>:<span class="hljs-number">15</span>:<span class="hljs-number">09</span><span class="hljs-number">10003</span><br><span class="hljs-number">3</span><span class="hljs-number">2017</span><span class="hljs-number">-10</span><span class="hljs-number">-31</span> <span class="hljs-number">18</span>:<span class="hljs-number">14</span>:<span class="hljs-number">59</span><span class="hljs-number">10002</span><br><span class="hljs-number">2</span><span class="hljs-number">2017</span><span class="hljs-number">-10</span><span class="hljs-number">-31</span> <span class="hljs-number">18</span>:<span class="hljs-number">14</span>:<span class="hljs-number">45</span><span class="hljs-number">10002</span><br><span class="hljs-number">1</span><span class="hljs-number">2017</span><span class="hljs-number">-10</span><span class="hljs-number">-31</span> <span class="hljs-number">18</span>:<span class="hljs-number">14</span>:<span class="hljs-number">37</span><span class="hljs-number">10001</span><br><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> product_cash_predict <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> evaluated_date <span class="hljs-keyword">desc</span>) <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> product_id;<br><span class="hljs-comment">--  Every derived table must have its own alias（衍生表需要有其自己的别名）</span><br><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> product_cash_predict <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> evaluated_date <span class="hljs-keyword">desc</span>) <span class="hljs-keyword">as</span> result <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> product_id;<br><br><span class="hljs-comment">-- 正确结果</span><br><span class="hljs-number">5</span><span class="hljs-number">2017</span><span class="hljs-number">-10</span><span class="hljs-number">-31</span> <span class="hljs-number">18</span>:<span class="hljs-number">15</span>:<span class="hljs-number">22</span><span class="hljs-number">10001</span><br><span class="hljs-number">3</span><span class="hljs-number">2017</span><span class="hljs-number">-10</span><span class="hljs-number">-31</span> <span class="hljs-number">18</span>:<span class="hljs-number">14</span>:<span class="hljs-number">59</span><span class="hljs-number">10002</span><br><span class="hljs-number">4</span><span class="hljs-number">2017</span><span class="hljs-number">-10</span><span class="hljs-number">-31</span> <span class="hljs-number">18</span>:<span class="hljs-number">15</span>:<span class="hljs-number">09</span><span class="hljs-number">10003</span><br><span class="hljs-comment">-- 0.025s</span><br><span class="hljs-comment">-- 0.025s</span><br><span class="hljs-comment">-- 0.027s</span><br><br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">-- 解决方案二：看上去很费解</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> product_cash_predict p <span class="hljs-keyword">where</span> p.evaluated_date<br>=<br>(<span class="hljs-keyword">select</span> max(evaluated_date) <span class="hljs-keyword">from</span> product_cash_predict <span class="hljs-keyword">where</span> p.product_id = product_id)<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> product_id;<br><br><span class="hljs-number">5</span><span class="hljs-number">2017</span><span class="hljs-number">-10</span><span class="hljs-number">-31</span> <span class="hljs-number">18</span>:<span class="hljs-number">15</span>:<span class="hljs-number">22</span><span class="hljs-number">10001</span><br><span class="hljs-number">3</span><span class="hljs-number">2017</span><span class="hljs-number">-10</span><span class="hljs-number">-31</span> <span class="hljs-number">18</span>:<span class="hljs-number">14</span>:<span class="hljs-number">59</span><span class="hljs-number">10002</span><br><span class="hljs-number">4</span><span class="hljs-number">2017</span><span class="hljs-number">-10</span><span class="hljs-number">-31</span> <span class="hljs-number">18</span>:<span class="hljs-number">15</span>:<span class="hljs-number">09</span><span class="hljs-number">10003</span><br><br><span class="hljs-comment">-- 0.028s</span><br><span class="hljs-comment">-- 0.019s</span><br><span class="hljs-comment">-- 0.025s</span><br><br><br></code></pre></td></tr></table></figure><p>最后，也就是YH实际业务场景的处理方式再来回顾分析一波</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">-- 解决方案三：自连接，根据max结合group by查出最大日期和分组条件product_id，再自连接查出该product_id对应的其他字段</span><br><br><span class="hljs-comment">-- 只查最大日期和分组条件product_id，若查其他字段则为不准的数据（group by取分组第一条）</span><br><span class="hljs-keyword">select</span> max(evaluated_date) evalDate, product_id <span class="hljs-keyword">from</span> product_cash_predict <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> product_id<br><br><span class="hljs-number">2017</span><span class="hljs-number">-10</span><span class="hljs-number">-31</span> <span class="hljs-number">18</span>:<span class="hljs-number">15</span>:<span class="hljs-number">22</span><span class="hljs-number">10001</span><br><span class="hljs-number">2017</span><span class="hljs-number">-10</span><span class="hljs-number">-31</span> <span class="hljs-number">18</span>:<span class="hljs-number">14</span>:<span class="hljs-number">59</span><span class="hljs-number">10002</span><br><span class="hljs-number">2017</span><span class="hljs-number">-10</span><span class="hljs-number">-31</span> <span class="hljs-number">18</span>:<span class="hljs-number">15</span>:<span class="hljs-number">09</span><span class="hljs-number">10003</span><br><br><span class="hljs-comment">-- 把查出的结果作为p1集</span><br><span class="hljs-keyword">select</span> p1.* <span class="hljs-keyword">from</span> (<br><span class="hljs-keyword">select</span> max(evaluated_date) evalDate, product_id <span class="hljs-keyword">from</span> product_cash_predict <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> product_id<br>) p1;<br><br><span class="hljs-comment">-- 然后从根据此结果自连接后查出的结果中取真是的记录值</span><br><span class="hljs-keyword">select</span> p2.* <span class="hljs-keyword">from</span> (<br><span class="hljs-keyword">select</span> max(evaluated_date) evalDate, product_id <span class="hljs-keyword">from</span> product_cash_predict <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> product_id<br>) p1 <span class="hljs-keyword">LEFT JOIN</span> product_cash_predict p2 <span class="hljs-keyword">on</span> p1.product_id = p2.product_id <span class="hljs-keyword">and</span> p1.evalDate = p2.evaluated_date;<br><br><span class="hljs-number">3</span><span class="hljs-number">2017</span><span class="hljs-number">-10</span><span class="hljs-number">-31</span> <span class="hljs-number">18</span>:<span class="hljs-number">14</span>:<span class="hljs-number">59</span><span class="hljs-number">10002</span><br><span class="hljs-number">4</span><span class="hljs-number">2017</span><span class="hljs-number">-10</span><span class="hljs-number">-31</span> <span class="hljs-number">18</span>:<span class="hljs-number">15</span>:<span class="hljs-number">09</span><span class="hljs-number">10003</span><br><span class="hljs-number">5</span><span class="hljs-number">2017</span><span class="hljs-number">-10</span><span class="hljs-number">-31</span> <span class="hljs-number">18</span>:<span class="hljs-number">15</span>:<span class="hljs-number">22</span><span class="hljs-number">10001</span><br></code></pre></td></tr></table></figure><h3 id="性能比较"><a href="#性能比较" class="headerlink" title="性能比较"></a>性能比较</h3><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs coq">explain select * from (select * from product_cash_predict ORDER BY evaluated_date desc) <span class="hljs-built_in">as</span> result group <span class="hljs-built_in">by</span> product_id;<br><br>+----+-------------+----------------------+------+---------------+------+---------+------+------+---------------------------------+<br>| <span class="hljs-type">id</span> | <span class="hljs-type">select_type</span> | <span class="hljs-type">table</span>                | <span class="hljs-type">type</span> | <span class="hljs-type">possible_keys</span> | <span class="hljs-type">key</span>  | <span class="hljs-type">key_len</span> | <span class="hljs-type">ref</span>  | <span class="hljs-type">rows</span> | <span class="hljs-type">Extra</span>                           |<br><span class="hljs-type">+----+-------------+----------------------+------+---------------+------+---------+------+------+---------------------------------+</span><br><span class="hljs-type">|  1</span> | <span class="hljs-type">PRIMARY</span>     | <span class="hljs-type">&lt;derived2</span>&gt;           | <span class="hljs-type">ALL</span>  | <span class="hljs-type">NULL</span>          | <span class="hljs-type">NULL</span> | <span class="hljs-type">NULL</span>    | <span class="hljs-type">NULL</span> |    <span class="hljs-type">5</span> | <span class="hljs-type">Using</span> temporary; Using filesort |<br><span class="hljs-type">|  2</span> | <span class="hljs-type">DERIVED</span>     | <span class="hljs-type">product_cash_predict</span> | <span class="hljs-type">ALL</span>  | <span class="hljs-type">NULL</span>          | <span class="hljs-type">NULL</span> | <span class="hljs-type">NULL</span>    | <span class="hljs-type">NULL</span> |    <span class="hljs-type">5</span> | <span class="hljs-type">Using</span> filesort                  |<br><span class="hljs-type">+----+-------------+----------------------+------+---------------+------+---------+------+------+---------------------------------+</span><br><span class="hljs-type"></span><br><span class="hljs-type">explain</span> select * from product_cash_predict p <span class="hljs-keyword">where</span> p.evaluated_date =<br>(select max(evaluated_date) from product_cash_predict <span class="hljs-keyword">where</span> p.product_id = product_id)<br>group <span class="hljs-built_in">by</span> product_id;<br><br>+----+--------------------+----------------------+------+---------------+------+---------+------+------+----------------------------------------------+<br>| <span class="hljs-type">id</span> | <span class="hljs-type">select_type</span>        | <span class="hljs-type">table</span>                | <span class="hljs-type">type</span> | <span class="hljs-type">possible_keys</span> | <span class="hljs-type">key</span>  | <span class="hljs-type">key_len</span> | <span class="hljs-type">ref</span>  | <span class="hljs-type">rows</span> | <span class="hljs-type">Extra</span>                                        |<br><span class="hljs-type">+----+--------------------+----------------------+------+---------------+------+---------+------+------+----------------------------------------------+</span><br><span class="hljs-type">|  1</span> | <span class="hljs-type">PRIMARY</span>            | <span class="hljs-type">p</span>                    | <span class="hljs-type">ALL</span>  | <span class="hljs-type">NULL</span>          | <span class="hljs-type">NULL</span> | <span class="hljs-type">NULL</span>    | <span class="hljs-type">NULL</span> |    <span class="hljs-type">5</span> | <span class="hljs-type">Using</span> <span class="hljs-keyword">where</span>; Using temporary; Using filesort |<br><span class="hljs-type">|  2</span> | <span class="hljs-type">DEPENDENT</span> SUBQUERY | <span class="hljs-type">product_cash_predict</span> | <span class="hljs-type">ALL</span>  | <span class="hljs-type">NULL</span>          | <span class="hljs-type">NULL</span> | <span class="hljs-type">NULL</span>    | <span class="hljs-type">NULL</span> |    <span class="hljs-type">5</span> | <span class="hljs-type">Using</span> <span class="hljs-keyword">where</span>                                  |<br><span class="hljs-type">+----+--------------------+----------------------+------+---------------+------+---------+------+------+----------------------------------------------+</span><br><span class="hljs-type"></span><br><span class="hljs-type">explain</span> select p2.* from (<br>select max(evaluated_date) evalDate, product_id from product_cash_predict GROUP BY product_id<br>) p1 LEFT JOIN product_cash_predict p2 on p1.product_id = p2.product_id and p1.evalDate = p2.evaluated_date;<br><br>+----+-------------+----------------------+------+---------------+------+---------+------+------+----------------------------------------------------+<br>| <span class="hljs-type">id</span> | <span class="hljs-type">select_type</span> | <span class="hljs-type">table</span>                | <span class="hljs-type">type</span> | <span class="hljs-type">possible_keys</span> | <span class="hljs-type">key</span>  | <span class="hljs-type">key_len</span> | <span class="hljs-type">ref</span>  | <span class="hljs-type">rows</span> | <span class="hljs-type">Extra</span>                                              |<br><span class="hljs-type">+----+-------------+----------------------+------+---------------+------+---------+------+------+----------------------------------------------------+</span><br><span class="hljs-type">|  1</span> | <span class="hljs-type">PRIMARY</span>     | <span class="hljs-type">&lt;derived2</span>&gt;           | <span class="hljs-type">ALL</span>  | <span class="hljs-type">NULL</span>          | <span class="hljs-type">NULL</span> | <span class="hljs-type">NULL</span>    | <span class="hljs-type">NULL</span> |    <span class="hljs-type">5</span> | <span class="hljs-type">NULL</span>                                               |<br><span class="hljs-type">|  1</span> | <span class="hljs-type">PRIMARY</span>     | <span class="hljs-type">p2</span>                   | <span class="hljs-type">ALL</span>  | <span class="hljs-type">NULL</span>          | <span class="hljs-type">NULL</span> | <span class="hljs-type">NULL</span>    | <span class="hljs-type">NULL</span> |    <span class="hljs-type">5</span> | <span class="hljs-type">Using</span> <span class="hljs-keyword">where</span>; Using join buffer (Block Nested Loop) |<br><span class="hljs-type">|  2</span> | <span class="hljs-type">DERIVED</span>     | <span class="hljs-type">product_cash_predict</span> | <span class="hljs-type">ALL</span>  | <span class="hljs-type">NULL</span>          | <span class="hljs-type">NULL</span> | <span class="hljs-type">NULL</span>    | <span class="hljs-type">NULL</span> |    <span class="hljs-type">5</span> | <span class="hljs-type">Using</span> temporary; Using filesort                    |<br><span class="hljs-type">+----+-------------+----------------------+------+---------------+------+---------+------+------+----------------------------------------------------+</span><br><span class="hljs-type"></span><br></code></pre></td></tr></table></figure><h3 id="END"><a href="#END" class="headerlink" title="END"></a>END</h3><p>致谢：问题提出者，同时也是本文校对者@YH</p><p>总结：虽然可能这只是SQL查询中的一个小知识点，但不经分析，直接使用，可能会给业务带来不必要的坑，正所谓磨刀不误砍柴工，对常用技术的深入理解应该成为一个技术人的日常习惯。</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从谷歌&quot;名猿&quot;Addy Osmani一行代码中学到的东西</title>
    <link href="/wilson-blog-hexo/2017/10/17/%E4%BB%8E%E8%B0%B7%E6%AD%8C%E5%90%8D%E7%8C%BFAddy%20Osmani%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E4%B8%AD%E5%AD%A6%E5%88%B0%E7%9A%84%E4%B8%9C%E8%A5%BF/"/>
    <url>/wilson-blog-hexo/2017/10/17/%E4%BB%8E%E8%B0%B7%E6%AD%8C%E5%90%8D%E7%8C%BFAddy%20Osmani%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E4%B8%AD%E5%AD%A6%E5%88%B0%E7%9A%84%E4%B8%9C%E8%A5%BF/</url>
    
    <content type="html"><![CDATA[<p>谷歌某大佬通过一行知识量包含极丰富的js代码实现了一个魔法小功能：</p><p>给页面所有元素加一个彩色外边框</p><span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[].<span class="hljs-property">forEach</span>.<span class="hljs-title function_">call</span>($$(<span class="hljs-string">&quot;*&quot;</span>),<span class="hljs-keyword">function</span>(<span class="hljs-params">a</span>)&#123;<br>  a.<span class="hljs-property">style</span>.<span class="hljs-property">outline</span>=<span class="hljs-string">&quot;1px solid #&quot;</span>+(~~(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*(<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">24</span>))).<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>单行形式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[].<span class="hljs-property">forEach</span>.<span class="hljs-title function_">call</span>($$(<span class="hljs-string">&quot;*&quot;</span>),<span class="hljs-keyword">function</span>(<span class="hljs-params">a</span>)&#123;a.<span class="hljs-property">style</span>.<span class="hljs-property">outline</span>=<span class="hljs-string">&quot;1px solid #&quot;</span>+(~~(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*(<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">24</span>))).<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>)&#125;)<br></code></pre></td></tr></table></figure><p>将其贴到chrome的console中即可看到效果</p><h3 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$$(<span class="hljs-string">&quot;*&quot;</span>)<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;*&#x27;</span>)<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">all</span><br></code></pre></td></tr></table></figure><p>以上三种写法是相同效果，都相当于通过选择器的方式获取页面所有元素。第三种是较不规范的方式，不建议使用。$$是现代浏览器API的一部分，比如$$(‘a’)可以获取页面所有的a标签元素</p><p>接下来，通过上面选择器获取到的是一个NodeList，是一种类似于数组Array，但它并未实现很多Array的接口，所以不能使用$$(‘*’).forEach来遍历结果，类似的还有arguments，也是类似于Array，但并不是数组</p><p>这时需要通过call()或者apply()可以使得非数组对象来调用数组的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[].<span class="hljs-property">forEach</span>.<span class="hljs-title function_">call</span>( $$(<span class="hljs-string">&#x27;*&#x27;</span>), <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;&#125;);<br></code></pre></td></tr></table></figure><p>以上即实现了遍历页面的每一个元素，并可以将获得的非数组元素使用数组的遍历方法来取到每一个元素e</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">a.<span class="hljs-property">style</span>.<span class="hljs-property">outline</span>=<span class="hljs-string">&quot;1px solid #&quot;</span>+color<br></code></pre></td></tr></table></figure><p>outline是CSS的一个属性，它是在CSS盒模型以外，所以它不会影响元素的size以及元素在larout中的position</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">color = (~~(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*(<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">24</span>))).<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>);<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>&lt;&lt;<span class="hljs-number">24</span> == <span class="hljs-number">1</span>左移<span class="hljs-number">24</span>位 == <span class="hljs-number">2</span>^<span class="hljs-number">24</span> == <span class="hljs-number">16777216</span><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">parseInt</span>(<span class="hljs-string">&quot;ffffff&quot;</span>, <span class="hljs-number">16</span>) == <span class="hljs-number">16777215</span> = <span class="hljs-number">16777216</span> - <span class="hljs-number">1</span> = <span class="hljs-number">2</span>^<span class="hljs-number">24</span> - <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>Math.random()得到的是0.0~1.0之间的伪随机数</p><p>Math.random() * (1&lt;&lt;24)得到0.0~16777216.0之间的随机浮点数</p><p><del>操作符(tlide operator)可将一个变量按位取反，使用</del>操作符可以得到浮点数的整数部分，此处用~~达到parseInt的效果</p><p>toString(16)可将变量转换为16进制的数</p><p>综上：(~~(Math.random()*(1&lt;&lt;24)).toString(16))可以获得(000000,ffffff)之间的一种随机颜色</p><h3 id="END"><a href="#END" class="headerlink" title="END"></a>END</h3><p>附上大佬的博客**<a href="https://addyosmani.com/blog/">Addy Osmani</a>**并献上双膝</p><p>以及本文学习源<strong><a href="http://arqex.com/939/learning-much-javascript-one-line-code">http://arqex.com/939/learning-much-javascript-one-line-code</a></strong></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>atom实现html实时预览</title>
    <link href="/wilson-blog-hexo/2017/10/16/atom%E5%AE%9E%E7%8E%B0html%E5%AE%9E%E6%97%B6%E9%A2%84%E8%A7%88/"/>
    <url>/wilson-blog-hexo/2017/10/16/atom%E5%AE%9E%E7%8E%B0html%E5%AE%9E%E6%97%B6%E9%A2%84%E8%A7%88/</url>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>atom自带markdown实时预览插件，但当我想用atom进行进端开发并取代webstorm这样的收费IDE时，我发现基于文件进行操作的编辑器atom只能高亮显示html、js这样的文件，但不能实时显示进行调试，很不方便。</p><p>于是上网查，结果都是很简略的方法，作为刚开始上手atom的新手，一时不理解，终于经过自己的折腾成功使用，如下</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-zVuzOSpf-1588576020854)(<a href="http://ourcia6f4.bkt.clouddn.com/atom-html-preview.png)]">http://ourcia6f4.bkt.clouddn.com/atom-html-preview.png)]</a></p><p>特此记录，以便为新手提供方便，节省这些不必要的查询时间。</p><p>####1、 搜索插件  </p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-yzCW8kwd-1588576020857)(<a href="http://ourcia6f4.bkt.clouddn.com/package.png)]">http://ourcia6f4.bkt.clouddn.com/package.png)]</a></p><p>####2、  安装插件</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-iZHbWYFJ-1588576020860)(<a href="http://ourcia6f4.bkt.clouddn.com/search.png)]">http://ourcia6f4.bkt.clouddn.com/search.png)]</a></p><p>####3、  修改快捷键</p><p>atom-html-preview初始快捷键为ctrl+p，于atom已有快捷键冲突，修改为ctrl+F12，如下<br>点击File-&gt;Settings-&gt;KeyBindings-&gt;your keymap file超链接-&gt;在末尾添加</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scheme"><span class="hljs-symbol">&#x27;atom-text-editor</span><span class="hljs-symbol">&#x27;:</span><br>　<span class="hljs-symbol">&#x27;ctrl-F12</span><span class="hljs-symbol">&#x27;:</span><span class="hljs-symbol">&#x27;atom-html-preview:toggle</span>&#x27;<br></code></pre></td></tr></table></figure><p>####4、 完成</p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>其他</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>漫谈博客这东西——漫谈系列&lt;一&gt;</title>
    <link href="/wilson-blog-hexo/2017/10/12/%E6%BC%AB%E8%B0%88%E5%8D%9A%E5%AE%A2%E8%BF%99%E4%B8%9C%E8%A5%BF/"/>
    <url>/wilson-blog-hexo/2017/10/12/%E6%BC%AB%E8%B0%88%E5%8D%9A%E5%AE%A2%E8%BF%99%E4%B8%9C%E8%A5%BF/</url>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>日常知识总结及记录，本次关于由搜索<strong>区块链</strong>这一关键词引发的关于“为什么要记博客”这一问题的思考</p><ul><li>比特币</li><li>区块链</li><li>博客</li><li>微博</li></ul><span id="more"></span><h3 id="比特币-区块链"><a href="#比特币-区块链" class="headerlink" title="比特币&amp;区块链"></a>比特币&amp;区块链</h3><p>昨天看了今年的云栖峰会，再次听到了今年听到最多的“区块链”技术，于是今天闲暇之余，想了解一下这个<b><a href="http://www.8btc.com/what-is-blockchain">区块链</a></b>究竟是个什么东西。看了半天，并没有像某些编程技术一样，能够快速理解大概意思，反倒是产生了更多的陌生词汇，比如<b><a href="https://baike.baidu.com/item/%E6%8B%9C%E5%8D%A0%E5%BA%AD%E5%B0%86%E5%86%9B%E9%97%AE%E9%A2%98/265656?fr=aladdin">拜占庭将军问题</a></b>，不过一个熟悉的字眼“比特币”倒是快速映入眼帘，原来区块链技术是和比特币原理紧密联系在一起的。</p><h3 id="博客-微博"><a href="#博客-微博" class="headerlink" title="博客&amp;微博"></a>博客&amp;微博</h3><p>于是就想着，为了理解这种概念东西，就记篇博客以助理解吧，但看着看着，觉得不懂的概念越来越多，而且查到的资料感觉讲的都很详细，感觉自己写不出更加合理的解释。于是就想到，为什么要记博客这个东西。</p><p>为什么要记博客呢，可能每个人的答案都不一样。我这个人在探究“为什么”之前，都喜欢搞清楚“是什么”，那么博客是什么呢（以下内容为个人理解），博客这个词是音译blog而来，那么blog又是什么呢，我们都知道，很多时候，我们都需要对所发生的一切事情有个记录，叫做日志（log），而程序世界这个东西更广为人知，计算机程序的每个行为如果有日志的记录，在发生异常情况或者我们需要观测系统运行情况的时候才有据可循。</p><p>其实博客这个东西最初就是一种网络日志（web log），用来在web里记录一些东西而已，让日志这个东西不止停留于程序后台的日志服务器里，而成为像在线笔记本&#x2F;日记本一样的东西，可以方便人们随时随地把自己想记录下来的东西放到web这个大世界里。</p><p>后来由此衍生出微博（micro blog）这个东西，但我觉得微博并不是一种“微型博客”，所谓字数受限，内容短小简洁的博客，因为它本身的定位和运营使其完全脱离于博客而成为一种新兴的事务，我个人觉得它如今已然成为一种社交媒介。因为你想想，微博可以看作一种一定字数的网络日志吗？不止于此！如今微博的内容可谓百花齐放，可以是广告平台，可以是资源分享，抑或是明星的粉丝们关注明星日常生活点滴的一个统一途径。</p><h3 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h3><p>最后，回归本文，我为什么要记博客，其实我是本着博客最原始的功用——网络日志这个功能。因为我希望把我对于所读所想的东西做一个记录，以加深我对于知识的理解。因为书写博客的过程本身也是对于某些事物理解的一个梳理。</p><p>我把人的大脑比作计算机的CPU，而理解能力和表达能力分别相当于计算机的I&#x2F;O设备（Input输入、Output输入），人类向外界展现其内部思考的媒介依赖于这两者。比如作家、教师，属于输出能力示范的人群，而读者、观众属于展现输入过程人群。如今我们借助于互联网这个第三次技术革命的产物，每天都在输入大量的数据，而与此同时我认识到，仅仅有输入，却没有输出，是很可悲的。首先，对于CPU来说，仅仅有输入，而没有输出，不算是一次成功的数据处理，人也一样，对知识的学习，若仅仅停留于摄入，而不能经过大脑的思考，做出相应的反馈输出，比如分享，那样未必是一件好事。</p><blockquote><p>分享知识不会像分苹果一样越分越少</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每年九月份给自己的一份健康警告</title>
    <link href="/wilson-blog-hexo/2017/09/18/%E6%AF%8F%E5%B9%B4%E4%B9%9D%E6%9C%88%E4%BB%BD%E7%BB%99%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%80%E4%BB%BD%E5%81%A5%E5%BA%B7%E8%AD%A6%E5%91%8A/"/>
    <url>/wilson-blog-hexo/2017/09/18/%E6%AF%8F%E5%B9%B4%E4%B9%9D%E6%9C%88%E4%BB%BD%E7%BB%99%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%80%E4%BB%BD%E5%81%A5%E5%BA%B7%E8%AD%A6%E5%91%8A/</url>
    
    <content type="html"><![CDATA[<p>从百度拇指医生某热心网友总结那里引用来，觉得写得很不错，有参考意义，特此记录下来</p><blockquote><p>”为什么每年九月份过敏鼻炎就严重“</p><p>”因为天气冷热温差比较大。 因为是过敏鼻炎，也可能是你的过敏原在秋季比较丰富。具体你要去医院查过敏原。<br>我过敏性鼻炎，每天早上起来打喷嚏，流鼻涕，流眼泪，眼睛痒痛充血，如遇天气干燥就容易流鼻血，部分时候会引起头痛。过敏原比较悲催，很普遍， 甲醛、尘螨、灰尘、温度变化都比较敏感。 吃的药基本没什么用。 弄点抗过敏的药就可以了，我现在连喷剂都不太管用。以下是我经过很多测试得到的一些经验，效果挺好，但是也要自己注意保养。</p></blockquote><span id="more"></span><blockquote><p>【忌口】辛辣、羊肉、海鲜、避免喝冰水</p></blockquote><blockquote><p>【温度】要注意保暖。洗脸用温水，尽量喝温水。最好少吹空调</p><p>【清洗鼻腔】因为会对某些物质过敏，因此每天清洗一下鼻腔就很有必要了。 每天自制生理盐水冲鼻子，配方： 500ML 38度的温水+4.5g 无碘盐+4.5g小苏打。 如果觉得麻烦也可以去淘宝买现成的洗鼻盐。 清洗鼻子的设备，淘宝也有卖的，一种是专门用于洗鼻子的洗鼻机。另一种是洗牙的机器，但是也有洗鼻的喷头。其实就是一个水泵往鼻子里打水，具体方法参见说明书吧。 控制水温37-38度才会舒服，太冷会呛到，太热会烫坏鼻粘膜，弄个专门测液体温度的温度计，这种温度计就是厨房用针式的那种。</p></blockquote><blockquote><p>【坚持锻炼】再有就是坚持锻炼身体会有很大的帮助，提高自身的抵抗力最重要。我是打羽毛球和爬山，我们爬的都是野山，景区效果不好，爬山效果比较明显，山里空气很好。</p></blockquote><blockquote><p>【避免的运动类型】不要游泳，不要下海。 游泳池水进入鼻腔没有好处。 下海游泳要禁止，会使体温降低，如果海水进入鼻腔会导致非常严重的过敏反应。 下海游泳本人亲身经历过，非常痛苦。</p></blockquote><blockquote><p>【防止揉眼睛】 眼睛痒痛最麻烦的是夜里不自主的揉眼睛，这样会更严重得结膜炎。我的方法是购买一个3M的实验室防护眼镜。它周围是软的，相对还算舒服。有效避免自己揉眼睛，目前没有更好的方法，总不能把自己的手捆起来吧！</p></blockquote><blockquote><p>【药物】对我而言基本没什么用。抗过敏药:<strong>氯雷他定</strong>或者<strong>扑尔敏</strong>。缓解眼睛：<strong>双氯芬酸钠滴眼液</strong>。喷剂：丙酸倍氯米松鼻喷雾剂（少用，只有特别难受的时候用用吧）。头痛只能吃点去痛片了。其他遵医嘱（其实大夫也没办法）</p></blockquote><p>关键时刻，网民的建议也是有效的，感谢互联网让同病相怜的人可以分享彼此之间的感受和应对措施。</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>可复用面向对象软件基础——设计模式之总览</title>
    <link href="/wilson-blog-hexo/2017/08/16/%E5%8F%AF%E5%A4%8D%E7%94%A8%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BD%AF%E4%BB%B6%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%80%BB%E8%A7%88/"/>
    <url>/wilson-blog-hexo/2017/08/16/%E5%8F%AF%E5%A4%8D%E7%94%A8%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BD%AF%E4%BB%B6%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%80%BB%E8%A7%88/</url>
    
    <content type="html"><![CDATA[<h3 id="一、设计模式特点"><a href="#一、设计模式特点" class="headerlink" title="一、设计模式特点"></a>一、设计模式特点</h3><ol><li>反复使用</li><li>分类编目</li><li>经验总结</li></ol> <span id="more"></span><h3 id="二、设计模式宗旨"><a href="#二、设计模式宗旨" class="headerlink" title="二、设计模式宗旨"></a>二、设计模式宗旨</h3><ol><li>代码重用</li><li>使代码易于理解</li><li>保证代码可靠性</li></ol><h3 id="三、设计模式分类（23-2）"><a href="#三、设计模式分类（23-2）" class="headerlink" title="三、设计模式分类（23+2）"></a>三、设计模式分类（23+2）</h3><ol><li>创建型（5种）</li><li>结构型（7种）</li><li>行为型（11种）</li><li>其他（2种）</li></ol><h4 id="（1）创建型模式"><a href="#（1）创建型模式" class="headerlink" title="（1）创建型模式"></a>（1）创建型模式</h4><ol><li>工厂方法模式</li><li>抽象工厂模式</li><li>单例模式</li><li>建造者模式</li><li>原型模式</li></ol><h4 id="（2）结构型模式"><a href="#（2）结构型模式" class="headerlink" title="（2）结构型模式"></a>（2）结构型模式</h4><ol><li>适配器模式</li><li>装饰器模式</li><li>代理模式</li><li>外观模式</li><li>桥接模式</li><li>组合模式</li><li>享元模式</li></ol><h4 id="（3）行为型模式"><a href="#（3）行为型模式" class="headerlink" title="（3）行为型模式"></a>（3）行为型模式</h4><ol><li>策略模式</li><li>模板方法模式</li><li>观察者模式</li><li>迭代子模式</li><li>责任链模式</li><li>命令模式</li><li>备忘录模式</li><li>状态模式</li><li>访问者模式</li><li>中介者模式</li><li>解释器模式</li></ol><h4 id="（4）其他"><a href="#（4）其他" class="headerlink" title="（4）其他"></a>（4）其他</h4><ol><li>并发型模式</li><li>线程池模式</li></ol><h3 id="四、设计模式原则（6项）"><a href="#四、设计模式原则（6项）" class="headerlink" title="四、设计模式原则（6项）"></a>四、设计模式原则（6项）</h3><ol><li>开闭原则（Open Close Principle）</li><li>里氏代换原则（Liskov Substitution Principle）</li><li>依赖倒转原则（Dependence Inversion Principle）</li><li>接口隔离原则（Interface Segregation Principle）</li><li>迪米特法则（最少知道原则）（Demeter Principle）</li><li>合成复用原则（Composite Reuse Principle）</li></ol><h3 id="五、原则详解"><a href="#五、原则详解" class="headerlink" title="五、原则详解"></a>五、原则详解</h3><h4 id="（1）开闭原则"><a href="#（1）开闭原则" class="headerlink" title="（1）开闭原则"></a>（1）开闭原则</h4><blockquote><p>开闭原则就是说<strong>对扩展开放，对修改关闭</strong>。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。目的在于使程序的扩展性好，易于维护和升级。所以需要使用到<strong>接口和抽象类</strong></p></blockquote><h4 id="（2）里氏代换原则"><a href="#（2）里氏代换原则" class="headerlink" title="（2）里氏代换原则"></a>（2）里氏代换原则</h4><blockquote><p>里氏代换原则（LSP）是<strong>面向对象</strong>设计的基本原则之一。 里氏代换原则中说，<strong>任何基类可以出现的地方，子类一定可以出现</strong>。</p><p>LSP是<strong>继承复用</strong>的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。</p></blockquote><h4 id="（3）依赖倒转原则"><a href="#（3）依赖倒转原则" class="headerlink" title="（3）依赖倒转原则"></a>（3）依赖倒转原则</h4><blockquote><p>这个是开闭原则的基础，具体内容：针对<strong>接口编程</strong>，<strong>依赖于抽象</strong>而不依赖于具体。</p></blockquote><h4 id="（4）接口隔离原则"><a href="#（4）接口隔离原则" class="headerlink" title="（4）接口隔离原则"></a>（4）接口隔离原则</h4><blockquote><p>这个原则的意思是：使用<strong>多个</strong>隔离的<strong>接口</strong>，比使用单个接口要好。还是一个<strong>降低</strong>类之间的<strong>耦合度</strong>的意思。</p><p>从这儿我们看出，其实设计模式就是一个软件的设计思想，从大型软件架构出发，为了升级和维护方便。所以上文中多次出现：<strong>降低依赖，降低耦合。</strong></p></blockquote><h4 id="（5）迪米特法则（最少知道原则）"><a href="#（5）迪米特法则（最少知道原则）" class="headerlink" title="（5）迪米特法则（最少知道原则）"></a>（5）迪米特法则（最少知道原则）</h4><blockquote><p>为什么叫最少知道原则，就是说：一个<strong>实体</strong>应当<strong>尽量少</strong>的与<strong>其他实体</strong>之间发生<strong>相互作用</strong>，使得系统功能<strong>模块相对独立</strong>。</p></blockquote><h4 id="（6）合成复用原则"><a href="#（6）合成复用原则" class="headerlink" title="（6）合成复用原则"></a>（6）合成复用原则</h4><blockquote><p>原则是尽量使用<strong>合成&#x2F;聚合</strong>的方式，而不是使用继承。</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA2016配置运行基于Maven的Git项目</title>
    <link href="/wilson-blog-hexo/2017/08/16/IDEA2016%E9%85%8D%E7%BD%AE%E8%BF%90%E8%A1%8C%E5%9F%BA%E4%BA%8EMaven%E7%9A%84Git%E9%A1%B9%E7%9B%AE/"/>
    <url>/wilson-blog-hexo/2017/08/16/IDEA2016%E9%85%8D%E7%BD%AE%E8%BF%90%E8%A1%8C%E5%9F%BA%E4%BA%8EMaven%E7%9A%84Git%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="一、IDEA-Maven-Git作用"><a href="#一、IDEA-Maven-Git作用" class="headerlink" title="一、IDEA&amp;Maven&amp;Git作用"></a>一、IDEA&amp;Maven&amp;Git作用</h3><ol><li>IDEA（项目容器）</li><li>Maven（管理Jar和项目打包）</li><li>Git（版本控制）</li></ol> <span id="more"></span><h3 id="二、从远程clone-git项目"><a href="#二、从远程clone-git项目" class="headerlink" title="二、从远程clone git项目"></a>二、从远程clone git项目</h3><p>使用工具clone下git项目</p><blockquote><p>可能问题： 直接通过git bash上git clone时可能失败</p><p>问题解决：使用TortoiseGit（有时候TortoiseGit也可能失败，可能和gitblit服务器有关）。</p><p>可能项目由多个module相互依赖</p><p>从Git直接clone下的项目，未编译，即不含target或out文件夹（gitignore中限制编译后的文件被Git管理）</p><p>但有pom.xml文件（Idea导入基于Maven的项目依赖该文件，即导入项目时需找到pom.xml文件）</p></blockquote><h3 id="三、将clone到本地的Maven项目使用IDEA编辑（导入或打开）"><a href="#三、将clone到本地的Maven项目使用IDEA编辑（导入或打开）" class="headerlink" title="三、将clone到本地的Maven项目使用IDEA编辑（导入或打开）"></a>三、将clone到本地的Maven项目使用IDEA编辑（导入或打开）</h3><blockquote><p>如果一个项目有多个相互依赖的module组成（各自module分别有pom.xml），则在Idea中依次导入已存在module（不是新建module）</p><p>由多个module相互依赖组成的项目，会有一个是主module</p><p>或者通过open的方式（更快）找到pom.xml（多个module使用同一个module）</p><p>！！！对于Maven项目，使用IDEA导入可能出现的情况：</p><p>如果直接打开的module文件夹，而不是pom.xml文件，则不会生成Maven项目，这是remove了module，会残余文件，若delete后，则从git上clone下的module文件夹中将没有了pom.xml（因为刚才delete掉了），此时再看该module文件夹，git已提示有文件被删除了（原因：IDEA只是管理代码的IDE，对于打开项目之后的操作都是对本地文件的操作，从IDE里删除了文件，也就是对本地文件进行删除）</p></blockquote><p><strong>方式二</strong>：直接使用Idea，project from Git</p><h3 id="四、IDEA初始化配置"><a href="#四、IDEA初始化配置" class="headerlink" title="四、IDEA初始化配置"></a>四、IDEA初始化配置</h3><blockquote><p>第零步：jdk&amp;maven配置</p><p>第一步：Project Structure</p></blockquote><ol><li>project name</li><li>SDK</li><li>project compiler output</li></ol><blockquote><p>第二步：服务器配置<br>热部署（JRebel可通过VM配置，给运行的容器VM参数 ）<br>第三部：fix artifacts，选择war exploded</p></blockquote><h3 id="五、启动项目"><a href="#五、启动项目" class="headerlink" title="五、启动项目"></a>五、启动项目</h3><ol><li>编译（build）</li><li>启动服务器</li></ol><h3 id="六、问题情况"><a href="#六、问题情况" class="headerlink" title="六、问题情况"></a>六、问题情况</h3><blockquote><p>导入module后，提示is registered as a Git root, but no Git repositories were found there.点击config，将项目添加git，之后正常配置，即为正常</p><p>启动tomcat，debugger端口被占用<br> java.net.SocketException “socket closed”</p></blockquote><h3 id="七、问题情况"><a href="#七、问题情况" class="headerlink" title="七、问题情况"></a>七、问题情况</h3><blockquote><p>如果端口被占用情况反复出现，且已确认自己正确配置，那么重启电脑是最好的解决办法，其他的端口被占用情况类似（因为端口占用的问题浪费了几个小时都找不到原因，查了stackoverflow，segementFault，看了各种博客，解决方法都不行，原来重启就解决了。。。俗话说：没有什么是重启电脑解决不了的，重启真是神技啊！）</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ECMAScript6(ECMAScript2015)学习笔记</title>
    <link href="/wilson-blog-hexo/2017/08/16/ECMAScript6-ECMAScript2015-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/wilson-blog-hexo/2017/08/16/ECMAScript6-ECMAScript2015-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="一、ES6简介"><a href="#一、ES6简介" class="headerlink" title="一、ES6简介"></a>一、ES6简介</h3><blockquote><p>ECMAScript 6（以下简称ES6）是JavaScript语言的下一代标准。因为当前版本的ES6是在<strong>2015年</strong>发布的，所以又称ECMAScript 2015。</p></blockquote><blockquote><p>即ES6 &#x3D;&#x3D;&#x3D; ES2015</p></blockquote><h3 id="二、ES6转码器"><a href="#二、ES6转码器" class="headerlink" title="二、ES6转码器"></a>二、ES6转码器</h3><blockquote><p><a href="https://babeljs.io/">Babel</a>是一个广泛使用的ES6转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。（chrome已支持ES6解释，亲测可用）大家可以选择自己习惯的工具来使用使用Babel，具体过程可直接在<a href="https://babeljs.io/">Babel官网</a>查看：</p></blockquote><h3 id="三、常用特性"><a href="#三、常用特性" class="headerlink" title="三、常用特性"></a>三、常用特性</h3><ol><li>let &#x2F; const（与传统var对比）</li><li>class &#x2F; extends &#x2F; super（面向对象）</li><li>arrow functions（箭头函数）</li><li>template string（模板字符串）</li><li>destructing（解构）</li><li>default（默认值）</li><li>rest &#x2F; arguments（函数参数）</li></ol><h3 id="四、特性详解"><a href="#四、特性详解" class="headerlink" title="四、特性详解"></a>四、特性详解</h3><h4 id="（1）let"><a href="#（1）let" class="headerlink" title="（1）let"></a>（1）let</h4><blockquote><p>与var类似，都是用来<strong>声明变量</strong>的，但在实际运用中他俩都有各自的特殊用途。</p></blockquote><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;tom&#x27;</span><br><br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br><span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;bar&#x27;</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(name)<br><span class="hljs-keyword">break</span><br>&#125;<br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(name)<br></code></pre></td></tr></table></figure><blockquote><p>bar<br>bar</p><p>使用var 两次输出都是bar，内层变量覆盖外层变量。这是因为ES5只有<strong>全局作用域</strong>和<strong>函数作用域</strong>，没有<strong>块级作用域</strong>，这带来很多不合理的场景。</p><p>而let则实际上为JavaScript新增了<strong>块级作用域</strong>。用它所声明的变量，只在let命令所在的代码块内有效。</p></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">let <span class="hljs-type">name</span> = <span class="hljs-string">&#x27;tom&#x27;</span><br><br><span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>let <span class="hljs-type">name</span> = <span class="hljs-string">&#x27;bar&#x27;</span><br>console.log(<span class="hljs-type">name</span>)<br>break<br>&#125;<br><br>console.log(<span class="hljs-type">name</span>)<br></code></pre></td></tr></table></figure><blockquote><p>bar<br>tom</p><p>另外一个var带来的不合理场景就是用来计数的<strong>循环变量</strong>泄露为<strong>全局变量</strong>，如下</p></blockquote><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs abnf">var a <span class="hljs-operator">=</span> []<span class="hljs-comment">;</span><br><br>for(var i<span class="hljs-operator">=</span><span class="hljs-number">0</span><span class="hljs-comment">; i&lt;10; i++) &#123;</span><br>a[i] <span class="hljs-operator">=</span> function() &#123;<br>console.log(i)<span class="hljs-comment">;</span><br>&#125;<span class="hljs-comment">;</span><br>&#125;<br><br>a[<span class="hljs-number">5</span>]()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><blockquote><p>10</p><p>上面代码中，<strong>变量i是var声明的，在全局范围内都有效</strong>。所以每一次循环，<strong>新的i值</strong>都会<strong>覆盖旧值</strong>，导致最后<strong>输出</strong>的是<strong>最后一轮</strong>的i的值。而使用let则不会出现这个问题。</p></blockquote><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs abnf">var a <span class="hljs-operator">=</span> []<span class="hljs-comment">;</span><br><br>for(let i<span class="hljs-operator">=</span><span class="hljs-number">0</span><span class="hljs-comment">; i&lt;10; i++) &#123;</span><br>a[i] <span class="hljs-operator">=</span> function() &#123;<br>console.log(i)<span class="hljs-comment">;</span><br>&#125;<span class="hljs-comment">;</span><br>&#125;<br><br>a[<span class="hljs-number">5</span>]()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><blockquote><p>5</p></blockquote><h4 id="（2）const"><a href="#（2）const" class="headerlink" title="（2）const"></a>（2）const</h4><blockquote><p>const也用来声明变量，但是声明的是<strong>常量</strong>。一旦声明，常量的值就不能改变。</p></blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">const <span class="hljs-literal">PI</span> = Math.<span class="hljs-literal">PI</span><br><span class="hljs-literal">PI</span> = <span class="hljs-number">23</span><br>VM1600:<span class="hljs-number">2</span> Uncaught TypeError: Assignment <span class="hljs-built_in">to</span> <span class="hljs-built_in">constant</span> <span class="hljs-built_in">variable</span>.(…)(anonymous <span class="hljs-function"><span class="hljs-keyword">function</span>) @ <span class="hljs-title">VM1600</span>:<span class="hljs-title">2</span></span><br></code></pre></td></tr></table></figure><blockquote><p>当我们尝试去改变用const声明的常量时，浏览器就会报错。const有一个很好的应用场景，就是当我们引用<strong>第三方库</strong>时声明的变量，用const来声明可以避免未来不小心重命名而导致出现bug：</p><p>const monent &#x3D; require(‘moment’)</p></blockquote><h4 id="（3）class-extends-super"><a href="#（3）class-extends-super" class="headerlink" title="（3）class&#x2F;extends&#x2F;super"></a>（3）class&#x2F;extends&#x2F;super</h4><blockquote><p>ES6提供了更接近<strong>传统语言</strong>的写法，引入了Class（类）这个概念。新的class写法让<strong>对象原型</strong>的写法更加清晰、更像<strong>面向对象编程</strong>的语法，也更加通俗易懂。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br><span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">type</span> = <span class="hljs-string">&#x27;animal&#x27;</span><br>&#125;<br><span class="hljs-title function_">says</span>(<span class="hljs-params">say</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">type</span> + <span class="hljs-string">&#x27;says&#x27;</span> +say)<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> animal = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>()<br>animal.<span class="hljs-title function_">says</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>animalsayshello</p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>constructor() &#123;<br><span class="hljs-keyword">super</span>()<br><span class="hljs-keyword">this</span>.<span class="hljs-keyword">type</span> = &#x27;cat&#x27;<br>&#125;<br>&#125;<br><br>let cat = <span class="hljs-keyword">new</span> <span class="hljs-type">Cat</span>()<br>cat.says(&#x27;hello&#x27;)<br></code></pre></td></tr></table></figure><blockquote><p>catsayshello</p><p>上面代码首先用<strong>class</strong>定义了一个“类”，可以看到里面有一个constructor方法，这就是构造方法。</p><p>而<strong>this</strong>关键字则代表<strong>实例对象</strong>。简单地说，constructor内定义的方法和属性是实例对象自己的，而constructor外定义的方法和属性则是所有实例对象可以共享的。</p><p>Class之间可以通过<strong>extends</strong>关键字实现继承，这比ES5的通过修改原型链实现继承，要清晰和方便很多。上面定义了一个Cat类，该类通过extends关键字，继承了Animal类的所有属性和方法。</p><p><strong>super</strong>关键字，它指代父类的<strong>实例</strong>（即父类的<strong>this对象</strong>）。子类必须在constructor方法中调用<strong>super</strong>方法，否则新建实例时会报错。这是因为<strong>子类没有自己的this对象</strong>，而是继承父类的this对象，然后对其进行加工。如果不调用super方法，子类就得不到this对象。</p><p>ES6的继承机制，实质是先创造父类的实例对象this（所以必须先调用super方法），然后再用子类的构造函数修改this。</p></blockquote><h4 id="（4）arrow-function"><a href="#（4）arrow-function" class="headerlink" title="（4）arrow function"></a>（4）arrow function</h4><blockquote><p>ES6最最常用的一个新特性了，用它来写function比原来的写法要简洁清晰很多</p></blockquote><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> f = <span class="hljs-function">(<span class="hljs-params">i</span>) =&gt;</span> i+<span class="hljs-number">1</span><br><span class="hljs-keyword">var</span> result = f(<span class="hljs-number">3</span>)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(result)<br></code></pre></td></tr></table></figure><blockquote><p>4</p><p>其实声明函数只需要（i）&#x3D;&gt;i + 1这一句<br>ES6的箭头函数功能强大，详情见<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions">Arrow Functions</a></p></blockquote><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// ES5函数使用</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">x, y</span>) &#123;<br>x++;<br>y--;<br><span class="hljs-keyword">return</span> x + y;<br>&#125;<br><br><span class="hljs-keyword">var</span> f1 = test(<span class="hljs-number">6</span>, <span class="hljs-number">7</span>)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(f1)<br><br></code></pre></td></tr></table></figure><blockquote><p>13</p><p>这里实际为7+6，return的时候x已经为7，y为6，可自行调试观察</p></blockquote><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// ES6 arrow functions</span><br><span class="hljs-keyword">var</span> arrow = <span class="hljs-function">(<span class="hljs-params">x, y</span>) =&gt;</span> &#123;x++;y--;<span class="hljs-keyword">return</span> x+y&#125;<br><span class="hljs-keyword">var</span> result2 = arrow(<span class="hljs-number">3</span>, <span class="hljs-number">9</span>)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(result2)<br></code></pre></td></tr></table></figure><blockquote><p>Arrow functions还可以解决一个ES5中关于this的问题，JavaScript语言的this对象一直是一个令人头痛的问题，在<strong>对象方法</strong>中使用this，例如：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br><span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">type</span> = <span class="hljs-string">&#x27;animal&#x27;</span><br>&#125;<br><span class="hljs-title function_">says</span>(<span class="hljs-params">say</span>) &#123;<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">type</span> + <span class="hljs-string">&#x27; says &#x27;</span> + say)<br>&#125;, <span class="hljs-number">1000</span>)<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> animal = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>()<br>animal.<span class="hljs-title function_">says</span>(<span class="hljs-string">&#x27;hi&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>undefined says hi</p><p>原因：setTimeout中的this指向的是全局对象</p><p>传统解决方法1：将this传给self,再用self来指代this</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br><span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">type</span> = <span class="hljs-string">&#x27;animal&#x27;</span><br>&#125;<br><span class="hljs-title function_">says</span>(<span class="hljs-params">say</span>) &#123;<br><span class="hljs-keyword">var</span> self = <span class="hljs-variable language_">this</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(self.<span class="hljs-property">type</span> + <span class="hljs-string">&#x27; says &#x27;</span> + say)<br>&#125;, <span class="hljs-number">1000</span>)<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> animal = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>()<br>animal.<span class="hljs-title function_">says</span>(<span class="hljs-string">&#x27;hi&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>传统解决方法2：使用bind(this)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br><span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">type</span> = <span class="hljs-string">&#x27;animal&#x27;</span><br>&#125;<br><span class="hljs-title function_">says</span>(<span class="hljs-params">say</span>) &#123;<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">type</span> + <span class="hljs-string">&#x27; says &#x27;</span> + say)<br>&#125;.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>), <span class="hljs-number">1000</span>)<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> animal = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>()<br>animal.<span class="hljs-title function_">says</span>(<span class="hljs-string">&#x27;hi&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>使用arrow functions解决</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br><span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">type</span> = <span class="hljs-string">&#x27;animal&#x27;</span><br>&#125;<br><span class="hljs-title function_">says</span>(<span class="hljs-params">say</span>) &#123;<br><span class="hljs-built_in">setTimeout</span>( <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">type</span> + <span class="hljs-string">&#x27; says &#x27;</span> + say)<br>&#125;, <span class="hljs-number">1000</span>)<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> animal = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>()<br>animal.<span class="hljs-title function_">says</span>(<span class="hljs-string">&#x27;hi&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>当我们使用箭头函数时，函数体内的this对象，就是<strong>定义时</strong>所在的对象，而不是<strong>使用时</strong>所在的对象。并不是因为箭头函数内部有绑定this的机制，实际原因是箭头函数根本<strong>没有自己的this</strong>，它的this是<strong>继承外面的</strong>，因此内部的this就是外层代码块的this。</p></blockquote><h4 id="（5）template-string"><a href="#（5）template-string" class="headerlink" title="（5）template string"></a>（5）template string</h4><blockquote><p>当我们要插入<strong>大段</strong>的<strong>html内容</strong>到文档中时，传统的写法非常麻烦，所以之前我们通常会引用一些<strong>模板工具库</strong>，比如<strong>mustache</strong>等等。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;result&quot;</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arcade">$(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">var</span> <span class="hljs-built_in">count</span> = <span class="hljs-number">5</span><br><span class="hljs-keyword">var</span> onSale = <span class="hljs-number">3</span><br><br>$(<span class="hljs-string">&quot;#result&quot;</span>).append(<br><span class="hljs-string">&quot;There are &lt;b&gt;&quot;</span> + <span class="hljs-built_in">count</span> + <span class="hljs-string">&quot;&lt;/b&gt;&quot;</span> +<br><span class="hljs-string">&quot; items in your basket,&quot;</span> +<br><span class="hljs-string">&quot;&lt;em&gt;&quot;</span> + onSale +<br><span class="hljs-string">&quot;&lt;/em&gt; are on sale!&quot;</span><br>);<br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p>testThere are 5 items in your basket,3 are on sale!</p><p>要用一堆的’+’号来连接<strong>文本</strong>与<strong>变量</strong>，而使用ES6的新特性**模板字符串&#96;&#96;**后，我们可以直接这么来写</p></blockquote><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arcade">$(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">var</span> <span class="hljs-built_in">count</span> = <span class="hljs-number">5</span><br><span class="hljs-keyword">var</span> onSale = <span class="hljs-number">3</span><br><br>$(<span class="hljs-string">&quot;#result&quot;</span>).append(<span class="hljs-string">`</span><br><span class="hljs-string">There are &lt;b&gt;<span class="hljs-subst">$&#123;<span class="hljs-built_in">count</span>&#125;</span>&lt;/b&gt;</span><br><span class="hljs-string">items in your basket,</span><br><span class="hljs-string">&lt;em&gt;<span class="hljs-subst">$&#123;onSale&#125;</span>&lt;/em&gt; are on sale!</span><br><span class="hljs-string">`</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p>test There are 5 items in your basket, 3 are on sale!</p><p>非一般的简洁</p><p>用<strong>反引号</strong>（\）（键盘ESC下方）来标识起始，用${}（类似于JavaEE的EL表达式）来引用变量，而且所有的<strong>空格</strong>和<strong>缩进</strong>都会被<strong>保留</strong>在输出之中</p></blockquote><h4 id="（6）destructing"><a href="#（6）destructing" class="headerlink" title="（6）destructing"></a>（6）destructing</h4><blockquote><p>ES6允许按照一定模式，从<strong>数组</strong>和<strong>对象</strong>中<strong>提取值</strong>，对<strong>变量</strong>进行<strong>赋值</strong>，这被称为<strong>解构</strong>（Destructuring）</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim">// ES5<br><span class="hljs-keyword">let</span> <span class="hljs-keyword">cat</span> = <span class="hljs-string">&#x27;tom&#x27;</span><br><span class="hljs-keyword">let</span> mouse = <span class="hljs-string">&#x27;terry&#x27;</span><br><span class="hljs-keyword">let</span> zoo = &#123;<span class="hljs-keyword">cat</span> : <span class="hljs-keyword">cat</span>, mouse : mouse&#125;<br>console.<span class="hljs-built_in">log</span>(zoo)<br></code></pre></td></tr></table></figure><blockquote><p>Object {cat: “tom”, mouse: “terry”}</p></blockquote><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// ES6</span><br>let zoo2 = &#123;cat, mouse&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(zoo2)<br></code></pre></td></tr></table></figure><blockquote><p>Object {cat: “tom”, mouse: “terry”}</p></blockquote><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">let</span> dog = &#123;<span class="hljs-keyword">type</span> : <span class="hljs-string">&#x27;animal&#x27;</span>, num : <span class="hljs-number">6</span>&#125;<br><span class="hljs-keyword">let</span> &#123;<span class="hljs-keyword">type</span>, num&#125; = dog<br>console.<span class="hljs-keyword">log</span>(<span class="hljs-keyword">type</span>, num)<br><br></code></pre></td></tr></table></figure><blockquote><p>animal 6</p></blockquote><h4 id="（7）default"><a href="#（7）default" class="headerlink" title="（7）default"></a>（7）default</h4><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scilab"><span class="hljs-comment">// ES5</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">animal</span><span class="hljs-params">(type)</span> &#123;</span><br><span class="hljs-built_in">type</span> = <span class="hljs-built_in">type</span> || <span class="hljs-string">&#x27;cat&#x27;</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">type</span>)<br>&#125;<br><br>animal()<br>animal(<span class="hljs-string">&#x27;dog&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>cat<br>dog</p><p>调用方法时若不加参数则使用默认值</p></blockquote><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-comment">// ES6</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">animal</span><span class="hljs-params">(<span class="hljs-keyword">type</span> = <span class="hljs-string">&#x27;cat&#x27;</span>)</span> <span class="hljs-comment">&#123;</span></span><br><span class="hljs-comment"><span class="hljs-function">console.log(type)</span></span><br><span class="hljs-comment"><span class="hljs-function">&#125;</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">animal</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">animal</span><span class="hljs-params">(<span class="hljs-string">&#x27;dog&#x27;</span>)</span>;</span><br><br></code></pre></td></tr></table></figure><blockquote><p>cat<br>dog</p></blockquote><h4 id="（8）rest"><a href="#（8）rest" class="headerlink" title="（8）rest"></a>（8）rest</h4><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">// ES6 rest</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">animals</span><span class="hljs-params">(<span class="hljs-rest_arg">...types</span>)</span> &#123;<br>console.log(types)<br>&#125;<br><br>animals(<span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-string">&#x27;fish&#x27;</span>)<br><br></code></pre></td></tr></table></figure><blockquote><p>[“cat”, “dog”, “fish”]</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>es6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java零碎知识点整理（2）</title>
    <link href="/wilson-blog-hexo/2017/08/16/java%E9%9B%B6%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%EF%BC%882%EF%BC%89/"/>
    <url>/wilson-blog-hexo/2017/08/16/java%E9%9B%B6%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%EF%BC%882%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<blockquote><p>构造器（构造方法）<br>在类实例化时被调用，对实例对象进行初始化</p></blockquote><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.wx.testinit;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Color</span> &#123;<br><br><span class="hljs-type">int</span> red, green, blue;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 以下这个方法不是构造器，构造器没有“void”这个返回值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">Color</span><span class="hljs-params">()</span> &#123;<br>red = <span class="hljs-number">10</span>;<br>green = <span class="hljs-number">10</span>;<br>blue = <span class="hljs-number">10</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 这才是正确的构造器，会在类实例化一个对象时被调用，对对象进行初始化</span><br><span class="hljs-comment"> */</span><br>Color() &#123;<br>red = <span class="hljs-number">10</span>;<br>green = <span class="hljs-number">10</span>;<br>blue = <span class="hljs-number">10</span>;<br>&#125;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">printColor</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;red:&quot;</span>+red+<span class="hljs-string">&quot;green:&quot;</span>+green+<span class="hljs-string">&quot;blue:&quot;</span>+blue);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Color</span> <span class="hljs-variable">color</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Color</span>();<br>color.printColor();<span class="hljs-comment">// red:0green:0blue:0</span><br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>修饰符（关键字）<br>final&#x2F;abstract<br>abstract不能与final同时使用，<strong>abstract</strong>类为抽象类，包含抽象的方法待实现，需要其他类<strong>继承</strong>该类，对<strong>抽象方法</strong>进行具体实现，而<strong>final</strong>修饰的类表示该类<strong>不可被继承</strong>，二者相违背。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式——学习笔记</title>
    <link href="/wilson-blog-hexo/2017/08/16/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E2%80%94%E2%80%94%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/wilson-blog-hexo/2017/08/16/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E2%80%94%E2%80%94%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h4 id="非打印字符"><a href="#非打印字符" class="headerlink" title="非打印字符"></a>非打印字符</h4><pre><code class="hljs">0. \t (table)制表符 等价于\x09和\cl1. \n (line feed)换行符 等价于\x0a和\cJ2. \v (vertical)垂直制表符 等价于\x0b和\cK3. \f (form feed)换页符 等价于\x0c和\cL4. \r (rarriage return)回车符 等价于\x0d和\cM5. \s (str)匹配任何空白字符，包括空格、制表符、换页符等） 等价于[\f\n\r\t\v]6. \S匹配任何非空白字符 等价于[^\f\n\r\t\v]</code></pre><span id="more"></span>    <h4 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h4><pre><code class="hljs">0. ^ 表示匹配输入字符串的开始位置，若在方括号中使用，则表示不接受该字符集合（例如上述\S的等价匹配）1. $ 匹配输入字符串的结尾，若设置了RegExp对象的Multiline属性，则$也匹配\n或\r2. ? 匹配前面的子表达式0-1次，或指明一个非贪婪限定符3. + 匹配前面的子表达式1-n次4. * 匹配前面的子表达式0-n次5. . 匹配除换行符（\n）外的任何单字符（相当于windows系统中的?）6. () 标记一个子表达式的开始和结束位置，子表达式可供以后使用7. [ 标记一个中括号表达式的开始（）用于字符集合8. &#123; 标记限定符表达式的开始9. \ 将下一个字符标记为特殊字符、或原义字符、或后向引用、或八进制转义符上述所有特殊字符，若要匹配其本身，都需要在其前面加反斜杠来转义使用</code></pre><h4 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h4><pre><code class="hljs">限定符表示给定组件出现多少次才能满足匹配0. * 0-n次1. + 1-n次2. ? 0-1次3. &#123;n&#125; 确定的n次4. &#123;n,&#125; 至少n次5. &#123;n,m&#125; （逗号两个数之间不能有空格） 最少n次且最多m次* + ? 限定符都是贪婪的，即尽可能多的匹配文字，在其后加一个?可实现非贪婪或最小匹配例如：&lt;h1&gt;Chapter 1 - Introduction to Regular Expression &lt;/h1&gt;/&lt;.*&gt;/将匹配上述全部内容/&lt;.*?&gt;/将只匹配&lt;h1&gt;</code></pre><h4 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h4><pre><code class="hljs">定位符用来描述字符串或单词的边界0. ^ 描述字符串开始位置1. $ 描述字符串结束位置2. \b 描述单词的前或后边界3. \B 描述非单词边界</code></pre>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>正则</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java零碎知识点整理（3）</title>
    <link href="/wilson-blog-hexo/2017/08/16/java%E9%9B%B6%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%EF%BC%883%EF%BC%89/"/>
    <url>/wilson-blog-hexo/2017/08/16/java%E9%9B%B6%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%EF%BC%883%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<blockquote><p>关于java字符串String以及Hashcode的一些整理</p><p>hashcode即是对象地址的十进制形式，而equals方法即是在比较两个对象的hashcode是否相等</p></blockquote><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.wx.testequals;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestEquals</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testEquals</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;a&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;a&quot;</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> a.equals(b);<br>System.out.println(result);<span class="hljs-comment">// true</span><br>System.out.println(a.hashCode() == b.hashCode());<span class="hljs-comment">// true</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testEqual</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;a&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;a&quot;</span>;<br><span class="hljs-keyword">if</span>(a == b) &#123;<span class="hljs-comment">// true</span><br>System.out.println(<span class="hljs-string">&quot;true&quot;</span>);<br>System.out.println(a.hashCode() == b.hashCode());<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;false&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testEquals2</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;a&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> a;<br><span class="hljs-comment">// equals方法比较两个对象的hashcode,hashcode即对象的地址</span><br>System.out.println(a.equals(b));<br><span class="hljs-comment">// == 比较两个变量或者对象的值是否相等，equals比较两个对象的引用是否相等（是否指向同一个对象）</span><br>System.out.println(a==b);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">normalTest</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> String.valueOf(a);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testObjectHashcode</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">User</span> <span class="hljs-variable">user1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;test&quot;</span>);<br><span class="hljs-type">User</span> <span class="hljs-variable">user2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;test&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;user1 toString: &quot;</span>+user1);<br>System.out.println(<span class="hljs-string">&quot;user1 hashcode: &quot;</span>+user1.hashCode());<br><span class="hljs-comment">// hashcode即是对象地址的十进制形式</span><br>System.out.println(Integer.valueOf(<span class="hljs-string">&quot;659e0bfd&quot;</span>, <span class="hljs-number">16</span>));<br>System.out.println(user2);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hexToDeciaml</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">long</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">1021653256</span>;<br>System.out.println(Long.toHexString(a));<span class="hljs-comment">//3ce53108</span><br>System.out.println(Integer.valueOf(<span class="hljs-string">&quot;659e0bfd&quot;</span>, <span class="hljs-number">16</span>));<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//testEquals();</span><br><span class="hljs-comment">//testEqual();</span><br><span class="hljs-comment">//testEquals2();</span><br><span class="hljs-comment">//hexToDeciaml();</span><br>testObjectHashcode();<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>枚举enum整理</p><p>枚举enum是一种类型，不是类，所以不能被实例化，一般用来定义集合常量</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.wx.testenum;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EnumTest</span> &#123;<br><br>PrinterType printType;<br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">PrinterType</span> &#123; INKJET, DOTMATRIX, LASER &#125;;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">EnumTest</span><span class="hljs-params">(PrinterType pType)</span> &#123;<br>printType = pType;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//PrinterType pType = new PrinterType();</span><br><span class="hljs-type">EnumTest</span> <span class="hljs-variable">enumTest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EnumTest</span>(PrinterType.LASER);<br>System.out.println(enumTest.printType);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在Vultr上搭建ss，包含最简版centos7安装过程中的各种坑解决</title>
    <link href="/wilson-blog-hexo/2017/08/16/%E5%9C%A8Vultr%E4%B8%8A%E6%90%AD%E5%BB%BAss%EF%BC%8C%E5%8C%85%E5%90%AB%E6%9C%80%E7%AE%80%E7%89%88centos7%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E5%90%84%E7%A7%8D%E5%9D%91%E8%A7%A3%E5%86%B3/"/>
    <url>/wilson-blog-hexo/2017/08/16/%E5%9C%A8Vultr%E4%B8%8A%E6%90%AD%E5%BB%BAss%EF%BC%8C%E5%8C%85%E5%90%AB%E6%9C%80%E7%AE%80%E7%89%88centos7%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E5%90%84%E7%A7%8D%E5%9D%91%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<ol><li><p>检查是否安装python</p></li><li><p>安装pip</p></li><li><p>pip install shadowsocks</p></li><li><p>pip install M2Crypto</p></li><li><p>M2Crypto安装前置条件：安装pcre，然后安装swig(直接安装pcre，去安装swig会提示pcre未安装，即使pcre已安装-&gt;解决方案，安装pcre-devel，在发现这个问题之前卡住很久)</p> <span id="more"></span></li><li><p>安装pcre-devel后安装swig，并配置环境变量（注意！）</p></li><li><p>安装M2Crypto，再次失败，需要安装openssl（<a href="https://www.openssl.org/source/openssl-1.0.1t.tar.gz">openssl下载</a>）下载安装</p></li><li><p>再次失败，缺少perl，至少perl5，make时间略长，make test时间更长</p></li><li><p>安装openssl，make时间略长</p></li><li><p>在M2Crypto文件夹中拷贝openssl头文件(根据Linux架构位数区分，lsb_release -a查看，若未安装，则需要yum install -y redhat-lsb进行安装)失败，需要yum install openssl-devel</p></li><li><p>再次失败，提示<br> &#x2F;usr&#x2F;include&#x2F;openssl&#x2F;opensslconf.h:36: Error: CPP #error “”This openssl-devel package does not work your architecture?””. Use the -cpperraswarn option to continue swig processing.<br> 解决方案：env SWIG_FEATURES&#x3D;”-cpperraswarn -includeall -D__<code>uname -m</code>__ -I&#x2F;usr&#x2F;include&#x2F;openssl” python setup.py build<br> 直接执行提示python.h无法找到，解决-&gt;yum install python-devel（解决方案均来自stackoverflow，国内博客很多都没有建设性意见，纯属浪费时间）</p></li><li><p>pip setup.py install-&gt;pip list|grep M2Crypto（终于成功！）</p></li><li><p>在&#x2F;etc下新增ss.json代理配置文件<br> {<br>“server”:”serverip”,<br>“server_port”:8388,<br>“local_address”:”127.0.0.1”,<br>“local_port”:1080,<br>“password”:”password”,<br>“timeout”:300,<br>“method”:”aes-256-cfb”<br>}</p></li><li><p>ssserver -c &#x2F;etc&#x2F;ss.json启动代理</p></li></ol><blockquote><p>devel包主要是头文件之类的，共开发用，而且一般会依赖相应的包，安装的时候会自动装上去。</p><p>devel包含普通包，只比普通包多了头文件。动态链接库的话两种包都有。编译的时候如果需要用到这个库，那么需要安装这个库的devel，因为需要头文件</p><p>在Linux系统中都存在类似的问题，在安装特定安装包的过程中，其依赖某些第三方开发包，会曝出某些文件找不到的错误，一般情况下是需要安装依赖包的开发版本的。 这个规则应该是通用的。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于Linux启动文件rc.local的解惑</title>
    <link href="/wilson-blog-hexo/2017/08/16/%E5%85%B3%E4%BA%8ELinux%E5%90%AF%E5%8A%A8%E6%96%87%E4%BB%B6rc-local%E7%9A%84%E8%A7%A3%E6%83%91/"/>
    <url>/wilson-blog-hexo/2017/08/16/%E5%85%B3%E4%BA%8ELinux%E5%90%AF%E5%8A%A8%E6%96%87%E4%BB%B6rc-local%E7%9A%84%E8%A7%A3%E6%83%91/</url>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>首先，rc.local是Linux启动程序在login程序前执行的最后一个脚本，有的服务器中在rc.local中可能会有一句touch &#x2F;var&#x2F;lock&#x2F;subsys&#x2F;local，这是干什么的呢，在百度中没找到，最终在<a href="http://www.linuxquestions.org/questions/linux-newbie-8/touch-var-lock-subsys-local-why-287719/">Linuxquestions.org论坛</a>成功找到满意的解答。</p><span id="more"></span><h3 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h3><p>首先要了解touch这个命令是做什么用的，在此用于创建一个不存在的文件，详细了解请见<a href="http://www.jb51.net/LINUXjishu/257946.html">Linux touch命令</a></p><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><p>&#x2F;var&#x2F;lock&#x2F;subsys&#x2F;local这个文件的存在证明rc.local这个脚本已经执行过了，目的在于避免这个脚本重复执行，除非这个文件不存在时，它才失效，也就是当系统关闭（shut down）时会发生，翻译的不是很好，原文是</p><blockquote><p>What this does is create a lock file that tells the system that ‘local’ is up and running already. It prevents the script from being run twice, as it will fail until the lockfile is removed, which will happen when you shut down.</p><p>Typically this is used with bigger services such as database servers and so forth to make sure they are not started twice.</p></blockquote><p>这样做的目的是用于一些大型服务，例如数据库服务器，以确保它不会启动两次的情况出现。<br>至于touch出的这个文件什么时候被读取以避免再次生成，论坛两哥们是这么解释的</p><blockquote><p>To tell the truth I don’t think anything looks there. I have never seen a lock mechanism in place for the rc.local script. Like I was saying, usually it is only used for bigger services. However, it is usually checked by the script itself.<br>If you have a look at one of your more complicated rc scripts you may see in the ‘start’ function something like (pseudo code):<br>Code:</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">start() &#123;<br>    <span class="hljs-keyword">if</span> <span class="hljs-regexp">/var/</span>lock<span class="hljs-regexp">/subsys/my</span>app exists; then<br>        echo <span class="hljs-string">&quot;myapp already started&quot;</span><br>        <span class="hljs-keyword">exit</span><br>    <span class="hljs-keyword">else</span><br>         touch <span class="hljs-regexp">/var/</span>lock<span class="hljs-regexp">/subsys/my</span>app<br>         <span class="hljs-regexp">/command/</span>to<span class="hljs-regexp">/start/my</span>app<br>    fi<br>&#125;<br></code></pre></td></tr></table></figure><p>也就是会在一个地方，会有类似与上面start()这样的方法会去判断是否已经存在一个local文件，如果有就不重复创建，如果没有就创建一个，后面再读取的时候就不会去创建，以此避免系统重复启动。</p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于python科学计算库numpy学习总结</title>
    <link href="/wilson-blog-hexo/2017/08/16/%E5%85%B3%E4%BA%8Epython%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97%E5%BA%93numpy%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/wilson-blog-hexo/2017/08/16/%E5%85%B3%E4%BA%8Epython%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97%E5%BA%93numpy%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文中部分print输出可能会报错，原因为python3的print通过函数方式使用，与python2中的print通过解释执行不同，需要使用print()进行控制台打印</p></blockquote><span id="more"></span><h3 id="安装numpy"><a href="#安装numpy" class="headerlink" title="安装numpy"></a>安装numpy</h3><p>python3 -m pip install -U pip更新pip<br>pip install numpy</p><h4 id="安装方式II"><a href="#安装方式II" class="headerlink" title="安装方式II"></a>安装方式II</h4><p>pip install ipython<br>ipython –pylab</p><p>pylab模式下会自动导入SciPy,NumPy,Matplotlib模块</p><h3 id="引入numpy"><a href="#引入numpy" class="headerlink" title="引入numpy"></a>引入numpy</h3><p>import numpy as py</p><h3 id="使用numpy"><a href="#使用numpy" class="headerlink" title="使用numpy"></a>使用numpy</h3><p>arange()函数用于创建同类型多维数组（homogeneous multidimensional array）</p><p>用arange创建的数组使用type()查看类型为ndarray</p><p>reshape()函数用于重新构造数组成为其他维度数组</p><p>例如：np.arange(20).reshape(4,5)</p><p>[[ 0  1  2  3  4]<br> [ 5  6  7  8  9]<br> [10 11 12 13 14]<br> [15 16 17 18 19]]</p><h4 id="arrry数组相关属性："><a href="#arrry数组相关属性：" class="headerlink" title="arrry数组相关属性："></a>arrry数组相关属性：</h4><p>ndim：维度<br>shape：各维度大小<br>size：元素个数<br>dtype：元素类型<br>dsize：元素占位大小</p><h4 id="生成特殊矩阵"><a href="#生成特殊矩阵" class="headerlink" title="生成特殊矩阵"></a>生成特殊矩阵</h4><p>全零矩阵：np.zeros()</p><p>注意：ones()和zeros()函数的第一个参数是一个指向数列的指针，不能直接是一个数列，例如上图报错情况</p><p>全一矩阵：np.ones(d,dtype&#x3D;int)<br>默认生成浮点型，可通过第二个参数指定元素数据类型</p><p>随机数数组</p><p>np.random.rand(5)生成包含5个[0,1)区间的数的数组</p><h4 id="数组计算"><a href="#数组计算" class="headerlink" title="数组计算"></a>数组计算</h4><p>a &#x3D; np.array([1.0, 2],[2, 4])<br>a<br>[[ 1.  2.]<br> [ 2.  4.]]<br> 由于数组是【同质】的，python会自动将整型转换为浮点型</p><ul><li><p>np.exp(a)：自然常数e（约等于2.7）的a次方</p></li><li><p>np.sqrt(a)：a的开方</p></li><li><p>np.square(a)：a的平方</p></li><li><p>np.power(a,3)：a的3次方</p></li><li><p>a.sum()：所有元素之和</p></li><li><p>a.max()：最大元素</p></li><li><p>a.min()：最小元素</p></li><li><p>a.max(axis&#x3D;1)：每行最大</p></li><li><p>a.min(axis&#x3D;0)：每列最小</p></li></ul><h4 id="数组与矩阵（matrix）"><a href="#数组与矩阵（matrix）" class="headerlink" title="数组与矩阵（matrix）"></a>数组与矩阵（matrix）</h4><h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><ul><li>矩阵是二维数组，矩阵乘法相求左侧矩阵列数等于右侧矩阵行数</li><li>数组可以是任意正整数维数，乘法要求两侧数组行列数均相同</li></ul><h5 id="相互转换"><a href="#相互转换" class="headerlink" title="相互转换"></a>相互转换</h5><h6 id="数组转矩阵"><a href="#数组转矩阵" class="headerlink" title="数组转矩阵"></a>数组转矩阵</h6><p>np.asmatrix(a)<br>np.mat(a)</p><h6 id="直接生成"><a href="#直接生成" class="headerlink" title="直接生成"></a>直接生成</h6><p>np.matrix(‘1.0 2.0;3.0 4.0’)</p><h4 id="生成指定长度的一维数组"><a href="#生成指定长度的一维数组" class="headerlink" title="生成指定长度的一维数组"></a>生成指定长度的一维数组</h4><p>np.linspace(0,2,9)：生成从0开始，到2结束，包含9个元素的等差数列</p><h4 id="数组元素访问"><a href="#数组元素访问" class="headerlink" title="**数组元素访问"></a>**数组元素访问</h4><p>a &#x3D; np.array([3.2, 1.5],[2.5, 4])<br>print a[0][1]<br>1.5<br>print a[0,1]<br>1.5</p><p>注意：<br>若b&#x3D;a是将b和a同时指向同一个array，若修改a或者b的某个元素，a和b都会改变<br>若想a和b不会关联修改，则需要b &#x3D; a.copy()为b单独生成一份拷贝</p><p>a:<br>[[ 0  1  2  3  4]<br> [ 5  6  7  8  9]<br> [10 11 12 13 14]<br> [15 16 17 18 19]]</p><p>a[: , [1,3]]：访问a的所有行的2、4列</p><h5 id="访问符合条件的元素"><a href="#访问符合条件的元素" class="headerlink" title="**访问符合条件的元素"></a>**访问符合条件的元素</h5><p>a[: , 2][a[: , 0] &gt; 5]</p><p>解释：<br>a [x] [y]表示访问符合x、y条件的a的元素，[: , 2]表示取所有行的第3列，[a[: , 0] &gt; 5]表示取第一列大于5的行（即第3、4行），最终即表示取第3、4行的第3列，即得结果array([12, 17])这个“子”数组</p><p>numpy.where()查找符合条件的位置<br>例如：loc &#x3D; np.where(a &#x3D;&#x3D; 11)<br>print loc<br>(array([2]), array([1]))</p><p>结果是一个表示坐标的元组，元组第一个数组表示查询结果的行坐标，第二个数组表示结果的列坐标<br>print a[loc[0][0], loc[1][0]]<br>11</p><p>上式为通过位置反求元素11<br>注意：where求出的结果为元组，不能通过loc[x,y]的方式获取元素（该获取方式为数组的方式，因为元组没有索引），只能通过loc[x][y]的方式获取</p><h3 id="数组其他操作"><a href="#数组其他操作" class="headerlink" title="数组其他操作"></a>数组其他操作</h3><h4 id="矩阵转置"><a href="#矩阵转置" class="headerlink" title="矩阵转置"></a>矩阵转置</h4><p>a &#x3D; np.random.rand(2,4)<br>a &#x3D; np.transpose(a)将a数组转置</p><p>b &#x3D; np.random.rand(2,4)<br>b &#x3D; np.mat(b)<br>print b.T    转置矩阵</p><h4 id="矩阵求逆"><a href="#矩阵求逆" class="headerlink" title="矩阵求逆"></a>矩阵求逆</h4><p>import numpy.linalg as nlg<br>a &#x3D; np.random.rand(2,2)<br>a &#x3D; np.mat(a)<br>ia &#x3D; nlg.inv(a)  得逆矩阵<br>print a * ia</p><p>[[ 1.  0.]<br> [ 0.  1.]]</p><h4 id="特征值和特征向量"><a href="#特征值和特征向量" class="headerlink" title="特征值和特征向量"></a>特征值和特征向量</h4><p>a &#x3D; np.random.rand(3,3)<br>eig_value, eig_vector &#x3D; nlg.eig(a)</p><h4 id="拼接矩阵（使用场景：循环处理某些数据后的操作）"><a href="#拼接矩阵（使用场景：循环处理某些数据后的操作）" class="headerlink" title="拼接矩阵（使用场景：循环处理某些数据后的操作）"></a>拼接矩阵（使用场景：循环处理某些数据后的操作）</h4><p>按列拼接两个向量成一个矩阵</p><p>vstack<br>hstack</p><p>实例：<br>a &#x3D; np.random.rand(2,2)<br>b &#x3D; np.random.rand(2,2)<br>c &#x3D; np.hstack([a,b])  水平拼接<br>d &#x3D; np.vstack([a,b])  垂直拼接</p><h4 id="缺失值"><a href="#缺失值" class="headerlink" title="缺失值"></a>缺失值</h4><p>nan作为缺失值的记录<br>通过isnan判定<br>a &#x3D; np.random.rand(2,2)<br>a[0, 1] &#x3D; np.nan<br>print (np.isnan(a))</p><p>nan_to_num可用来将nan替换成0<br>pandas提供能指定nan替换值的函数</p><p>print(np.nan_to_num(a))<br>[[ 0.54266589  0.        ]<br> [ 0.92468339  0.70599254]]</p><p>更多Numpy函数见<br><a href="http://wiki.scipy.org/Numpy_Example_List">http://wiki.scipy.org/Numpy_Example_List</a><br><a href="http://docs.scipy.org/doc/numpy">http://docs.scipy.org/doc/numpy</a></p><p>参考文献<br><a href="https://uqer.io/community/share/54ca15f9f9f06c276f651a56">https://uqer.io/community/share/54ca15f9f9f06c276f651a56</a></p><p><a href="http://wiki.scipy.org/Tentative_NumPy_Tutorial">http://wiki.scipy.org/Tentative_NumPy_Tutorial</a></p><p>Sheppard K. Introduction to Python for econometrics, statistics and data analysis. Self-published, University of Oxford, version, 2012, 2.</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql远端数据库与本地数据库间导入导出</title>
    <link href="/wilson-blog-hexo/2017/08/12/mysql%E8%BF%9C%E7%AB%AF%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E6%9C%AC%E5%9C%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E9%97%B4%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA/"/>
    <url>/wilson-blog-hexo/2017/08/12/mysql%E8%BF%9C%E7%AB%AF%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E6%9C%AC%E5%9C%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E9%97%B4%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA/</url>
    
    <content type="html"><![CDATA[<h3 id="远程数据库导出"><a href="#远程数据库导出" class="headerlink" title="远程数据库导出"></a>远程数据库导出</h3><ol><li>mysqldump -hxxx -uxxx -pxxx 数据库名 &gt; 脚本名.sql</li><li>sz 脚本名.sql（SecureCRT将文件下载到本地）</li></ol><h3 id="本地数据库导入"><a href="#本地数据库导入" class="headerlink" title="本地数据库导入"></a>本地数据库导入</h3><ol start="3"><li>若直接用navicat运行本脚本，失败</li><li>打开cmd，进入本地数据库，mysql -uxxxx -pxxxx，use 创建好的数据库</li><li>source 脚本名.sql，可以将2MB以上的sql脚本导入</li><li>成功执行，完成远端数据库到本地的克隆</li></ol>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python零碎知识点整理——注释</title>
    <link href="/wilson-blog-hexo/2017/02/07/python%E9%9B%B6%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E2%80%94%E2%80%94%E6%B3%A8%E9%87%8A/"/>
    <url>/wilson-blog-hexo/2017/02/07/python%E9%9B%B6%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E2%80%94%E2%80%94%E6%B3%A8%E9%87%8A/</url>
    
    <content type="html"><![CDATA[<h4 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h4><blockquote><p>python的单行注释用#，可在任意位置添加（单独一行或语句&#x2F;表达式后面，python是解释型语言，逐行按序解释代码）</p></blockquote><h4 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h4><blockquote><p>多行注释使用三个单引号或双引号<br>这实际上是<strong>多行字符串</strong>的书写方式，并非python本身提倡的多行注释</p></blockquote><h4 id="编码声明注释"><a href="#编码声明注释" class="headerlink" title="编码声明注释"></a>编码声明注释</h4><blockquote><p>出现在python脚本第一行或第二行（其他行则无效）的含有coding:xxx的注释被认为是对编码方式的声明，详见<a href="https://docs.python.org/3/reference/lexical_analysis.html#encoding-declarations">python官方文档</a></p><p>从python3开始，python默认使用utf-8编码（python3以前使用ascii编码）</p></blockquote><h4 id="平台注释"><a href="#平台注释" class="headerlink" title="平台注释"></a>平台注释</h4><blockquote><p>使python程序运行在windows平台上，需要在python文件的最前面加上#!&#x2F;usr&#x2F;bin&#x2F;python，这说明了程序用的环境的路径</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java零碎知识点整理</title>
    <link href="/wilson-blog-hexo/2017/02/07/java%E9%9B%B6%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/"/>
    <url>/wilson-blog-hexo/2017/02/07/java%E9%9B%B6%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<blockquote><p>字符串相关方法、数据类型转换、正则表达式</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.wx.teststr;<br><br><span class="hljs-keyword">import</span> java.util.regex.Matcher;<br><span class="hljs-keyword">import</span> java.util.regex.Pattern;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestString</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">intToString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">11</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">13</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">iStr</span> <span class="hljs-operator">=</span> String.valueOf(i);<br><span class="hljs-comment">//String iStr2 = (String)j;</span><br><span class="hljs-comment">//String iStr3 = (String)k;</span><br><span class="hljs-type">String</span> <span class="hljs-variable">iStr4</span> <span class="hljs-operator">=</span> String.valueOf(l);<br>System.out.println(iStr);<br>System.out.println(iStr4);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">indexOfTest</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">quote</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;An *onion* a day keeps everyone away!&quot;</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">startBound</span> <span class="hljs-operator">=</span> quote.indexOf(<span class="hljs-string">&quot;*&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">endBound</span> <span class="hljs-operator">=</span> quote.lastIndexOf(<span class="hljs-string">&quot;*&quot;</span>);<br>System.out.println(startBound+<span class="hljs-string">&quot; &quot;</span>+endBound);<br>System.out.println(quote.substring(startBound, endBound));<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">regexTest</span><span class="hljs-params">(String input)</span> &#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * java中对反斜杠解释为转义符号</span><br><span class="hljs-comment"> * 所以制定正则字符串时，要对反斜杠做转义处理</span><br><span class="hljs-comment"> * \d&#123;n&#125;表示n个数字，要多加一个\以使\d的反斜杠生效</span><br><span class="hljs-comment"> * \\+匹配加号</span><br><span class="hljs-comment"> * +在正则中有专属含义，表示匹配其前面的内容1-n次</span><br><span class="hljs-comment"> * 若要匹配加号本身，需要对加号进行正则的转义处理（即加反斜杠），</span><br><span class="hljs-comment"> * 若要表示转义，需要对反斜杠进行java的转义处理（即加反斜杠）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\\+\\d&#123;2&#125;-\\d&#123;11&#125;&quot;</span>;<span class="hljs-comment">// true</span><br><span class="hljs-comment">//String regex = &quot;&quot;;</span><br><span class="hljs-comment">//String regex = &quot;\\bcat\\b&quot;;</span><br><span class="hljs-comment">//String regex = &quot;+\d&#123;2&#125;-d&#123;10&#125;&quot;;</span><br><span class="hljs-comment">//String regex = &quot;\b+\d&#123;2&#125;-d&#123;10&#125;\b&quot;;</span><br><span class="hljs-comment">//String regex = &quot;&quot;;</span><br><span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(regex);<br><span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> pattern.matcher(input);<br><span class="hljs-type">boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> matcher.matches();<br>System.out.println(result);<br>&#125;<br><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// intToString();</span><br><span class="hljs-comment">// indexOfTest();</span><br> regexTest(<span class="hljs-string">&quot;+86-17355159636&quot;</span>);<span class="hljs-comment">// true</span><br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>final关键字修饰函数参数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.wx.testfinal;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestKwFinal</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> i;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testBaseFinal</span><span class="hljs-params">()</span> &#123;<br>i = <span class="hljs-number">3</span>;<br>System.out.println(i);<br>finalSet(i);<br>System.out.println(i);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testFinalReference</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>user.setId(<span class="hljs-number">1</span>);<br>user.setName(<span class="hljs-string">&quot;Tom&quot;</span>);<br>System.out.println(user.getId()+<span class="hljs-string">&quot; &quot;</span>+user.getName());<br>finalRefSet(user);<br>System.out.println(user.getId()+<span class="hljs-string">&quot; &quot;</span>+user.getName());<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 基本类型的值在方法内部不能被改变</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> i</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">finalSet</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-type">int</span> i)</span> &#123;<br><span class="hljs-comment">//i = 10;</span><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 所指向的引用未被改变，依然是User，但是引用的属性值可以被改变</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> user</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">finalRefSet</span><span class="hljs-params">(<span class="hljs-keyword">final</span> User user)</span> &#123;<br><span class="hljs-comment">//user = new User();</span><br>user.setName(<span class="hljs-string">&quot;Jerry&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//testBaseFinal();</span><br>testFinalReference();<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows删除“找不到该项目”的文件</title>
    <link href="/wilson-blog-hexo/2017/02/06/windows%E5%88%A0%E9%99%A4%E2%80%9C%E6%89%BE%E4%B8%8D%E5%88%B0%E8%AF%A5%E9%A1%B9%E7%9B%AE%E2%80%9D%E7%9A%84%E6%96%87%E4%BB%B6/"/>
    <url>/wilson-blog-hexo/2017/02/06/windows%E5%88%A0%E9%99%A4%E2%80%9C%E6%89%BE%E4%B8%8D%E5%88%B0%E8%AF%A5%E9%A1%B9%E7%9B%AE%E2%80%9D%E7%9A%84%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>1、编写一个自动删除脚本，内容如下：</p><ol><li>右键，新建文本文件</li><li>重命名为del.bat</li><li>编辑内容：del &#x2F;F &#x2F;A &#x2F;Q \?%1（第一行）</li><li>rd &#x2F;S &#x2F;Q \?%1（第二行）</li></ol><p>2、把要删除的文件直接拖到该脚本上即可删除</p><p>3、原理</p><ol><li>方法采纳自百度经验<a href="http://jingyan.baidu.com/article/e4d08ffdf5ab470fd2f60df4.html">删除文件时提示“找不到该项目”，怎么解决?</a></li><li>del为windows删除文件的命令，rd为windows删除目录的命令，&#x2F;F为强制删除参数，&#x2F;A为根据文件属性删除文件，&#x2F;Q为安静删除模式参数（删除全局通配符时不需要确认），后面的\?即为全局通配符（UNC），？表示一个字符，在此仅为”.”，即当前电脑</li></ol>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java基础算法（插入、选择、冒泡、快排）</title>
    <link href="/wilson-blog-hexo/2016/12/15/Java%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%EF%BC%88%E6%8F%92%E5%85%A5%E3%80%81%E9%80%89%E6%8B%A9%E3%80%81%E5%86%92%E6%B3%A1%E3%80%81%E5%BF%AB%E6%8E%92%EF%BC%89/"/>
    <url>/wilson-blog-hexo/2016/12/15/Java%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%EF%BC%88%E6%8F%92%E5%85%A5%E3%80%81%E9%80%89%E6%8B%A9%E3%80%81%E5%86%92%E6%B3%A1%E3%80%81%E5%BF%AB%E6%8E%92%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="一、直接插入排序"><a href="#一、直接插入排序" class="headerlink" title="一、直接插入排序"></a>一、直接插入排序</h3><h4 id="1、原理：从待排序的数中选出一个来，插入到前面的合适位置。"><a href="#1、原理：从待排序的数中选出一个来，插入到前面的合适位置。" class="headerlink" title="1、原理：从待排序的数中选出一个来，插入到前面的合适位置。"></a>1、原理：从待排序的数中选出一个来，插入到前面的合适位置。</h4><h4 id="2、适用场景：基本有序的数据"><a href="#2、适用场景：基本有序的数据" class="headerlink" title="2、适用场景：基本有序的数据"></a>2、适用场景：基本有序的数据</h4><h4 id="3、代码实现："><a href="#3、代码实现：" class="headerlink" title="3、代码实现："></a>3、代码实现：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> data[] = &#123;<span class="hljs-number">12</span>, <span class="hljs-number">6</span>, <span class="hljs-number">17</span>, <span class="hljs-number">108</span>, <span class="hljs-number">97</span>, <span class="hljs-number">93</span>, <span class="hljs-number">256</span>, <span class="hljs-number">1024</span>&#125;;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertSort</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> tmp, i = <span class="hljs-number">0</span>;<br><span class="hljs-comment">// 遍历数组</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j&lt;data.length; j++) &#123;<br><span class="hljs-comment">// 依次取出每个数放入tmp</span><br>tmp = data[j];<br><span class="hljs-comment">// 将取出的数与之前面一个比较</span><br>i = j - <span class="hljs-number">1</span>;<br><span class="hljs-comment">// 若小于前面一个数，则将前面一个数后移（覆盖取出来的这个数的位置）</span><br><span class="hljs-keyword">while</span>(i &gt;= <span class="hljs-number">0</span> &amp;&amp; tmp &lt; data[i]) &#123;<br>data[i+<span class="hljs-number">1</span>] = data[i];<br><span class="hljs-comment">// 继续和再前面一个数比较</span><br>i--;<br>&#125;<br><span class="hljs-comment">// 将取出的数插入</span><br>data[i+<span class="hljs-number">1</span>] = tmp;<br>System.out.println();<br>print();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二、选择排序"><a href="#二、选择排序" class="headerlink" title="二、选择排序"></a>二、选择排序</h3><h4 id="1、原理：与直接插入排序正好相反，选择排序是从待排序的数中选出最小的放在已经排好的后面，这个算法选数耗时"><a href="#1、原理：与直接插入排序正好相反，选择排序是从待排序的数中选出最小的放在已经排好的后面，这个算法选数耗时" class="headerlink" title="1、原理：与直接插入排序正好相反，选择排序是从待排序的数中选出最小的放在已经排好的后面，这个算法选数耗时"></a>1、原理：与直接插入排序正好相反，选择排序是从待排序的数中选出<strong>最小</strong>的放在已经排好的<strong>后面</strong>，这个算法<strong>选数耗时</strong></h4><h4 id="2、代码实现："><a href="#2、代码实现：" class="headerlink" title="2、代码实现："></a>2、代码实现：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> data[] = &#123;<span class="hljs-number">12</span>, <span class="hljs-number">6</span>, <span class="hljs-number">17</span>, <span class="hljs-number">108</span>, <span class="hljs-number">97</span>, <span class="hljs-number">93</span>, <span class="hljs-number">256</span>, <span class="hljs-number">1024</span>&#125;;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selectSort</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// i, j, k未初始化</span><br><span class="hljs-type">int</span> i, j, k, tmp = <span class="hljs-number">0</span>;<br><span class="hljs-comment">// 遍历数组，从i开始的length-1个数</span><br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;data.length-<span class="hljs-number">1</span>; i++) &#123;<br><span class="hljs-comment">// 设置k的值和i一致</span><br>k = i;<br><span class="hljs-comment">// 遍历数组，从i+1开始的length-1个数</span><br><span class="hljs-keyword">for</span>(j=i+<span class="hljs-number">1</span>; j&lt;data.length; j++) &#123;<br><span class="hljs-comment">// 如果后一个数比前面一个数小</span><br><span class="hljs-keyword">if</span>(data[j] &lt; data[k]) &#123;<br><span class="hljs-comment">// 则把后一个数的坐标赋予k（保持k坐标的数为当前轮最小数）</span><br>k = j;<br>&#125;<br>&#125;<br><span class="hljs-comment">// 若发生后一个数比前一个数小的情况，则交换</span><br><span class="hljs-keyword">if</span>(k != i) &#123;<br><span class="hljs-comment">// 交换</span><br>tmp = data[i];<br>data[i] = data[k];<br>data[k] = tmp;<br>System.out.println();<br>print();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="三、冒泡排序"><a href="#三、冒泡排序" class="headerlink" title="三、冒泡排序"></a>三、冒泡排序</h3><h4 id="1、原理：小的数一点一点向前起泡，最终有序。"><a href="#1、原理：小的数一点一点向前起泡，最终有序。" class="headerlink" title="1、原理：小的数一点一点向前起泡，最终有序。"></a>1、原理：小的数一点一点向前起泡，最终有序。</h4><h4 id="2、代码实现：-1"><a href="#2、代码实现：-1" class="headerlink" title="2、代码实现："></a>2、代码实现：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> data[] = &#123;<span class="hljs-number">12</span>, <span class="hljs-number">6</span>, <span class="hljs-number">17</span>, <span class="hljs-number">108</span>, <span class="hljs-number">97</span>, <span class="hljs-number">93</span>, <span class="hljs-number">256</span>, <span class="hljs-number">1024</span>&#125;;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bubbleSort</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> i, j, tmp = <span class="hljs-number">0</span>;<br><span class="hljs-comment">// 遍历从i开始的length-1个数</span><br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;data.length - <span class="hljs-number">1</span>; i++) &#123;<br><span class="hljs-comment">// 依次比较相邻两个数</span><br><span class="hljs-keyword">for</span>(j=data.length - <span class="hljs-number">1</span>; j&gt;i; i--) &#123;<br><span class="hljs-comment">// 若后者小于前者，则换位</span><br><span class="hljs-keyword">if</span>(data[j] &lt; data[j-<span class="hljs-number">1</span>]) &#123;<br>tmp = data[j];<br>data[j] = data[j-<span class="hljs-number">1</span>];<br>data[j-<span class="hljs-number">1</span>] = tmp;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="四、快速排序"><a href="#四、快速排序" class="headerlink" title="四、快速排序"></a>四、快速排序</h3><h4 id="1、原理：设置两个指针：i和j，分别指向第一个和最后一个，i像后移动，j向前移动，选第一个数为标准（一般这样做，当然快排的关键就是这个“标准”的选取），从后面开始，找到第一个比标准小的数，互换位置，然后再从前面，找到第一个比标准大的数，互换位置，第一趟的结果就是标准左边的都小于标准，右边的都大于标准（但不一定有序），分成两拨后，继续递归的使用上述方法，最终有序！"><a href="#1、原理：设置两个指针：i和j，分别指向第一个和最后一个，i像后移动，j向前移动，选第一个数为标准（一般这样做，当然快排的关键就是这个“标准”的选取），从后面开始，找到第一个比标准小的数，互换位置，然后再从前面，找到第一个比标准大的数，互换位置，第一趟的结果就是标准左边的都小于标准，右边的都大于标准（但不一定有序），分成两拨后，继续递归的使用上述方法，最终有序！" class="headerlink" title="1、原理：设置两个指针：i和j，分别指向第一个和最后一个，i像后移动，j向前移动，选第一个数为标准（一般这样做，当然快排的关键就是这个“标准”的选取），从后面开始，找到第一个比标准小的数，互换位置，然后再从前面，找到第一个比标准大的数，互换位置，第一趟的结果就是标准左边的都小于标准，右边的都大于标准（但不一定有序），分成两拨后，继续递归的使用上述方法，最终有序！"></a>1、原理：设置两个指针：i和j，分别指向第一个和最后一个，i像后移动，j向前移动，选第一个数为标准（一般这样做，当然快排的关键就是这个“标准”的选取），从后面开始，找到第一个比标准小的数，互换位置，然后再从前面，找到第一个比标准大的数，互换位置，第一趟的结果就是标准左边的都小于标准，右边的都大于标准（但不一定有序），分成两拨后，继续递归的使用上述方法，最终有序！</h4><h4 id="2、适用场景：基本无序的数据"><a href="#2、适用场景：基本无序的数据" class="headerlink" title="2、适用场景：基本无序的数据"></a>2、适用场景：基本<strong>无序</strong>的数据</h4><h4 id="3、代码实现：-1"><a href="#3、代码实现：-1" class="headerlink" title="3、代码实现："></a>3、代码实现：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quickSort</span><span class="hljs-params">(<span class="hljs-type">int</span> data[], <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span> &#123;<br><span class="hljs-type">int</span> i, j;<br>i = start;<br>j = end;<br><span class="hljs-keyword">if</span>((data == <span class="hljs-literal">null</span>) || (data.length == <span class="hljs-number">0</span>)) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-keyword">while</span>(i &lt; j) &#123;<br><span class="hljs-comment">// 以start下标的数据为key，从右向左依次扫描</span><br><span class="hljs-keyword">while</span>(i &lt; j &amp;&amp; data[i] &lt;= data[j]) &#123;<br>j--;<br>&#125;<br><span class="hljs-comment">// 找出第一个比key小的，交换位置</span><br><span class="hljs-keyword">if</span>(i &lt; j) &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> data[i];<br>data[i] = data[j];<br>data[j] = temp;<br>&#125;<br><span class="hljs-keyword">while</span>(i &lt; j &amp;&amp; data[i] &lt; data[j]) &#123;<br><span class="hljs-comment">// 左侧扫描（此时a[j]存着key的值）</span><br>i++;<br>&#125;<br><span class="hljs-comment">// 找出第一个比key大的，交换位置</span><br><span class="hljs-keyword">if</span>(i &lt; j) &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> data[i];<br>data[i] = data[j];<br>data[j] = temp;<br>&#125;<br>&#125;<br><span class="hljs-comment">// 递归调用，把key前面的完成排序</span><br><span class="hljs-keyword">if</span>(i-start &gt; <span class="hljs-number">1</span>) &#123;<br>quickSort(data, <span class="hljs-number">0</span>, i-<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-comment">// 递归调用，把key后面的完成排序</span><br><span class="hljs-keyword">if</span>(end-j &gt; <span class="hljs-number">1</span>) &#123;<br>quickSort(data, j+<span class="hljs-number">1</span>, end);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>可复用面向对象软件基础——设计模式（六）之原型模式</title>
    <link href="/wilson-blog-hexo/2016/12/15/%E5%8F%AF%E5%A4%8D%E7%94%A8%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BD%AF%E4%BB%B6%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%85%AD%EF%BC%89%E4%B9%8B%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/wilson-blog-hexo/2016/12/15/%E5%8F%AF%E5%A4%8D%E7%94%A8%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BD%AF%E4%BB%B6%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%85%AD%EF%BC%89%E4%B9%8B%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="一、原型模式（Prototype）"><a href="#一、原型模式（Prototype）" class="headerlink" title="一、原型模式（Prototype）"></a>一、原型模式（Prototype）</h3><blockquote><p>原型模式虽然是创建型的模式，但是与工程模式没有关系，从名字即可看出，该模式的思想就是将一个对象作为原型，对其进行<strong>复制、克隆</strong>，产生一个和原对象类似的新对象。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 原型类，实现可复制接口</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> barnett</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Prototype</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span> &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 复制方法，调用父类的复制方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;<br><span class="hljs-type">Prototype</span> <span class="hljs-variable">prototype</span> <span class="hljs-operator">=</span> (Prototype) <span class="hljs-built_in">super</span>.clone();<br><span class="hljs-keyword">return</span> prototype;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>很简单，一个原型类，只需要实现<strong>Cloneable</strong>接口，覆写clone方法，此处clone方法可以改成任意的名称，因为Cloneable接口是个<strong>空接口</strong>，你可以任意定义实现类的方法名，如cloneA或者cloneB。</p><p>因为此处的重点是super.clone()这句话，super.clone()调用的是Object的clone()方法，而在Object类中，clone()是native的。</p></blockquote><h3 id="二、深浅复制"><a href="#二、深浅复制" class="headerlink" title="二、深浅复制"></a>二、深浅复制</h3><blockquote><p><strong>浅复制</strong>：将一个对象复制后，基本数据类型的变量都会重新创建，而<strong>引用类型</strong>，<strong>指向</strong>的还是<strong>原对象所指向的</strong>。</p></blockquote><p><strong>深复制</strong>：将一个对象复制后，不论是基本数据类型还有引用类型，都是<strong>重新创建</strong>的。简单来说，就是深复制进行了<strong>完全彻底</strong>的复制，而浅复制不彻底。</p><blockquote></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrototypeDeepAndThinClone</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span>, Serializable &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><span class="hljs-keyword">private</span> String string;<br><br><span class="hljs-keyword">private</span> SerializableObject obj;<br><br><span class="hljs-comment">// 浅复制</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;<br><span class="hljs-type">Prototype</span> <span class="hljs-variable">prototype</span> <span class="hljs-operator">=</span> (Prototype) <span class="hljs-built_in">super</span>.clone();<br><span class="hljs-keyword">return</span> prototype;<br>&#125;<br><br><span class="hljs-comment">// 深复制</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">deepClone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br><br><span class="hljs-comment">// 写入当前对象的二进制流</span><br><span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br><span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(bos);<br>oos.writeObject(<span class="hljs-built_in">this</span>);<br><br><span class="hljs-comment">// 读出二进制流产生的新对象</span><br><span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(bos.toByteArray());<br><span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bis);<br><span class="hljs-keyword">return</span> ois.readObject();<br>&#125;<br><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> string;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setString</span><span class="hljs-params">(String string)</span> &#123;<br><span class="hljs-built_in">this</span>.string = string;<br>&#125;<br><br><span class="hljs-keyword">public</span> SerializableObject <span class="hljs-title function_">getObj</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> obj;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setObj</span><span class="hljs-params">(SerializableObject obj)</span> &#123;<br><span class="hljs-built_in">this</span>.obj = obj;<br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SerializableObject</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>要实现深复制，需要采用<strong>流</strong>的形式读入当前对象的<strong>二进制输入</strong>，再写出<strong>二进制数据</strong>对应的对象。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>可复用面向对象软件基础——设计模式（五）之建造者模式</title>
    <link href="/wilson-blog-hexo/2016/12/15/%E5%8F%AF%E5%A4%8D%E7%94%A8%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BD%AF%E4%BB%B6%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%94%EF%BC%89%E4%B9%8B%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <url>/wilson-blog-hexo/2016/12/15/%E5%8F%AF%E5%A4%8D%E7%94%A8%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BD%AF%E4%BB%B6%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%94%EF%BC%89%E4%B9%8B%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="一、建造者（Builder）模式"><a href="#一、建造者（Builder）模式" class="headerlink" title="一、建造者（Builder）模式"></a>一、建造者（Builder）模式</h3><blockquote><p>工厂类模式提供的是创建单个类的模式，而建造者模式则是将各种产品<strong>集中</strong>起来进行<strong>管理</strong>，用来创建<strong>复合对象</strong>，所谓复合对象就是指某个类具有不同的属性，其实建造者模式就是前面抽象工厂模式和最后的Test结合起来得到的。</p></blockquote><h3 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 发送接口，有一个发送方法待实现</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> barnett</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Sender</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">()</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 2、邮件发送类，实现发送接口，实现其发送方法，用以发送邮件</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> barnett</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MailSender</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Sender</span> &#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;I am MailSender!&quot;</span>);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 短信发送类，实现了发送接口的发送方法，用以发送短信</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> barnett</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SmsSender</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Sender</span> &#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;I am SmsSender!&quot;</span>);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 3、建造者类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> barnett</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Builder</span> &#123;<br><br><span class="hljs-comment">// 用以存储生产出的多个发送器</span><br><span class="hljs-keyword">private</span> List&lt;Sender&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Sender&gt;();<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用于生产邮件发送器，当该方法被调用时会生产多个邮件发送器放入集合</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> count生产个数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">produceMailSender</span><span class="hljs-params">(<span class="hljs-type">int</span> count)</span> &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;count; i++) &#123;<br>list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MailSender</span>());<br>&#125;<br><span class="hljs-keyword">for</span>(Sender sender : list) &#123;<br>sender.send();<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">produceSmsSender</span><span class="hljs-params">(<span class="hljs-type">int</span> count)</span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;count; i++) &#123;<br>list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SmsSender</span>());<br>&#125;<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 4、测试类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> barnett</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// 实例化一个建造者</span><br><span class="hljs-type">Builder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Builder</span>();<br><span class="hljs-comment">// 传入参数，委派建造者生产多个产品并放入集合</span><br>builder.produceMailSender(<span class="hljs-number">5</span>);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="三、与工厂模式对比"><a href="#三、与工厂模式对比" class="headerlink" title="三、与工厂模式对比"></a>三、与工厂模式对比</h3><blockquote><p>从这点看出，建造者模式将很多功能<strong>集成</strong>到一个类里，这个类可以创造出比较复杂的东西。所以与工程模式的区别就是：工厂模式关注的是创建<strong>单个产品</strong>，而建造者模式则关注创建符合对象的<strong>多个</strong>部分。因此，是选择工厂模式还是建造者模式，依实际情况而定。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>可复用面向对象软件基础——设计模式（四）之单例模式</title>
    <link href="/wilson-blog-hexo/2016/12/15/%E5%8F%AF%E5%A4%8D%E7%94%A8%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BD%AF%E4%BB%B6%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/wilson-blog-hexo/2016/12/15/%E5%8F%AF%E5%A4%8D%E7%94%A8%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BD%AF%E4%BB%B6%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="一、单例模式（Singleton）简介"><a href="#一、单例模式（Singleton）简介" class="headerlink" title="一、单例模式（Singleton）简介"></a>一、单例模式（Singleton）简介</h3><blockquote><p>单例对象（Singleton）是一种常用的设计模式。在Java应用中，单例对象能保证在一个JVM中，该对象<strong>只有一个实例</strong>存在。</p></blockquote><h3 id="二、单例模式优势"><a href="#二、单例模式优势" class="headerlink" title="二、单例模式优势"></a>二、单例模式优势</h3><ol><li>某些类创建繁琐，对于一些大型对象，系统开销大</li><li>省去new操作符，降低系统内存使用频率，减轻GC压力</li><li>保证某些核心类独立控制系统整个流程（控制其不可实例多个）</li></ol><h3 id="三、简版单例类"><a href="#三、简版单例类" class="headerlink" title="三、简版单例类"></a>三、简版单例类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br><br><span class="hljs-comment">// 持有私有静态实例，防止被引用，此处赋值为null，目的为实现延迟加载</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Singleton</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br><span class="hljs-comment">// 私有构造方法，防止被实例化</span><br><span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span> &#123;<br><br>&#125;<br><br><span class="hljs-comment">// 静态工厂方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span>(instance == <span class="hljs-literal">null</span>) &#123;<br>instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>&#125;<br><span class="hljs-keyword">return</span> instance;<br>&#125;<br><br><span class="hljs-comment">// 如果该对象被用于序列化，可保证对象在序列化前后保持一致</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">readResolve</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> instance;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>这个类可以满足基本要求，但是，像这样毫无<strong>线程安全</strong>保护的类，如果我们把它放入<strong>多线程</strong>的环境下，肯定就会出现问题了，如何解决？我们首先会想到对getInstance方法加<strong>synchronized</strong>关键字，如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 静态工厂方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span>(instance == <span class="hljs-literal">null</span>) &#123;<br>instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>&#125;<br><span class="hljs-keyword">return</span> instance;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>但是，synchronized关键字锁住的是这个<strong>对象</strong>，这样的用法，在<strong>性能</strong>上会有所<strong>下降</strong>，因为每次调用getInstance()，都要对对象上锁。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 静态工厂方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span>(instance == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">synchronized</span> (instance) &#123;<br><span class="hljs-keyword">if</span>(instance == <span class="hljs-literal">null</span>) &#123;<br>instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> instance;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>似乎解决了之前提到的问题，将synchronized关键字加在了内部，也就是说当调用的时候是不需要加锁的，只有在instance为null，并<strong>创建对象</strong>的时候才需要加锁，性能有一定的提升。</p><p>但是，这样的情况，还是有可能有问题的，看下面的情况：在Java指令中<strong>创建对象</strong>和<strong>赋值</strong>操作是分开进行的，也就是说instance &#x3D; new Singleton();语句是分两步执行的。</p><p>但是JVM并不保证这两个操作的<strong>先后顺序</strong>，也就是说有可能JVM会为新的Singleton实例分配空间，然后<strong>直接赋值给instance成员</strong>，然后再去<strong>初始化这个Singleton实例</strong>。这样就可能出错了。</p><p>我们以A、B两个线程为例：<br>1&gt;A、B线程同时进入了第一个if判断<br>2&gt;A首先进入synchronized块，由于instance为null，所以它执行instance &#x3D; new Singleton();<br>3&gt;由于JVM内部的优化机制，JVM先画出了一些分配给Singleton实例的<strong>空白内存</strong>，并赋值给<strong>instance成员</strong>（注意此时JVM没有开始初始化这个实例），然后A离开了synchronized块。<br>4&gt;B进入synchronized块，由于instance此时不是null，因此它马上离开了synchronized块并将结果返回给调用该方法的程序。<br>5&gt;此时B线程打算使用Singleton实例，却发现它<strong>没有被初始化</strong>，于是错误发生了。</p><p>所以程序还是有可能发生错误，其实程序在运行过程是很复杂的，从这点我们就可以看出，尤其是在写<strong>多线程</strong>环境下的程序更有难度，有挑战性。我们对该程序做进一步优化：</p></blockquote><h3 id="四、内部类维护单例"><a href="#四、内部类维护单例" class="headerlink" title="四、内部类维护单例"></a>四、内部类维护单例</h3><blockquote><p>实际情况是，单例模式使用<strong>内部类</strong>来维护单例的实现，JVM内部的机制能够保证当一个类被加载的时候，这个类的加载过程是<strong>线程互斥</strong>的。</p><p>这样当我们第一次调用getInstance的时候，JVM能够帮我们保证instance只被创建一次，并且会保证把赋值给instance的内存<strong>初始化完毕</strong>，这样我们就不用担心上面的问题。</p><p>同时该方法也只会在第一次调用的时候使用互斥机制，这样就解决了低性能问题。</p><p>其实说它完美，也不一定，如果在<strong>构造函数</strong>中抛出<strong>异常</strong>，实例将永远得不到创建，也会出错。</p><p>所以说，十分完美的东西是没有的，我们只能根据实际情况，选择最适合自己应用场景的实现方法。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br><br><span class="hljs-comment">// 私有构造方法，防止被实例化</span><br><span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span> &#123;<br><br>&#125;<br><br><span class="hljs-comment">// 使用内部类维护单例</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonFactory</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Singleton</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>&#125;<br><br><span class="hljs-comment">// 获取实例</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> SingletonFactory.instance;<br>&#125;<br><br><span class="hljs-comment">// 若该对象被用于序列化，可保证对象在序列化前后保持一致</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">readResolve</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> getInstance();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="五、单独为创建加Synchronized"><a href="#五、单独为创建加Synchronized" class="headerlink" title="五、单独为创建加Synchronized"></a>五、单独为创建加Synchronized</h3><blockquote><p>也有人这样实现：因为我们只需要在创建类的时候进行同步，所以只要将创建和getInstance()分开，单独为创建加synchronized关键字，也是可以的：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonTest</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">SingletonTest</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br><span class="hljs-keyword">private</span> <span class="hljs-title function_">SingletonTest</span><span class="hljs-params">()</span> &#123;<br><br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">syncInit</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span>(instance == <span class="hljs-literal">null</span>) &#123;<br>instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingletonTest</span>();<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SingletonTest <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span>(instance == <span class="hljs-literal">null</span>) &#123;<br>syncInit();<br>&#125;<br><span class="hljs-keyword">return</span> instance;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>可复用面向对象软件基础——设计模式（三）之抽象工厂模式</title>
    <link href="/wilson-blog-hexo/2016/12/15/%E5%8F%AF%E5%A4%8D%E7%94%A8%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BD%AF%E4%BB%B6%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8B%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <url>/wilson-blog-hexo/2016/12/15/%E5%8F%AF%E5%A4%8D%E7%94%A8%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BD%AF%E4%BB%B6%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8B%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="一、工厂方法模式缺陷"><a href="#一、工厂方法模式缺陷" class="headerlink" title="一、工厂方法模式缺陷"></a>一、工厂方法模式缺陷</h3><blockquote><p>工厂方法模式有一个问题就是，类的创建依赖工厂类，也就是说，如果想要<strong>拓展程序</strong>，必须<strong>修改工厂</strong>类，这违背了设计模式六大原则第一条<a href="http://blog.csdn.net/sinat_16791487/article/details/53666953">闭包原则</a>。</p><p>所以，从设计角度考虑，有一定的问题，如何解决？就用到抽象工厂模式，创建<strong>多个工厂类</strong>，这样一旦需要增加新的功能，直接增加新的工厂类就可以了，不需要修改之前的代码。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTYxMjE1MTYyMjI3MTY3?x-oss-process=image/format,png" alt="这里写图片描述"></p></blockquote><h3 id="二、抽象工厂模式实现"><a href="#二、抽象工厂模式实现" class="headerlink" title="二、抽象工厂模式实现"></a>二、抽象工厂模式实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1、邮寄接口，有一个抽象邮寄方法待实现</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> barnett</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Sender</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 2、实现类，邮件邮寄类实现邮寄接口，实现其邮寄的方法</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> barnett</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MailSender</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Sender</span> &#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;I am MailSender!&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 短信邮寄类实现邮寄接口，实现其邮寄方法</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> barnett</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SmsSender</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Sender</span> &#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;I am SmsSender!&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 3、提供器接口，返回邮寄对象，其生产方法待实现</span><br><span class="hljs-comment"> * 工厂依靠实现该接口，生产产品（Sender）</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> barnett</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Provider</span> &#123;<br><br><span class="hljs-keyword">public</span> Sender <span class="hljs-title function_">produce</span><span class="hljs-params">()</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 4、工厂，邮件邮寄工厂，负责专门生产邮件邮寄实例</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> barnett</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SendMailFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Provider</span> &#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Sender <span class="hljs-title function_">produce</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MailSender</span>();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 短信邮寄工厂，专门生产短信邮寄实例</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> barnett</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SendSmsFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Provider</span> &#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Sender <span class="hljs-title function_">produce</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SmsSender</span>();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 5、测试类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> barnett</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// 实例一个邮件工厂(因其实现了提供器接口，可返回一个具有专门生产某种产品生产方法的实例）</span><br><span class="hljs-type">Provider</span> <span class="hljs-variable">provider</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SendMailFactory</span>();<br><span class="hljs-comment">// 通过该实例生产产品</span><br><span class="hljs-type">Sender</span> <span class="hljs-variable">sender</span> <span class="hljs-operator">=</span> provider.produce();<br><span class="hljs-comment">// 调用产品的方法</span><br>sender.send();<br><span class="hljs-comment">// 实例生产另一种产品的工厂</span><br><span class="hljs-type">SendSmsFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SendSmsFactory</span>();<br><span class="hljs-type">Sender</span> <span class="hljs-variable">sender2</span> <span class="hljs-operator">=</span> factory.produce();<br>sender2.send();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="三、抽象工厂模式优势"><a href="#三、抽象工厂模式优势" class="headerlink" title="三、抽象工厂模式优势"></a>三、抽象工厂模式优势</h3><blockquote><p>若想生产新的产品，只需一个<strong>实现类</strong>，实现Sender接口，再创建一个专门用于生产该产品的<strong>工厂类</strong>，实现Provider接口，这样一来，<strong>无需改动</strong>原有代码，<strong>拓展性好</strong>。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>可复用面向对象软件基础——设计模式（二）之工厂方法模式</title>
    <link href="/wilson-blog-hexo/2016/12/15/%E5%8F%AF%E5%A4%8D%E7%94%A8%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BD%AF%E4%BB%B6%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <url>/wilson-blog-hexo/2016/12/15/%E5%8F%AF%E5%A4%8D%E7%94%A8%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BD%AF%E4%BB%B6%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="一、工厂方法模式分类（3种）"><a href="#一、工厂方法模式分类（3种）" class="headerlink" title="一、工厂方法模式分类（3种）"></a>一、工厂方法模式分类（3种）</h3><ol><li>普通工厂模式</li><li>多个工厂方法模式</li><li>静态工厂方法模式</li></ol><h3 id="二、工厂方法模式详解"><a href="#二、工厂方法模式详解" class="headerlink" title="二、工厂方法模式详解"></a>二、工厂方法模式详解</h3><h4 id="（1）普通工厂模式"><a href="#（1）普通工厂模式" class="headerlink" title="（1）普通工厂模式"></a>（1）普通工厂模式</h4><blockquote><p>普通工厂模式就是建立一个<strong>工厂类</strong>，对实现了<strong>同一接口</strong>的一些<strong>类</strong>进行<strong>实例</strong>的创建。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTYxMjE1MTEyNDMwNDE2?x-oss-process=image/format,png" alt="这里写图片描述"></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1、创建不同产品的共同接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Sender</span> &#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 邮寄接口中有一个邮寄方法待实现</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Send</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 2、（实现类）邮件邮寄类实现了邮寄接口，实现其邮寄的抽象方法</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> barnett</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MailSender</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Sender</span> &#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Send</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;I am MailSender!&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 短信邮寄类实现了邮寄接口，实现其邮寄的抽象方法</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> barnett</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SmsSender</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Sender</span> &#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Send</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;I am SmsSender!&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 3、工厂类，负责多次制造产品（new出复用的类）</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> barnett</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SendFactory</span> &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 工厂类中的生产方法</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> type输入要生产的产品类型</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span>返回一个产品</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> Sender <span class="hljs-title function_">produce</span><span class="hljs-params">(String type)</span> &#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;mail&quot;</span>.equals(type)) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MailSender</span>();<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;sms&quot;</span>.equals(type)) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SmsSender</span>();<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;请输入正确的类型！&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 4、测试类，实例一个工厂，生产多个产品</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> barnett</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FactoryTest</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// 创建一个工厂（可多次生产）</span><br><span class="hljs-type">SendFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SendFactory</span>();<br><span class="hljs-comment">// 使用工厂按照要求生产相应产品</span><br><span class="hljs-type">Sender</span> <span class="hljs-variable">sender</span> <span class="hljs-operator">=</span> factory.produce(<span class="hljs-string">&quot;sms&quot;</span>);<br><span class="hljs-comment">// 调用产品的方法</span><br>sender.Send();<br><span class="hljs-type">Sender</span> <span class="hljs-variable">sender2</span> <span class="hljs-operator">=</span> factory.produce(<span class="hljs-string">&quot;mail&quot;</span>);<br>sender2.Send();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="工厂优势"><a href="#工厂优势" class="headerlink" title="工厂优势"></a>工厂优势</h4><blockquote><p>1、 实例出一个工厂，再生产工厂内可以生产的产品，则只需要调用工厂的生产方法，通过传入不同的参数，生产不同的产品<br>2、传统方式则每次要生产一个产品时都需要实例化，然后调用生产方法<br>3、这样一来，要生产产品时，无需了解内部细节，交由工厂管理，节省资源</p></blockquote><h4 id="（2）多个工厂方法模式"><a href="#（2）多个工厂方法模式" class="headerlink" title="（2）多个工厂方法模式"></a>（2）多个工厂方法模式</h4><blockquote><p>多个工厂方法模式，是对普通工厂方法模式的改进，在普通工厂方法模式中，如果传递的<strong>字符串出错</strong>，则不能正确创建对象</p><p>而多个工厂方法模式是提供<strong>多个工厂方法</strong>，分别创建对象。</p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTYxMjE1MTE0MzM4ODk1?x-oss-process=image/format,png" alt="这里写图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 工厂类，负责多次制造产品</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> barnett</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MultiMethodSendFactory</span> &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 专门生产邮件邮寄器的方法</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> Sender <span class="hljs-title function_">produceMail</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MailSender</span>();<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 专门生产短信邮寄器的方法</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> Sender <span class="hljs-title function_">produceSms</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SmsSender</span>();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 测试类，实例一个工厂，生产多个产品</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> barnett</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MultiMethodFactoryTest</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// 创建一个工厂（可多次生产）</span><br><span class="hljs-type">MultiMethodSendFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MultiMethodSendFactory</span>();<br><span class="hljs-comment">// 根据不同的需求调用不同的方法</span><br><span class="hljs-type">Sender</span> <span class="hljs-variable">mailSender</span> <span class="hljs-operator">=</span> factory.produceMail();<br>mailSender.Send();<br><span class="hljs-type">Sender</span> <span class="hljs-variable">smsSender</span> <span class="hljs-operator">=</span> factory.produceSms();<br>smsSender.Send();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（3）静态工厂方法模式"><a href="#（3）静态工厂方法模式" class="headerlink" title="（3）静态工厂方法模式"></a>（3）静态工厂方法模式</h4><blockquote><p>将上面的多个工厂方法模式里的<strong>方法</strong>置为<strong>静态</strong>的，<strong>不需</strong>要创建<strong>实例</strong>，<strong>直接调用</strong>即可。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 工厂类，负责多次制造产品</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> barnett</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticMethodSendFactory</span> &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 专门生产邮件邮寄器的方法</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Sender <span class="hljs-title function_">produceMail</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MailSender</span>();<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 专门生产短信邮寄器的方法</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Sender <span class="hljs-title function_">produceSms</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SmsSender</span>();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 测试类，直接调用工厂中的静态方法，生产产品</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> barnett</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticMethodFactoryTest</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Sender</span> <span class="hljs-variable">mailSender</span> <span class="hljs-operator">=</span> StaticMethodSendFactory.produceMail();<br>mailSender.Send();<br><span class="hljs-type">Sender</span> <span class="hljs-variable">smsSender</span> <span class="hljs-operator">=</span> StaticMethodSendFactory.produceSms();<br>smsSender.Send();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
